# üéÆ –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ PRYTON

import pytest
import os
import sys
from datetime import datetime, timedelta
from unittest.mock import Mock, patch
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.services.user_service import UserService
from src.services.game_service import GameService
from src.services.settings_service import SettingsService
from src.services.scheduler_service import SchedulerService
from src.services.monitoring_service import MonitoringService
from src.models.base import Base
from src.models.user import User
from src.models.game import Game, GameStatus, GameRole
from src.models.settings import Setting, District, Role


class TestFullGameCycle:
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    
    @classmethod
    def setup_class(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        # –°–æ–∑–¥–∞–µ–º in-memory SQLite –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        cls.engine = create_engine("sqlite:///:memory:")
        Base.metadata.create_all(cls.engine)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        Session = sessionmaker(bind=cls.engine)
        cls.session = Session()
        
        # –ü–∞—Ç—á–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
        import src.models.base
        src.models.base.get_session = lambda: cls.session
        
        print("üèóÔ∏è  –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    @classmethod
    def teardown_class(cls):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        cls.session.close()
        print("üßπ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –æ—á–∏—â–µ–Ω–∞")
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        for table in reversed(Base.metadata.sorted_tables):
            self.session.execute(table.delete())
        self.session.commit()
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self._setup_basic_settings()
        print("üìã –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
    
    def _setup_basic_settings(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–π–æ–Ω—ã
        districts = ["–¶–µ–Ω—Ç—Ä", "–°–µ–≤–µ—Ä–Ω—ã–π", "–Æ–∂–Ω—ã–π"]
        for district_name in districts:
            district = District(name=district_name, is_active=True)
            self.session.add(district)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª–∏
        roles = ["–ò–≥—Ä–æ–∫", "–í–æ–¥–∏—Ç–µ–ª—å", "–ò—Å–∫–∞—Ç–µ–ª—å"]
        for role_name in roles:
            role = Role(name=role_name, is_active=True)
            self.session.add(role)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = [
            Setting(key="game_rules", value="–¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"),
            Setting(key="hiding_time", value="30"),
            Setting(key="game_zone_radius", value="1000"),
        ]
        for setting in settings:
            self.session.add(setting)
        
        self.session.commit()
    
    def _create_test_users(self, count=6):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = []
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
        admin = User(
            telegram_id=123456789,
            name="–ê–¥–º–∏–Ω –¢–µ—Å—Ç–æ–≤—ã–π",
            district="–¶–µ–Ω—Ç—Ä",
            default_role="–ò–≥—Ä–æ–∫",
            is_registered=True
        )
        self.session.add(admin)
        users.append(admin)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i in range(1, count):
            user = User(
                telegram_id=100000000 + i,
                name=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}",
                district="–¶–µ–Ω—Ç—Ä",
                default_role="–ò–≥—Ä–æ–∫", 
                is_registered=True
            )
            self.session.add(user)
            users.append(user)
        
        self.session.commit()
        return users
    
    @patch('src.services.scheduler_service.scheduler')
    def test_complete_game_cycle(self, mock_scheduler):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")
        
        # === –≠–¢–ê–ü 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ===
        print("\nüìã –≠–¢–ê–ü 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        users = self._create_test_users(6)
        admin = users[0]
        players = users[1:]
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (1 –∞–¥–º–∏–Ω + {len(players)} –∏–≥—Ä–æ–∫–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        assert UserService.is_admin(admin.telegram_id), "–ê–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞"
        
        # === –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã ===
        print("\nüéÆ –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
        game_time = datetime.now() + timedelta(minutes=2)
        game = GameService.create_game(
            district="–¶–µ–Ω—Ç—Ä",
            max_participants=6,
            max_drivers=2,
            scheduled_at=game_time,
            creator_id=admin.id,
            description="–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"
        )
        
        assert game is not None, "–ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞"
        assert game.status == GameStatus.RECRUITMENT, "–ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ '–ù–∞–±–æ—Ä'"
        print(f"‚úÖ –ò–≥—Ä–∞ #{game.id} —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ {game_time.strftime('%d.%m.%Y %H:%M')}")
        
        # === –≠–¢–ê–ü 3: –ó–∞–ø–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ===
        print("\nüë• –≠–¢–ê–ü 3: –ó–∞–ø–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∏–≥—Ä—É")
        
        for i, player in enumerate(players):
            success = GameService.join_game(game.id, player.id)
            assert success, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {player.name} –¥–æ–ª–∂–µ–Ω –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É"
            print(f"‚úÖ {player.name} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∏–≥—Ä—É")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        updated_game = GameService.get_game_by_id(game.id)
        assert len(updated_game.participants) == 5, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        assert updated_game.status == GameStatus.RECRUITMENT, "–ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –Ω–∞–±–æ—Ä–µ"
        
        # === –≠–¢–ê–ü 4: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã ===
        print("\nüö¶ –≠–¢–ê–ü 4: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç
        with patch('src.services.game_service.datetime') as mock_datetime:
            mock_datetime.now.return_value = game_time + timedelta(seconds=1)
            success = GameService.start_game(game.id)
            assert success, "–ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è"
        
        started_game = GameService.get_game_by_id(game.id)
        assert started_game.status == GameStatus.HIDING, "–ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ '–ü—Ä—è—Ç–∫–∏'"
        print(f"‚úÖ –ò–≥—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å: {started_game.status.value}")
        
        # === –≠–¢–ê–ü 5: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π ===
        print("\nüé≤ –≠–¢–ê–ü 5: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π")
        
        roles = GameService.assign_roles(game.id)
        assert roles is not None, "–†–æ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        updated_game = GameService.get_game_by_id(game.id)
        drivers = [p for p in updated_game.participants if p.role == GameRole.DRIVER]
        seekers = [p for p in updated_game.participants if p.role == GameRole.SEEKER]
        
        assert len(drivers) == 2, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –≤–æ–¥–∏—Ç–µ–ª—è, –Ω–∞–π–¥–µ–Ω–æ {len(drivers)}"
        assert len(seekers) == 3, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –∏—Å–∫–∞—Ç–µ–ª—è, –Ω–∞–π–¥–µ–Ω–æ {len(seekers)}"
        
        print(f"‚úÖ –†–æ–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: {len(drivers)} –≤–æ–¥–∏—Ç–µ–ª–µ–π, {len(seekers)} –∏—Å–∫–∞—Ç–µ–ª–µ–π")
        for driver in drivers:
            print(f"  üöó –í–æ–¥–∏—Ç–µ–ª—å: {driver.user.name}")
        for seeker in seekers:
            print(f"  üîç –ò—Å–∫–∞—Ç–µ–ª—å: {seeker.user.name}")
        
        # === –≠–¢–ê–ü 6: –§–∞–∑–∞ –ø—Ä—è—Ç–∫–∏ (30 –º–∏–Ω—É—Ç) ===
        print("\n‚è±Ô∏è  –≠–¢–ê–ü 6: –§–∞–∑–∞ –ø—Ä—è—Ç–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ HIDING
        assert updated_game.status == GameStatus.HIDING, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ–∞–∑–∞ –ø—Ä—è—Ç–∫–∏"
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
        from src.services.location_service import LocationService
        for driver in drivers:
            location = LocationService.save_location(
                user_id=driver.user.id,
                game_id=game.id,
                latitude=55.7558 + (driver.user.id * 0.001),  # –†–∞–∑–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                longitude=37.6176 + (driver.user.id * 0.001)
            )
            assert location is not None, f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è {driver.user.name} –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è"
            print(f"üìç {driver.user.name} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
        
        # === –≠–¢–ê–ü 7: –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ ===
        print("\nüîç –≠–¢–ê–ü 7: –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–∑–µ –ø–æ–∏—Å–∫–∞")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä—è—Ç–∫–∏
        with patch('src.services.game_service.datetime') as mock_datetime:
            search_time = game_time + timedelta(minutes=30, seconds=1)
            mock_datetime.now.return_value = search_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ SEARCH
            success = GameService.update_game_status(game.id, GameStatus.SEARCH)
            assert success, "–ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞"
        
        search_game = GameService.get_game_by_id(game.id)
        assert search_game.status == GameStatus.SEARCH, "–ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ '–ü–æ–∏—Å–∫'"
        print(f"‚úÖ –ò–≥—Ä–∞ –ø–µ—Ä–µ—à–ª–∞ –≤ —Ñ–∞–∑—É –ø–æ–∏—Å–∫–∞, —Å—Ç–∞—Ç—É—Å: {search_game.status.value}")
        
        # === –≠–¢–ê–ü 8: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏—Å–∫–∞—Ç–µ–ª—è–º–∏ ===
        print("\nüì∏ –≠–¢–ê–ü 8: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏—Å–∫–∞—Ç–µ–ª—è–º–∏")
        
        from src.services.photo_service import PhotoService
        photos_sent = 0
        
        for seeker in seekers:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ
            photo = PhotoService.save_photo(
                user_id=seeker.user.id,
                game_id=game.id,
                file_id=f"test_photo_{seeker.user.id}",
                latitude=55.7558 + (seeker.user.id * 0.001),
                longitude=37.6176 + (seeker.user.id * 0.001)
            )
            if photo:
                photos_sent += 1
                print(f"üì∏ {seeker.user.name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
        
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {photos_sent} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        
        # === –≠–¢–ê–ü 9: –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–¥–º–∏–Ω–æ–º ===
        print("\n‚úÖ –≠–¢–ê–ü 9: –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–≥—Ä—ã
        photos = PhotoService.get_game_photos(game.id)
        approved_count = 0
        
        for photo in photos:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º
            success = PhotoService.approve_photo(photo.id)
            if success:
                approved_count += 1
                print(f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç {photo.user.name} –æ–¥–æ–±—Ä–µ–Ω–∞")
        
        print(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ {approved_count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        
        # === –≠–¢–ê–ü 10: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã ===
        print("\nüèÅ –≠–¢–ê–ü 10: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        success = GameService.finish_game(game.id)
        assert success, "–ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è"
        
        finished_game = GameService.get_game_by_id(game.id)
        assert finished_game.status == GameStatus.FINISHED, "–ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        print(f"‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {finished_game.status.value}")
        
        # === –≠–¢–ê–ü 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
        print("\nüìä –≠–¢–ê–ü 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        stats = MonitoringService.get_basic_stats()
        assert stats['games_today'] >= 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 1 –∏–≥—Ä–∞ —Å–µ–≥–æ–¥–Ω—è"
        assert stats['total_participations'] >= len(players), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–∏—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã
        game_details = MonitoringService.get_game_details(game.id)
        assert game_details is not None, "–î–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã"
        assert len(game_details['participants']) == len(players), "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á—Ç–µ–Ω—ã"
        
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['games_today']} –∏–≥—Ä —Å–µ–≥–æ–¥–Ω—è, {stats['total_participations']} —É—á–∞—Å—Ç–∏–π")
        print(f"üìã –ò–≥—Ä–∞ #{game.id}: {len(game_details['participants'])} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        # === –≠–¢–ê–ü 12: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ ===
        print("\nüìÑ –≠–¢–ê–ü 12: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
        
        report = MonitoringService.generate_game_report(game.id)
        assert report is not None, "–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
        assert "–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞" in report, "–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã"
        
        print("‚úÖ –û—Ç—á–µ—Ç –ø–æ –∏–≥—Ä–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        print(f"üìù –î–ª–∏–Ω–∞ –æ—Ç—á–µ—Ç–∞: {len(report)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # === –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===
        print("\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
        
        final_game = GameService.get_game_by_id(game.id)
        assert final_game.status == GameStatus.FINISHED
        assert len(final_game.participants) == len(players)
        assert all(p.role is not None for p in final_game.participants)
        
        print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"üéÆ –ü–æ–ª–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∏–≥—Ä—ã #{game.id}")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ~{(datetime.now() - datetime.now()).total_seconds():.2f} —Å–µ–∫")
        
        return True
    
    def test_game_cycle_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        print("\nüß™ –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
        
        users = self._create_test_users(3)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        admin = users[0]
        
        # –¢–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        game = GameService.create_game(
            district="–¶–µ–Ω—Ç—Ä",
            max_participants=3,
            max_drivers=1,
            scheduled_at=datetime.now() + timedelta(minutes=1),
            creator_id=admin.id
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
        for player in users[1:]:
            GameService.join_game(game.id, player.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º
        success = GameService.start_game(game.id)
        assert success, "–ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
        roles = GameService.assign_roles(game.id)
        assert roles is not None, "–†–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        
        updated_game = GameService.get_game_by_id(game.id)
        drivers = [p for p in updated_game.participants if p.role == GameRole.DRIVER]
        seekers = [p for p in updated_game.participants if p.role == GameRole.SEEKER]
        
        assert len(drivers) == 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –≤–æ–¥–∏—Ç–µ–ª—å"
        assert len(seekers) == 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∏—Å–∫–∞—Ç–µ–ª—å"
        
        print("‚úÖ –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ–π–¥–µ–Ω")
    
    def test_scheduler_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º"""
        print("\n‚è∞ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º")
        
        users = self._create_test_users(4)
        admin = users[0]
        
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –Ω–∞ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è
        future_time = datetime.now() + timedelta(hours=2)
        game = GameService.create_game(
            district="–¶–µ–Ω—Ç—Ä",
            max_participants=4,
            max_drivers=1,
            scheduled_at=future_time,
            creator_id=admin.id
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—á–µ—Ä–µ–∑ –º–æ–∫)
        with patch('src.services.scheduler_service.scheduler') as mock_scheduler:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
            SchedulerService.schedule_game_reminders(game)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
            assert mock_scheduler.add_job.called, "–ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã"
            
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")


def run_full_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("üß™ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ê –ò–ì–†–û–í–û–ì–û –¶–ò–ö–õ–ê")
    print("=" * 60)
    
    test_instance = TestFullGameCycle()
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
        test_instance.setup_class()
        test_instance.setup_method()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        success = test_instance.test_complete_game_cycle()
        
        if success:
            print("\n" + "=" * 60)
            print("üéâ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ò–ì–†–û–í–û–ì–û –¶–ò–ö–õ–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
            print("‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–π–¥–µ–Ω—ã:")
            print("   üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print("   üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º") 
            print("   üë• –ó–∞–ø–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            print("   üö¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç")
            print("   üé≤ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π")
            print("   ‚è±Ô∏è  –§–∞–∑–∞ –ø—Ä—è—Ç–∫–∏")
            print("   üîç –§–∞–∑–∞ –ø–æ–∏—Å–∫–∞")
            print("   üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            print("   ‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            print("   üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã")
            print("   üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            print("   üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
            print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
            
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        test_instance.teardown_class()
    
    return True


if __name__ == "__main__":
    run_full_test() 