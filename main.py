import asyncio
from functools import wraps
import logging
import os
import time
import signal
from dotenv import load_dotenv
from telegram.ext import Application, ConversationHandler, MessageHandler, filters
from sqlalchemy import text
import sentry_sdk

from src.handlers.start import (
    start_handler, 
    process_name, 
    process_phone, 
    process_district, 
    process_role, 
    process_rules_confirmation,
    cancel,
    ENTER_NAME, 
    ENTER_PHONE, 
    ENTER_DISTRICT, 
    ENTER_ROLE, 
    CONFIRM_RULES,
    process_car_brand,
    process_car_color,
    process_car_number,
    ENTER_CAR_BRAND,
    ENTER_CAR_COLOR,
    ENTER_CAR_NUMBER
)
from src.handlers.games import game_handlers
from src.handlers.admin import (
    admin_handlers, 
    create_game_conversation,
    edit_rules_conversation,
    districts_conversation,
    roles_conversation,
    edit_game_fields_conversation
)
from src.handlers.zone_admin import zone_management_conversation
from src.handlers.scheduler_admin import register_scheduler_admin_handlers
from src.handlers.text_messages import text_message_handler
from src.handlers.callback_handler import callback_handler
from src.handlers.location import location_handlers
from src.handlers.photo import photo_handlers
from src.utils.logger import setup_logger
from src.models import create_tables
from src.models.base import engine
from src.services.enhanced_scheduler_service import init_enhanced_scheduler
from src.services.metrics_service import metrics_service

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
SENTRY_DSN = os.getenv("SENTRY_DSN")

if SENTRY_DSN:
    sentry_sdk.init(dsn=SENTRY_DSN, traces_sample_rate=1.0)

if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞. –£–∫–∞–∂–∏—Ç–µ TELEGRAM_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger()

def wrap_callback(fn, threshold: float):
    @wraps(fn)
    async def wrapper(update, context, *args, **kwargs):
        start = time.perf_counter()
        try:
            return await fn(update, context, *args, **kwargs)
        finally:
            duration = time.perf_counter() - start
            metrics_service.observe_latency(duration)
            name = getattr(fn, "__name__", repr(fn))
            user = update.effective_user.id if update.effective_user else "unknown"
            if duration > threshold:
                metrics_service.record_error()
                logger.warning(f"‚ö†Ô∏è SLOW: {name} took {duration:.2f}s (user={user})")
            else:
                logger.info(f"{name} took {duration:.2f}s")
    return wrapper

def wrap_handler(handler, threshold: float):
    handler.callback = wrap_callback(handler.callback, threshold)
    return handler

def wrap_all_handlers(application, threshold: float = 2.0):
    """
    –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –í–°–ï —Ö–µ–Ω–¥–ª–µ—Ä—ã, –≤ —Ç–æ–º —á–∏—Å–ª–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤ ConversationHandler,
    –Ω–æ –º–µ–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–ø–∏—Å–∫–∏ _entry_points –∏ _fallbacks, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å property.
    """
    for group, handlers in application.handlers.items():
        for handler in handlers:
            if isinstance(handler, ConversationHandler):
                # –æ–±–æ—Ä–∞—á–∏–≤–∞–º entry_points, fallbacks –∏ states
                handler._entry_points = [
                    wrap_handler(h, threshold) for h in handler._entry_points
                ]
                # states ‚Äî —ç—Ç–æ –æ–±—ã—á–Ω—ã–π dict, –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ handler.states
                for state, hlist in handler.states.items():
                    handler.states[state] = [
                        wrap_handler(h, threshold) for h in hlist
                    ]
                handler._fallbacks = [
                    wrap_handler(h, threshold) for h in handler._fallbacks
                ]
            elif hasattr(handler, "callback"):
                wrap_handler(handler, threshold)
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
should_exit = False
scheduler = None

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    global should_exit
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    should_exit = True

def wait_for_db(max_attempts=30, delay=2):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞"""
    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    for attempt in range(max_attempts):
        try:
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with engine.connect() as connection:
                connection.execute(text("SELECT 1"))
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            return True
        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_attempts}: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫... ({str(e)})")
            time.sleep(delay)
    
    logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ PRYTON")
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not wait_for_db():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    create_tables()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –º–µ—Ç—Ä–∏–∫
    metrics_service.start()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
    scheduler = init_enhanced_scheduler(application)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.ChatType.PRIVATE & (filters.Regex("^/start") | filters.Regex("^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")), start_handler)],
        states={
            ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_name)],
            ENTER_PHONE: [
                MessageHandler(filters.CONTACT, process_phone),
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_phone)
            ],
            ENTER_DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_district)],
            ENTER_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_role)],
            ENTER_CAR_BRAND: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_car_brand)],
            ENTER_CAR_COLOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_car_color)],
            ENTER_CAR_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_car_number)],
            CONFIRM_RULES: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_rules_confirmation)]
        },
        fallbacks=[MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞"), cancel)]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(registration_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–Ω—å—à–µ admin_handlers)
    application.add_handler(create_game_conversation)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª
    application.add_handler(edit_rules_conversation)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    application.add_handler(districts_conversation)
    application.add_handler(roles_conversation)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä
    application.add_handler(edit_game_fields_conversation)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–æ–Ω–∞–º–∏
    application.add_handler(zone_management_conversation)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–≥—Ä
    for handler in game_handlers:
        application.add_handler(handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    for handler in admin_handlers:
        application.add_handler(handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    register_scheduler_admin_handlers(application)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    for handler in location_handlers:
        application.add_handler(handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    for handler in photo_handlers:
        application.add_handler(handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback'–æ–≤
    application.add_handler(callback_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    # –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(text_message_handler)
    
    wrap_all_handlers(application,threshold=4.0)

    from aiohttp import web

    # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ ENV
    ADMIN_USER_IDS = os.getenv("ADMIN_USER_IDS", "")
    ADMIN_IDS = [int(x) for x in ADMIN_USER_IDS.split(",") if x]

    async def alert_handler(request: web.Request) -> web.Response:
        """
        –û–∂–∏–¥–∞–µ—Ç JSON –æ—Ç Alertmanager (webhook_config),
        —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞–º –≤ Telegram.
        """
        data = await request.json()
        alerts = data.get("alerts", [])
        lines = []
        for a in alerts:
            status = a.get("status", "")
            name = a.get("labels", {}).get("alertname", "")
            desc = a.get("annotations", {}).get("description", "")
            # –í—ã –º–æ–∂–µ—Ç–µ –±—Ä–∞—Ç—å summary / description –ø–æ –≤–∫—É—Å—É
            lines.append(f"*[{status}]* _{name}_\n{desc}")
        _text = "\n\n".join(lines) or "‚ùóÔ∏è –ü—É—Å—Ç–æ–π –∞–ª–µ—Ä—Ç"

        # –®–ª—ë–º –ø–æ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for uid in ADMIN_IDS:
            try:
                await application.bot.send_message(
                    chat_id=uid,
                    text=_text,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç {uid}: {e}")

        return web.Response(text="ok")

    async def start_webhook(app: Application):
        """
        –ó–∞–ø—É—Å—Ç–∏–º aiohttp –Ω–∞ –ø–æ—Ä—Ç—É 8001
        """
        webapp = web.Application()
        webapp.add_routes([web.post("/alert", alert_handler)])
        runner = web.AppRunner(webapp)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("ALERT_WEBHOOK_PORT", "8001")))
        await site.start()
        logger.info("Alertmanager webhook listening on port %s", os.getenv("ALERT_WEBHOOK_PORT", "8001"))


    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    await start_webhook(application)
    await application.start()
    await application.updater.start_polling()
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()
    metrics_service.update_scheduler_jobs(len(scheduler.scheduler.get_jobs()))
    
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    
    try:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        while not should_exit:
            await asyncio.sleep(1)
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler.shutdown()
        metrics_service.update_scheduler_jobs(0)
        metrics_service.stop()
        
        await application.updater.stop()
        await application.stop()
        await application.shutdown()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        metrics_service.record_error()

