from loguru import logger
import asyncio
from typing import List
from telegram import Bot

from src.models.base import get_db
from src.models.user import User
from src.models.game import Game, GameParticipant
from src.keyboards.reply import get_contextual_main_keyboard

class KeyboardUpdateService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã"""
    
    @staticmethod
    def schedule_keyboard_updates_for_game(game_id: int) -> None:
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–≥—Ä—ã"""
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –∏–≥—Ä—ã {game_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã
            db_generator = get_db()
            db = next(db_generator)
            
            participants = db.query(GameParticipant)\
                .filter(GameParticipant.game_id == game_id)\
                .all()
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∏–≥—Ä–µ {game_id}")
            
            if not participants:
                logger.warning(f"–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ –∏–≥—Ä–µ {game_id}")
                return
            
            user_ids = []
            for participant in participants:
                user = db.query(User).filter(User.id == participant.user_id).first()
                if user and user.telegram_id:
                    user_ids.append(user.telegram_id)
                    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} (telegram_id: {user.telegram_id}) –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
                else:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {participant.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç telegram_id")
            
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(user_ids)} telegram_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {user_ids}")
            
            if user_ids:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                logger.info("–ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
                from src.services.enhanced_scheduler_service import get_enhanced_scheduler
                scheduler = get_enhanced_scheduler()
                
                if scheduler and scheduler.bot:
                    logger.info("–ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                    from datetime import datetime, timedelta
                    
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (—á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É)
                    run_time = datetime.now() + timedelta(seconds=1)
                    
                    scheduler.scheduler.add_job(
                        scheduler.send_keyboard_updates,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                        trigger='date',
                        run_date=run_time,
                        args=[user_ids, game_id],
                        id=f"keyboard_update_{game_id}_{int(run_time.timestamp())}",
                        replace_existing=True
                    )
                    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è {len(user_ids)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã {game_id} –Ω–∞ {run_time}")
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–ª–∏ –±–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
                    logger.error(f"scheduler: {scheduler}, scheduler.bot: {getattr(scheduler, 'bot', '–ù–ï–¢ –ê–¢–†–ò–ë–£–¢–ê')}")
            else:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö telegram_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ –∏–≥—Ä–µ {game_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –∏–≥—Ä—ã {game_id}: {e}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
    
    @staticmethod
    async def _send_keyboard_updates_sync(user_ids: List[int], bot: Bot) -> None:
        """–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        try:
            logger.info(f"üöÄ (–£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î) –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç: {bot}")
            
            sent_count = 0
            for user_id in user_ids:
                try:
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    keyboard = get_contextual_main_keyboard(user_id)
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(keyboard.keyboard)} —Ä—è–¥–æ–≤")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    message = await bot.send_message(
                        chat_id=user_id,
                        text="üîÑ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞ —Å—Ç–∞—Ç—É—Å!</b>\n\n–û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—à—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, message_id: {message.message_id}")
                    sent_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(0.1)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    import traceback
                    logger.error(f"–¢—Ä–µ–π—Å –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {traceback.format_exc()}")
            
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä {sent_count}/{len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {traceback.format_exc()}")
    
    @staticmethod
    async def _send_keyboard_updates(user_ids: List[int], bot: Bot) -> None:
        """–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return await KeyboardUpdateService._send_keyboard_updates_sync(user_ids, bot) 