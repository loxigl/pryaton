from sqlalchemy.orm import Session
from typing import List, Optional, Dict
import json
import os
from loguru import logger

from src.models.base import get_db
from src.models.settings import District, GameRule, RoleDisplay
from src.models.user import UserRole

class SettingsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–µ–π
    DEFAULT_ROLE_DISPLAYS = {
        UserRole.PLAYER: "üîç –ò–≥—Ä–æ–∫",
        UserRole.DRIVER: "üöó –í–æ–¥–∏—Ç–µ–ª—å",
        UserRole.OBSERVER: "üëÅ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å"
    }
    
    @staticmethod
    def _get_or_create_default_districts() -> None:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –ë–î"""
        db_generator = get_db()
        db = next(db_generator)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–∞–π–æ–Ω—ã –≤ –ë–î
        if db.query(District).count() == 0:
            default_districts = [
             "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–π–æ–Ω"
            ]
            
            for district_name in default_districts:
                district = District(name=district_name, is_active=True)
                db.add(district)
            
            db.commit()
            logger.info(f"–°–æ–∑–¥–∞–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ä–∞–π–æ–Ω—ã: {len(default_districts)} —à—Ç.")
    
    @staticmethod
    def _get_or_create_default_role_displays() -> None:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –ë–î"""
        db_generator = get_db()
        db = next(db_generator)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–µ–π –≤ –ë–î
        if db.query(RoleDisplay).count() == 0:
            for role, display_name in SettingsService.DEFAULT_ROLE_DISPLAYS.items():
                role_display = RoleDisplay(role=role, display_name=display_name)
                db.add(role_display)
            
            db.commit()
            logger.info(f"–°–æ–∑–¥–∞–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–µ–π: {len(SettingsService.DEFAULT_ROLE_DISPLAYS)} —à—Ç.")
    
    @staticmethod
    def get_districts() -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤"""
        SettingsService._get_or_create_default_districts()
        
        db_generator = get_db()
        db = next(db_generator)
        
        districts = db.query(District).filter(District.is_active == True).order_by(District.name).all()
        return [district.name for district in districts]
    
    @staticmethod
    def get_all_districts() -> List[District]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–π–æ–Ω–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)"""
        SettingsService._get_or_create_default_districts()
        
        db_generator = get_db()
        db = next(db_generator)
        
        return db.query(District).order_by(District.name).all()
    
    @staticmethod
    def get_available_roles() -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π"""
        SettingsService._get_or_create_default_role_displays()
        
        db_generator = get_db()
        db = next(db_generator)
        
        role_displays = db.query(RoleDisplay).all()
        return [role_display.display_name for role_display in role_displays]
    
    @staticmethod
    def get_role_display_name(role: UserRole) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è —Ä–æ–ª–∏"""
        SettingsService._get_or_create_default_role_displays()
        
        db_generator = get_db()
        db = next(db_generator)
        
        role_display = db.query(RoleDisplay).filter(RoleDisplay.role == role).first()
        if role_display:
            return role_display.display_name
        return SettingsService.DEFAULT_ROLE_DISPLAYS.get(role, str(role))
    
    @staticmethod
    def get_role_from_display_name(display_name: str) -> Optional[UserRole]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏"""
        SettingsService._get_or_create_default_role_displays()
        
        db_generator = get_db()
        db = next(db_generator)
        
        role_display = db.query(RoleDisplay).filter(RoleDisplay.display_name == display_name).first()
        if role_display:
            return role_display.role
        return None
    
    @staticmethod
    def update_role_display(role: UserRole, new_display_name: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏"""
        try:
            db_generator = get_db()
            db = next(db_generator)
            
            role_display = db.query(RoleDisplay).filter(RoleDisplay.role == role).first()
            if role_display:
                role_display.display_name = new_display_name
            else:
                role_display = RoleDisplay(role=role, display_name=new_display_name)
                db.add(role_display)
            
            db.commit()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–∏ {role}: {new_display_name}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
            return False
    
    @staticmethod
    def add_district(district_name: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–π–æ–Ω–∞"""
        try:
            db_generator = get_db()
            db = next(db_generator)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–∞–π–æ–Ω
            existing = db.query(District).filter(District.name == district_name).first()
            if existing:
                if not existing.is_active:
                    # –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–π–æ–Ω
                    existing.is_active = True
                    db.commit()
                    logger.info(f"–†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–π–æ–Ω: {district_name}")
                    return True
                else:
                    logger.warning(f"–†–∞–π–æ–Ω {district_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return False
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–π–æ–Ω
            district = District(name=district_name, is_active=True)
            db.add(district)
            db.commit()
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ä–∞–π–æ–Ω: {district_name}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–∞: {e}")
            return False
    
    @staticmethod
    def remove_district(district_name: str) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–∞–π–æ–Ω–∞"""
        try:
            db_generator = get_db()
            db = next(db_generator)
            
            district = db.query(District).filter(District.name == district_name).first()
            if not district:
                logger.warning(f"–†–∞–π–æ–Ω {district_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            district.is_active = False
            db.commit()
            
            logger.info(f"–†–∞–π–æ–Ω {district_name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞–π–æ–Ω–∞: {e}")
            return False
    
    @staticmethod
    def get_game_rules() -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã"""
        db_generator = get_db()
        db = next(db_generator)
        
        rule = db.query(GameRule).filter(GameRule.is_active == True).order_by(GameRule.version.desc()).first()
        return rule.content if rule else "–ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    @staticmethod
    def update_game_rules(new_rules: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã"""
        try:
            db_generator = get_db()
            db = next(db_generator)
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞
            db.query(GameRule).update({GameRule.is_active: False})
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
            last_version = db.query(GameRule).order_by(GameRule.version.desc()).first()
            new_version = (last_version.version + 1) if last_version else 1
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
            new_rule = GameRule(content=new_rules, version=new_version, is_active=True)
            db.add(new_rule)
            db.commit()
            
            logger.info(f"–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –≤–µ—Ä—Å–∏–∏ {new_version}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª: {e}")
            return False
    
    @staticmethod
    def add_role(role_name: str, description: Optional[str] = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏"""
        try:
            db_generator = get_db()
            db = next(db_generator)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ä–æ–ª—å
            existing = db.query(Role).filter(Role.name == role_name).first()
            if existing:
                if not existing.is_active:
                    # –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é —Ä–æ–ª—å
                    existing.is_active = True
                    existing.description = description
                    db.commit()
                    logger.info(f"–†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Ä–æ–ª—å: {role_name}")
                    return True
                else:
                    logger.warning(f"–†–æ–ª—å {role_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return False
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å
            role = Role(name=role_name, description=description, is_active=True)
            db.add(role)
            db.commit()
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å: {role_name}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
            return False
    
    @staticmethod
    def remove_role(role_name: str) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–æ–ª–∏"""
        try:
            db_generator = get_db()
            db = next(db_generator)
            
            role = db.query(Role).filter(Role.name == role_name).first()
            if not role:
                logger.warning(f"–†–æ–ª—å {role_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            role.is_active = False
            db.commit()
            
            logger.info(f"–†–æ–ª—å {role_name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–æ–ª–∏: {e}")
            return False 