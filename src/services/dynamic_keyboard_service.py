import os
from typing import List, Optional
import pytz
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger
from datetime import datetime, timedelta, timezone

from src.models.base import get_db
from src.services.user_context_service import UserContextService
from src.services.user_service import UserService
from src.models.game import GameRole, GameStatus



DEFAULT_TIMEZONE = pytz.timezone(os.getenv("TIMEZONE", "Europe/Moscow"))

def format_msk_time(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –ú–°–ö"""
    msk_time = dt.astimezone(DEFAULT_TIMEZONE)
    return msk_time.strftime('%H:%M')

def format_msk_datetime(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ú–°–ö"""
    msk_time = dt.astimezone(DEFAULT_TIMEZONE)
    return msk_time.strftime('%d.%m.%Y %H:%M')

class DynamicKeyboardService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    def __init__(self):
        db_generator=get_db()
        self.db = next(db_generator)
    
    @staticmethod
    def get_contextual_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            context = UserContextService.get_user_game_context(user_id)
            is_admin = UserService.is_admin(user_id)
            
            if context.status == UserContextService.STATUS_NORMAL:
                return DynamicKeyboardService._get_normal_keyboard(is_admin)
            elif context.status == UserContextService.STATUS_REGISTERED:
                return DynamicKeyboardService._get_registered_keyboard(is_admin, context.game)
            elif context.status == UserContextService.STATUS_IN_GAME:
                return DynamicKeyboardService._get_in_game_keyboard(is_admin, context.game, context.participant)
            elif context.status == UserContextService.STATUS_GAME_FINISHED:
                return DynamicKeyboardService._get_finished_game_keyboard(is_admin, context.game)
            else:
                return DynamicKeyboardService._get_normal_keyboard(is_admin)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return DynamicKeyboardService._get_normal_keyboard(UserService.is_admin(user_id))
    
    @staticmethod
    def _get_normal_keyboard(is_admin: bool) -> ReplyKeyboardMarkup:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä"""
        buttons = [
            [KeyboardButton(text="üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã"), KeyboardButton(text="üéØ –ú–æ–∏ –∏–≥—Ä—ã")],
            [KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
        
        if is_admin:
            buttons.append([KeyboardButton(text="üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), KeyboardButton(text="üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")])
            buttons.append([KeyboardButton(text="üìÖ –°–æ–±—ã—Ç–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")])
        
        buttons.append([KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
        
        return ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    
    @staticmethod
    def _get_registered_keyboard(is_admin: bool, game) -> ReplyKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –Ω–∞ –∏–≥—Ä—É"""
        buttons = [
            [KeyboardButton(text="üéÆ –ú–æ—è –∏–≥—Ä–∞"), KeyboardButton(text="üéØ –í—Å–µ –º–æ–∏ –∏–≥—Ä—ã")],
            [KeyboardButton(text="üé≤ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã"), KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∏–≥—Ä–µ
        game_info = f"‚è∞ {game.district} –≤ {format_msk_time(game.scheduled_at)}"
        buttons.insert(0, [KeyboardButton(text=game_info)])
        
        if is_admin:
            buttons.append([KeyboardButton(text="üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), KeyboardButton(text="üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")])
        
        buttons.append([KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
        
        return ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    
    @staticmethod
    def _get_in_game_keyboard(is_admin: bool, game, participant) -> ReplyKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ"""
        role = participant.role if participant else None
        
        if role == GameRole.DRIVER:
            buttons = DynamicKeyboardService._get_driver_game_buttons(game)
        elif role == GameRole.SEEKER:
            buttons = DynamicKeyboardService._get_seeker_game_buttons(game)
        else:
            # –†–æ–ª—å –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞
            buttons = [
                [KeyboardButton(text="üéÆ –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã"), KeyboardButton(text="‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–æ–ª–∏")]
            ]
        
        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π –≤ –∏–≥—Ä–µ
        buttons.append([KeyboardButton(text="üìä –ú–æ—è –∏–≥—Ä–∞"), KeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞")])
        
        if is_admin:
            buttons.append([KeyboardButton(text="üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
        
        buttons.append([KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
        
        return ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    
    @staticmethod
    def _get_driver_game_buttons(game) -> List[List[KeyboardButton]]:
        """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã –∏–≥—Ä—ã"""
        if game.status in [GameStatus.HIDING_PHASE, GameStatus.SEARCHING_PHASE]:
            # –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã - –≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏ —Ñ–æ—Ç–æ
            return [
                [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é"), KeyboardButton(text="üì∏ –§–æ—Ç–æ –º–µ—Å—Ç–∞")],
                [KeyboardButton(text="üöó –ú–µ–Ω—è –Ω–∞—à–ª–∏"), KeyboardButton(text="‚ö†Ô∏è –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å")]
            ]
        else:
            return [
                [KeyboardButton(text="üéÆ –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã"), KeyboardButton(text="‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞")]
            ]
    
    @staticmethod
    def _get_seeker_game_buttons(game) -> List[List[KeyboardButton]]:
        """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å–∫–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã –∏–≥—Ä—ã"""
        if game.status in [GameStatus.HIDING_PHASE, GameStatus.SEARCHING_PHASE]:
            # –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã - –∏—Å–∫–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏ —Ñ–æ—Ç–æ –Ω–∞—Ö–æ–¥–∫–∏
            return [
                [KeyboardButton(text="üìç –ú–æ—è –ø–æ–∑–∏—Ü–∏—è"), KeyboardButton(text="üì∏ –§–æ—Ç–æ –Ω–∞—Ö–æ–¥–∫–∏")],
                [KeyboardButton(text="üîç –Ø –Ω–∞—à–µ–ª –≤–æ–¥–∏—Ç–µ–ª—è"), KeyboardButton(text="‚ö†Ô∏è –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å")]
            ]
        else:
            return [
                [KeyboardButton(text="üéÆ –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã"), KeyboardButton(text="‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞")]
            ]
    
    @staticmethod
    def _get_finished_game_keyboard(is_admin: bool, game) -> ReplyKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
        buttons = [
            [KeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã"), KeyboardButton(text="üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")],
            [KeyboardButton(text="üéÆ –ù–æ–≤—ã–µ –∏–≥—Ä—ã"), KeyboardButton(text="üéØ –í—Å–µ –º–æ–∏ –∏–≥—Ä—ã")],
            [KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
        
        if is_admin:
            buttons.append([KeyboardButton(text="üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), KeyboardButton(text="üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")])
        
        buttons.append([KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
        
        return ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    
    @staticmethod
    def get_game_action_inline_keyboard(game_id: int, user_id: int) -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –∏–≥—Ä–µ"""
        context = UserContextService.get_user_game_context(user_id)
        
        if context.status != UserContextService.STATUS_IN_GAME:
            return InlineKeyboardMarkup([])
        
        buttons = []
        role = context.participant.role if context.participant else None
        
        if role == GameRole.DRIVER:
            buttons = [
                [InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data=f"send_location_{game_id}")],
                [InlineKeyboardButton("üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞", callback_data=f"photo_place_{game_id}")],
                [InlineKeyboardButton("üöó –ú–µ–Ω—è –Ω–∞—à–ª–∏", callback_data=f"found_driver_{game_id}")],
            ]
        elif role == GameRole.SEEKER:
            buttons = [
                [InlineKeyboardButton("üìç –ú–æ—è –ø–æ–∑–∏—Ü–∏—è", callback_data=f"send_location_{game_id}")],
                [InlineKeyboardButton("üì∏ –§–æ—Ç–æ –Ω–∞—Ö–æ–¥–∫–∏", callback_data=f"photo_find_{game_id}")],
                [InlineKeyboardButton("üîç –ù–∞—à–µ–ª –≤–æ–¥–∏—Ç–µ–ª—è", callback_data=f"found_seeker_{game_id}")],
            ]
        
        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        buttons.extend([
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã", callback_data=f"game_status_{game_id}")],
            [InlineKeyboardButton("‚ö†Ô∏è –ü–æ–º–æ—â—å", callback_data=f"game_help_{game_id}")]
        ])
        
        return InlineKeyboardMarkup(buttons)
    
    @staticmethod
    def should_update_keyboard(user_id: int, current_keyboard_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        context = UserContextService.get_user_game_context(user_id)
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ —Ç–∏–ø—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        status_to_keyboard = {
            UserContextService.STATUS_NORMAL: "normal",
            UserContextService.STATUS_REGISTERED: "registered", 
            UserContextService.STATUS_IN_GAME: "in_game",
            UserContextService.STATUS_GAME_FINISHED: "finished"
        }
        
        expected_keyboard = status_to_keyboard.get(context.status, "normal")
        return current_keyboard_type != expected_keyboard 

    def get_games_keyboard(self, user_id: int) -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä"""
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
            cursor.execute("""
                SELECT 
                    g.id,
                    g.district,
                    g.scheduled_at,
                    g.status,
                    g.max_participants,
                    COUNT(p.id) as participant_count,
                    SUM(CASE WHEN p.role = 'DRIVER' THEN 1 ELSE 0 END) as driver_count
                FROM games g
                LEFT JOIN participants p ON g.id = p.game_id
                WHERE g.status IN ('RECRUITING', 'UPCOMING', 'HIDING_PHASE', 'SEARCHING_PHASE')
                GROUP BY g.id
                ORDER BY g.scheduled_at DESC
            """)
            
            games = []
            for row in cursor.fetchall():
                games.append({
                    'id': row[0],
                    'district': row[1],
                    'scheduled_at': row[2],
                    'status': row[3],
                    'max_participants': row[4],
                    'participant_count': row[5] or 0,
                    'driver_count': row[6] or 0
                })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = []
            for game in games:
                status_emoji = {
                    'RECRUITING': 'üìù',
                    'UPCOMING': '‚è≥',
                    'HIDING_PHASE': 'üèÉ',
                    'SEARCHING_PHASE': 'üîç',
                    'FINISHED': '‚úÖ',
                    'CANCELLED': '‚ùå'
                }.get(game['status'], '‚ùì')
                
                button_text = (
                    f"{status_emoji} {game['district']} - "
                    f"{format_msk_datetime(game['scheduled_at'])} "
                    f"({game['participant_count']}/{game['max_participants']})"
                )
                
                keyboard.append([
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"game_{game['id']}"
                    )
                ])
            
            return InlineKeyboardMarkup(keyboard)
    
    def get_game_details_keyboard(self, game_id: int, user_id: int) -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏–≥—Ä—ã"""
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
            cursor.execute("""
                SELECT 
                    g.id,
                    g.district,
                    g.scheduled_at,
                    g.status,
                    g.max_participants,
                    COUNT(p.id) as participant_count,
                    SUM(CASE WHEN p.role = 'DRIVER' THEN 1 ELSE 0 END) as driver_count
                FROM games g
                LEFT JOIN participants p ON g.id = p.game_id
                WHERE g.id = ?
                GROUP BY g.id
            """, (game_id,))
            
            game = cursor.fetchone()
            if not game:
                return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è/–≤—ã—Ö–æ–¥–∞
            is_participant = self._is_user_participant(game_id, user_id)
            if is_participant:
                keyboard.append([
                    InlineKeyboardButton(
                        "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã",
                        callback_data=f"leave_game_{game_id}"
                    )
                ])
            else:
                keyboard.append([
                    InlineKeyboardButton(
                        "‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
                        callback_data=f"join_game_{game_id}"
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            keyboard.append([
                InlineKeyboardButton(
                    "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
                    callback_data=f"game_participants_{game_id}"
                )
            ])
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ
            keyboard.append([
                InlineKeyboardButton(
                    "üì∏ –§–æ—Ç–æ",
                    callback_data=f"game_photos_{game_id}"
                )
            ])
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä
            keyboard.append([
                InlineKeyboardButton(
                    "¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä",
                    callback_data="back_to_games"
                )
            ])
            
            return InlineKeyboardMarkup(keyboard)
    
    def _is_user_participant(self, game_id: int, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–≥—Ä—ã"""
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT 1
                FROM participants
                WHERE game_id = ? AND user_id = ?
            """, (game_id, user_id))
            
            return bool(cursor.fetchone()) 