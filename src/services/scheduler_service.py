import asyncio
import os
from datetime import datetime, timedelta
from typing import Optional, List
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from loguru import logger
from telegram.ext import Application

from src.models.base import get_db
from src.models.game import Game, GameStatus, GameParticipant, GameRole
from src.services.user_service import UserService
from src.services.game_service import GameService


class SchedulerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, application: Application):
        self.scheduler = AsyncIOScheduler()
        self.application = application
        self.bot = application.bot
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.hiding_time = int(os.getenv("HIDING_TIME", 30))  # –º–∏–Ω—É—Ç—ã
        self.reminder_times = [int(x) for x in os.getenv("REMINDER_BEFORE_GAME", "60,24,5").split(",")]  # –º–∏–Ω—É—Ç—ã
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.scheduler.running:
            self.scheduler.start()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
    
    def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def schedule_game_reminders(self, game_id: int):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∏–≥—Ä—ã"""
        game = GameService.get_game_by_id(game_id)
        if not game:
            logger.error(f"–ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        for reminder_minutes in self.reminder_times:
            reminder_time = game.scheduled_at - timedelta(minutes=reminder_minutes)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
            if reminder_time > datetime.now():
                job_id = f"reminder_{game_id}_{reminder_minutes}min"
                
                self.scheduler.add_job(
                    self.send_game_reminder,
                    trigger=DateTrigger(run_date=reminder_time),
                    args=[game_id, reminder_minutes],
                    id=job_id,
                    replace_existing=True
                )
                
                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã {game_id} –∑–∞ {reminder_minutes} –º–∏–Ω—É—Ç: {reminder_time}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
        start_job_id = f"start_game_{game_id}"
        self.scheduler.add_job(
            self.start_game,
            trigger=DateTrigger(run_date=game.scheduled_at),
            args=[game_id],
            id=start_job_id,
            replace_existing=True
        )
        
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã {game_id}: {game.scheduled_at}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä—è—Ç–∫–∏ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        hiding_end_time = game.scheduled_at + timedelta(minutes=self.hiding_time)
        hiding_job_id = f"hiding_end_{game_id}"
        
        self.scheduler.add_job(
            self.end_hiding_phase,
            trigger=DateTrigger(run_date=hiding_end_time),
            args=[game_id],
            id=hiding_job_id,
            replace_existing=True
        )
        
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä—è—Ç–æ–∫ –¥–ª—è –∏–≥—Ä—ã {game_id}: {hiding_end_time}")
    
    def cancel_game_jobs(self, game_id: int):
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –¥–ª—è –∏–≥—Ä—ã"""
        jobs_to_remove = []
        
        for job in self.scheduler.get_jobs():
            if str(game_id) in job.id:
                jobs_to_remove.append(job.id)
        
        for job_id in jobs_to_remove:
            self.scheduler.remove_job(job_id)
            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {job_id} –¥–ª—è –∏–≥—Ä—ã {game_id}")
    
    async def send_game_reminder(self, game_id: int, minutes_before: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∏–≥—Ä–µ"""
        try:
            game = GameService.get_game_by_id(game_id)
            if not game or game.status not in [GameStatus.RECRUITING, GameStatus.UPCOMING]:
                logger.info(f"–ò–≥—Ä–∞ {game_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if minutes_before >= 60:
                time_text = f"{minutes_before // 60} —á–∞—Å{'–∞' if minutes_before // 60 < 5 else '–æ–≤'}"
            else:
                time_text = f"{minutes_before} –º–∏–Ω—É—Ç"
            
            reminder_text = (
                f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∏–≥—Ä–µ!</b>\n\n"
                f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
                f"‚è∞ <b>–ù–∞—á–∞–ª–æ:</b> {game.scheduled_at.strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"üìç <b>–î–æ –Ω–∞—á–∞–ª–∞:</b> {time_text}\n\n"
                f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(game.participants)}/{game.max_participants}\n\n"
                f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ!"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            for participant in game.participants:
                user, _ = UserService.get_user_by_id(participant.user_id)
                if user:
                    try:
                        await self.bot.send_message(
                            chat_id=user.telegram_id,
                            text=reminder_text,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã {game_id} ({len(game.participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∏–≥—Ä—ã {game_id}: {e}")
    
    async def start_game(self, game_id: int):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""
        try:
            game = GameService.get_game_by_id(game_id)
            if not game:
                logger.error(f"–ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–ø—É—Å–∫–µ")
                return
            
            if game.status != GameStatus.UPCOMING:
                logger.info(f"–ò–≥—Ä–∞ {game_id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å {game.status}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if len(game.participants) < 2:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –æ—Ç–º–µ–Ω—è–µ–º –∏–≥—Ä—É
                GameService.cancel_game(game_id)
                await self.notify_game_cancelled(game_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                return
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏
            GameService.assign_roles(game_id)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            if GameService.start_game(game_id):
                await self.notify_game_started(game_id)
                logger.info(f"–ò–≥—Ä–∞ {game_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã {game_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã {game_id}: {e}")
    
    async def end_hiding_phase(self, game_id: int):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–∞–∑—ã –ø—Ä—è—Ç–∫–∏"""
        try:
            game = GameService.get_game_by_id(game_id)
            if not game or game.status not in [GameStatus.HIDING_PHASE, GameStatus.SEARCHING_PHASE]:
                logger.info(f"–ò–≥—Ä–∞ {game_id} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä—è—Ç–∫–∏")
                return
            
            hiding_end_text = (
                f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä—è—Ç–æ–∫ –∏—Å—Ç–µ–∫–ª–æ!</b>\n\n"
                f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
                f"üèÅ <b>–§–∞–∑–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
            drivers_text = hiding_end_text + (
                f"üöó <b>–í–æ–¥–∏—Ç–µ–ª–∏:</b> –í—Ä–µ–º—è –ø—Ä—è—Ç–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!\n"
                f"–¢–µ–ø–µ—Ä—å –≤–∞—Å –º–æ–≥—É—Ç –∏—Å–∫–∞—Ç—å. –£–¥–∞—á–∏!"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–∫–∞—Ç–µ–ª–µ–π
            seekers_text = hiding_end_text + (
                f"üîç <b>–ò—Å–∫–∞—Ç–µ–ª–∏:</b> –ù–∞—á–∏–Ω–∞–π—Ç–µ –ø–æ–∏—Å–∫!\n"
                f"–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            )
            
            for participant in game.participants:
                user, _ = UserService.get_user_by_id(participant.user_id)
                if user:
                    try:
                        if participant.role == GameRole.DRIVER:
                            text = drivers_text
                        else:
                            text = seekers_text
                        
                        await self.bot.send_message(
                            chat_id=user.telegram_id,
                            text=text,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø—Ä—è—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            
            logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ñ–∞–∑–∞ –ø—Ä—è—Ç–∫–∏ –¥–ª—è –∏–≥—Ä—ã {game_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∞–∑—ã –ø—Ä—è—Ç–∫–∏ –¥–ª—è –∏–≥—Ä—ã {game_id}: {e}")
    
    async def notify_game_started(self, game_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã"""
        try:
            game = GameService.get_game_by_id(game_id)
            if not game:
                return
            
            start_text = (
                f"üöÄ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n"
                f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</b> {datetime.now().strftime('%H:%M')}\n\n"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
            drivers_text = start_text + (
                f"üöó <b>–í–∞—à–∞ —Ä–æ–ª—å: –í–æ–¥–∏—Ç–µ–ª—å</b>\n\n"
                f"–£ –≤–∞—Å –µ—Å—Ç—å {self.hiding_time} –º–∏–Ω—É—Ç –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è!\n"
                f"üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.\n"
                f"üì∏ –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä—è—Ç–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–∫–∞—Ç–µ–ª–µ–π
            seekers_text = start_text + (
                f"üîç <b>–í–∞—à–∞ —Ä–æ–ª—å: –ò—Å–∫–∞—Ç–µ–ª—å</b>\n\n"
                f"–í–æ–¥–∏—Ç–µ–ª–∏ –ø—Ä—è—á—É—Ç—Å—è {self.hiding_time} –º–∏–Ω—É—Ç.\n"
                f"üìç –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
                f"‚è∞ –ü–æ–∏—Å–∫ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {self.hiding_time} –º–∏–Ω—É—Ç!"
            )
            
            for participant in game.participants:
                user, _ = UserService.get_user_by_id(participant.user_id)
                if user:
                    try:
                        if participant.role == GameRole.DRIVER:
                            text = drivers_text
                        else:
                            text = seekers_text
                        
                        await self.bot.send_message(
                            chat_id=user.telegram_id,
                            text=text,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã {game_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã {game_id}: {e}")
    
    async def notify_game_cancelled(self, game_id: int, reason: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∏–≥—Ä—ã"""
        try:
            game = GameService.get_game_by_id(game_id)
            if not game:
                return
            
            cancel_text = (
                f"‚ùå <b>–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {game.scheduled_at.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n"
                f"–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∏–≥—Ä–∞–º–∏!"
            )
            
            for participant in game.participants:
                user, _ = UserService.get_user_by_id(participant.user_id)
                if user:
                    try:
                        await self.bot.send_message(
                            chat_id=user.telegram_id,
                            text=cancel_text,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∏–≥—Ä—ã {game_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∏–≥—Ä—ã {game_id}: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler_service: Optional[SchedulerService] = None


def get_scheduler() -> Optional[SchedulerService]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    return scheduler_service


def init_scheduler(application: Application) -> SchedulerService:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global scheduler_service
    scheduler_service = SchedulerService(application)
    return scheduler_service 