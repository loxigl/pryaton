from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler
from loguru import logger
import re
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from src.handlers.games import (
    game_button, join_game_button, leave_game_button, back_to_games_button, game_info_button,
    GAME_PATTERN, GAME_JOIN_PATTERN, GAME_LEAVE_PATTERN, GAME_INFO_PATTERN,
    SEND_LOCATION_PATTERN, SEND_PHOTO_PATTERN, FOUND_CAR_PATTERN, FOUND_ME_PATTERN, GAME_STATUS_PATTERN
)
from src.handlers.photo import handle_admin_photo_approval
from src.services.user_service import UserService

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback'–æ–≤"""
    query = update.callback_query
    if not query:
        return
        
    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if data.startswith("mon_"):
            from src.handlers.monitoring import handle_monitoring_callback_direct
            await handle_monitoring_callback_direct(update, context)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö callback'–æ–≤
        if re.match(GAME_PATTERN, data):
            await game_button(update, context)
        elif re.match(GAME_INFO_PATTERN, data):
            await game_info_button(update, context)
        elif re.match(GAME_JOIN_PATTERN, data):
            await join_game_button(update, context)
        elif re.match(GAME_LEAVE_PATTERN, data):
            await leave_game_button(update, context)
        elif data == "back_to_games":
            await back_to_games_button(update, context)
        elif data == "refresh_games":
            await back_to_games_button(update, context)  # –¢–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—Ç
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö callback'–æ–≤
        elif re.match(SEND_LOCATION_PATTERN, data):
            await handle_send_location_callback(update, context)
        elif re.match(SEND_PHOTO_PATTERN, data):
            await handle_send_photo_callback(update, context)
        elif re.match(FOUND_CAR_PATTERN, data):
            await handle_found_car_callback(update, context)
        elif re.match(FOUND_ME_PATTERN, data):
            await handle_found_me_callback(update, context)
        elif re.match(GAME_STATUS_PATTERN, data):
            await handle_game_status_callback(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö callback'–æ–≤ –∏–∑ DynamicKeyboardService
        elif data.startswith("found_driver_"):
            await handle_found_driver_callback(update, context)
        elif data.startswith("found_seeker_"):
            await handle_found_seeker_callback(update, context)
        elif data.startswith("photo_place_"):
            await handle_photo_place_callback(update, context)
        elif data.startswith("photo_find_"):
            await handle_photo_find_callback(update, context)
        elif data.startswith("game_help_"):
            await handle_game_help_callback(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        elif data.startswith("photo_approve_") or data.startswith("photo_reject_"):
            await handle_admin_photo_approval(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã
        elif data == "game_settings":
            await handle_game_settings_callback(update, context)
        elif data == "time_settings":
            await handle_time_settings_callback(update, context)
        elif data == "notification_settings":
            await handle_notification_settings_callback(update, context)
        elif data.startswith("toggle_"):
            await handle_toggle_setting_callback(update, context)
        elif data == "automation_settings":
            await handle_automation_settings_callback(update, context)
        elif data.startswith("set_hiding_time_") or data.startswith("set_searching_time_") or data.startswith("set_notification_time_") or data.startswith("set_min_participants_"):
            await handle_time_value_callback(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ä–µ–º–µ–Ω–∏
        elif data in ["set_hiding_duration", "set_searching_duration", "set_notification_time", "set_min_participants"]:
            await handle_time_setting_select_callback(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞
        elif data == "back_to_admin":
            await handle_back_to_admin_callback(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif data == "reset_settings":
            await handle_reset_settings_callback(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif data == "confirm_reset_settings":
            await handle_confirm_reset_settings_callback(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback'–æ–≤ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        elif data == "cancel_location":
            await query.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await query.edit_message_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {data}: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_send_location_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã
    match = re.match(SEND_LOCATION_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    user_id = query.from_user.id
    
    try:
        from src.services.game_service import GameService
        from src.keyboards.reply import get_game_location_keyboard
        
        game = GameService.get_game_by_id(game_id)
        if not game:
            await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–µ
        user, _ = UserService.get_user_by_telegram_id(user_id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        participant = next(
            (p for p in game.participants if p.user_id == user.id),
            None
        )
        
        if not participant:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ")
            return
        
        role = participant.role
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if role.value == 'driver':
            location_text = (
                f"üìç <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ - –í–æ–¥–∏—Ç–µ–ª—å</b>\n\n"
                f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n\n"
                f"üöó <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è:</b>\n"
                f"‚Ä¢ –ù–∞–π–¥–∏—Ç–µ —É–∫—Ä–æ–º–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø—Ä—è—Ç–æ–∫\n"
                f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–µ—Å—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ\n"
                f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–¥–∏—Ç–µ –∏—Å–∫–∞—Ç–µ–ª–µ–π\n\n"
            )
        else:
            location_text = (
                f"üìç <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ - –ò—Å–∫–∞—Ç–µ–ª—å</b>\n\n"
                f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n\n"
                f"üîç <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏—Å–∫–∞—Ç–µ–ª—è:</b>\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏\n"
                f"‚Ä¢ –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –∏—Å–∫–∞—Ç–µ–ª—è–º\n"
                f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n"
                f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª—è\n\n"
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–æ–Ω—É –∏–≥—Ä—ã –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if game.has_game_zone:
            zone_info = game.zone_info
            location_text += (
                f"üéØ <b>–ò–≥—Ä–æ–≤–∞—è –∑–æ–Ω–∞:</b>\n"
                f"‚Ä¢ –¶–µ–Ω—Ç—Ä: {zone_info['center_lat']:.4f}, {zone_info['center_lon']:.4f}\n"
                f"‚Ä¢ –†–∞–¥–∏—É—Å: {zone_info['radius']} –º–µ—Ç—Ä–æ–≤\n"
                f"‚Ä¢ –ü–ª–æ—â–∞–¥—å: {zone_info['area_km2']} –∫–º¬≤\n\n"
            )
        
        location_text += f"üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
        
        await query.edit_message_text(
            location_text,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_send_photo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã
    match = re.match(SEND_PHOTO_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    user_id = query.from_user.id
    
    try:
        from src.services.game_service import GameService
        
        game = GameService.get_game_by_id(game_id)
        if not game:
            await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–µ
        user, _ = UserService.get_user_by_telegram_id(user_id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        participant = next(
            (p for p in game.participants if p.user_id == user.id),
            None
        )
        
        if not participant:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ")
            return
        
        role = participant.role
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if role.value == 'driver':
            photo_text = (
                f"üì∏ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ - –í–æ–¥–∏—Ç–µ–ª—å</b>\n\n"
                f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n\n"
                f"üöó <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è:</b>\n"
                f"‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ –º–µ—Å—Ç–∞ –ø—Ä—è—Ç–æ–∫\n"
                f"‚Ä¢ –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–∞—à–∏–Ω—É –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ\n"
                f"‚Ä¢ –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç–µ–ª—è–º –≤–∞—Å –Ω–∞–π—Ç–∏\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                f"üì± –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç"
            )
        else:
            photo_text = (
                f"üì∏ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ - –ò—Å–∫–∞—Ç–µ–ª—å</b>\n\n"
                f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n\n"
                f"üîç <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏—Å–∫–∞—Ç–µ–ª—è:</b>\n"
                f"‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã\n"
                f"‚Ä¢ –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ —á–µ—Ç–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–∞—à–∏–Ω—É\n"
                f"‚Ä¢ –í–æ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞—Ö–æ–¥–∫—É\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                f"üì± –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç"
            )
        
        await query.edit_message_text(
            photo_text,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_found_car_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞ '–ù–∞—à–µ–ª –º–∞—à–∏–Ω—É' (–∏—Å–∫–∞—Ç–µ–ª—å)"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã
    match = re.match(FOUND_CAR_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    user_id = query.from_user.id
    
    try:
        from src.services.game_service import GameService
        game = GameService.get_game_by_id(game_id)
        if not game:
            await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        GameService.mark_participant_found(game_id, user_id)
        user, _ = UserService.get_user_by_telegram_id(user_id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await query.edit_message_text(
            f"üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
            f"–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –Ω–∞—à–ª–∏ –º–∞—à–∏–Ω—É –≤ –∏–≥—Ä–µ {game.district}.\n"
            f"–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
        await notify_drivers_about_found(context, game_id, user.name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        await check_game_completion_callback(context, game_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '–ù–∞—à–µ–ª –º–∞—à–∏–Ω—É': {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_found_me_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞ '–ú–µ–Ω—è –Ω–∞—à–ª–∏' (–≤–æ–¥–∏—Ç–µ–ª—å)"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã
    match = re.match(FOUND_ME_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    user_id = query.from_user.id
    
    try:
        from src.services.game_service import GameService
        
        game = GameService.get_game_by_id(game_id)
        if not game:
            await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        user, _ = UserService.get_user_by_telegram_id(user_id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        participant = next(
            (p for p in game.participants if p.user_id == user.id),
            None
        )
        
        if not participant or participant.role.value != 'driver':
            await query.edit_message_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—è–º")
            return
        

        GameService.mark_participant_found(game_id, user_id)
        
        await query.edit_message_text(
            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
            f"–í–∞—Å –Ω–∞—à–ª–∏ –≤ –∏–≥—Ä–µ {game.district}!\n"
            f"–ò–≥—Ä–∞ –¥–ª—è –≤–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await notify_participants_about_found_driver(context, game_id, user.name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        await check_game_completion_callback(context, game_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '–ú–µ–Ω—è –Ω–∞—à–ª–∏': {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_game_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã
    match = re.match(GAME_STATUS_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    user_id = query.from_user.id
    
    try:
        from src.services.user_context_service import UserContextService
        from src.services.game_service import GameService
        
        game_context = UserContextService.get_user_game_context(user_id)
        
        if not game_context.game or game_context.game.id != game_id:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–≥—Ä–µ")
            return
        
        game = game_context.game
        participants = game.participants
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        status_info = (
            f"üìä <b>–°–¢–ê–¢–£–° –ò–ì–†–´</b>\n\n"
            f"üéÆ <b>–ò–≥—Ä–∞ #{game.id}</b>\n"
            f"üìç <b>–†–∞–π–æ–Ω:</b> {game.district}\n"
            f"üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {_get_game_status_text(game.status)}\n"
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
        if game.scheduled_at:
            status_info += f"‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞:</b> {game.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
        if game.started_at:
            status_info += f"üöÄ <b>–ù–∞—á–∞—Ç–∞:</b> {game.started_at.strftime('%d.%m.%Y %H:%M')}\n"
        if game.ended_at:
            status_info += f"üèÅ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> {game.ended_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
        status_info += f"\nüë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(participants)}/{game.max_participants}):</b>\n"
        
        drivers = [p for p in participants if p.role and p.role.value == 'driver']
        seekers = [p for p in participants if p.role and p.role.value == 'seeker']
        no_role = [p for p in participants if not p.role]
        
        if drivers:
            status_info += f"üöó <b>–í–æ–¥–∏—Ç–µ–ª–∏ ({len(drivers)}):</b>\n"
            for driver in drivers:
                user_mark = "üë§ " if driver.user.telegram_id == user_id else ""
                status_info += f"‚Ä¢ {user_mark}{driver.user.name}\n"
        
        if seekers:
            status_info += f"üîç <b>–ò—Å–∫–∞—Ç–µ–ª–∏ ({len(seekers)}):</b>\n"
            for seeker in seekers:
                user_mark = "üë§ " if seeker.user.telegram_id == user_id else ""
                status_info += f"‚Ä¢ {user_mark}{seeker.user.name}\n"
        
        if no_role:
            status_info += f"‚è∞ <b>–û–∂–∏–¥–∞—é—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π ({len(no_role)}):</b>\n"
            for participant in no_role:
                user_mark = "üë§ " if participant.user.telegram_id == user_id else ""
                status_info += f"‚Ä¢ {user_mark}{participant.user.name}\n"
        
        await query.edit_message_text(
            status_info,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã")

async def handle_found_driver_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞ '–Ø –Ω–∞—à–µ–ª –≤–æ–¥–∏—Ç–µ–ª—è' (–∏—Å–∫–∞—Ç–µ–ª—å)"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    try:
        from src.services.user_context_service import UserContextService
        from src.services.game_service import GameService
        from src.services.user_service import UserService
        
        game_context = UserContextService.get_user_game_context(user_id)
        
        if game_context.status != UserContextService.STATUS_IN_GAME:
            await query.edit_message_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã")
            return
        
        game = game_context.game
        participant = game_context.participant
        
        if not participant or not participant.role or participant.role.value != 'seeker':
            await query.edit_message_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏—Å–∫–∞—Ç–µ–ª—è–º")
            return
        
        await query.edit_message_text(
            f"üîç <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ö–æ–¥–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"–í—ã —Å–æ–æ–±—â–∏–ª–∏, —á—Ç–æ –Ω–∞—à–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è –≤ –∏–≥—Ä–µ {game.district}.\n"
            f"–í–æ–¥–∏—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞—Ö–æ–¥–∫—É.\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è.",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
        await notify_drivers_about_found_inline(context, game.id, participant.user.name)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '–ù–∞—à–µ–ª –≤–æ–¥–∏—Ç–µ–ª—è': {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_found_seeker_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞ '–ú–µ–Ω—è –Ω–∞—à–ª–∏' (–≤–æ–¥–∏—Ç–µ–ª—å)"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    try:
        from src.services.user_context_service import UserContextService
        from src.services.game_service import GameService
        from src.services.user_service import UserService
        
        game_context = UserContextService.get_user_game_context(user_id)
        
        if game_context.status != UserContextService.STATUS_IN_GAME:
            await query.edit_message_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã")
            return
        
        game = game_context.game
        participant = game_context.participant
        
        if not participant or not participant.role or participant.role.value != 'driver':
            await query.edit_message_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—è–º")
            return
        
        # –û—Ç–º–µ—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –∫–∞–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
        success = GameService.mark_participant_found(game.id, participant.user_id)
        if success:
            await query.edit_message_text(
                f"üéâ <b>–ù–∞—Ö–æ–¥–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, —á—Ç–æ –≤–∞—Å –Ω–∞—à–ª–∏ –≤ –∏–≥—Ä–µ {game.district}.\n"
                f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
                f"–ò–≥—Ä–∞ –¥–ª—è –≤–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!",
                parse_mode="HTML"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await notify_participants_about_found_driver_inline(context, game.id, participant.user.name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
            await check_game_completion_inline(context, game.id)
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Ö–æ–¥–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '–ú–µ–Ω—è –Ω–∞—à–ª–∏': {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_photo_place_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ (–≤–æ–¥–∏—Ç–µ–ª—å)"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    try:
        from src.services.user_context_service import UserContextService
        
        game_context = UserContextService.get_user_game_context(user_id)
        
        if game_context.status != UserContextService.STATUS_IN_GAME:
            await query.edit_message_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã")
            return
        
        game = game_context.game
        participant = game_context.participant
        
        if not participant or not participant.role or participant.role.value != 'driver':
            await query.edit_message_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—è–º")
            return
        
        await query.edit_message_text(
            f"üì∏ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ - –í–æ–¥–∏—Ç–µ–ª—å</b>\n\n"
            f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n\n"
            f"üöó <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n"
            f"‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ –º–µ—Å—Ç–∞ –ø—Ä—è—Ç–æ–∫\n"
            f"‚Ä¢ –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–∞—à–∏–Ω—É –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ\n"
            f"‚Ä¢ –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç–µ–ª—è–º –≤–∞—Å –Ω–∞–π—Ç–∏\n\n"
            f"üì± –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_photo_find_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞ —Ñ–æ—Ç–æ –Ω–∞—Ö–æ–¥–∫–∏ (–∏—Å–∫–∞—Ç–µ–ª—å)"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    try:
        from src.services.user_context_service import UserContextService
        
        game_context = UserContextService.get_user_game_context(user_id)
        
        if game_context.status != UserContextService.STATUS_IN_GAME:
            await query.edit_message_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã")
            return
        
        game = game_context.game
        participant = game_context.participant
        
        if not participant or not participant.role or participant.role.value != 'seeker':
            await query.edit_message_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏—Å–∫–∞—Ç–µ–ª—è–º")
            return
        
        await query.edit_message_text(
            f"üì∏ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–∞—Ö–æ–¥–∫–∏ - –ò—Å–∫–∞—Ç–µ–ª—å</b>\n\n"
            f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n\n"
            f"üîç <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n"
            f"‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã\n"
            f"‚Ä¢ –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ —á–µ—Ç–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–∞—à–∏–Ω—É\n"
            f"‚Ä¢ –í–æ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞—Ö–æ–¥–∫—É\n\n"
            f"üì± –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –Ω–∞—Ö–æ–¥–∫–∏: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_game_help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞ –ø–æ–º–æ—â–∏ –≤ –∏–≥—Ä–µ"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    from src.services.user_context_service import UserContextService
    game_context = UserContextService.get_user_game_context(user_id)
    
    if game_context.status != UserContextService.STATUS_IN_GAME:
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–º–æ—â—å –≤ –∏–≥—Ä–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã")
        return
    
    role_help = ""
    if game_context.participant and game_context.participant.role:
        role = game_context.participant.role.value
        if role == 'driver':
            role_help = (
                "üöó <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è:</b>\n"
                "‚Ä¢ –ù–∞–π–¥–∏—Ç–µ —É–∫—Ä–æ–º–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø—Ä—è—Ç–æ–∫\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                "‚Ä¢ –î–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                "‚Ä¢ –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, –∏—Å–∫–∞—Ç–µ–ª–∏ —É–∂–µ –∏—â—É—Ç!\n\n"
            )
        elif role == 'seeker':
            role_help = (
                "üîç <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –∏—Å–∫–∞—Ç–µ–ª—è:</b>\n"
                "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ä–∞–π–æ–Ω –∏–≥—Ä—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏\n"
                "‚Ä¢ –î–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞—Ö–æ–¥–æ–∫\n"
                "‚Ä¢ –†–∞–±–æ—Ç–∞–π—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ —Å –¥—Ä—É–≥–∏–º–∏ –∏—Å–∫–∞—Ç–µ–ª—è–º–∏\n\n"
            )
    
    help_text = (
        f"‚ö†Ô∏è <b>–ü–û–ú–û–©–¨ –í –ò–ì–†–ï</b>\n\n"
        f"{role_help}"
        f"<b>–û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:</b>\n"
        f"‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è\n"
        f"‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
        f"‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n"
        f"‚Ä¢ –ù–µ –ø–æ–∫–∏–¥–∞–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –∏–≥—Ä–æ–≤—É—é –∑–æ–Ω—É\n\n"
        f"<b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏:</b>\n"
        f"–í —Å–ª—É—á–∞–µ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    
    await query.edit_message_text(
        help_text,
        parse_mode="HTML"
    )

def _get_game_status_text(status) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã"""
    status_texts = {
        'recruiting': 'üìù –ù–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
        'upcoming': '‚è∞ –°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è',
        'hiding_phase': 'üèÉ –ü—Ä—è—Ç–∫–∏',
        'searching_phase': 'üîç –ü–æ–∏—Å–∫',
        'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'canceled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
    }
    return status_texts.get(status.value if hasattr(status, 'value') else str(status), str(status))

async def notify_drivers_about_found(context: ContextTypes.DEFAULT_TYPE, game_id: int, seeker_name: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ —Ç–æ–º, —á—Ç–æ –∏—Ö –Ω–∞—à–ª–∏"""
    try:
        from src.services.game_service import GameService
        
        game = GameService.get_game_by_id(game_id)
        if not game:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –∏–≥—Ä–µ
        for participant in game.participants:
            if participant.role.value == 'driver':
                user, _ = UserService.get_user_by_id(participant.user_id)
                if user:
                    try:
                        await context.bot.send_message(
                            chat_id=user.telegram_id,
                            text=(
                                f"üîç <b>–í–∞—Å –Ω–∞—à–ª–∏!</b>\n\n"
                                f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
                                f"üë§ <b>–ù–∞—à–µ–ª:</b> {seeker_name}\n\n"
                                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—Ö–æ–¥–∫—É –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—è –Ω–∞—à–ª–∏' –≤ –∏–≥—Ä–æ–≤–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."
                            ),
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é {user.telegram_id}: {e}")
                        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π: {e}")

async def notify_participants_about_found_driver(context: ContextTypes.DEFAULT_TYPE, game_id: int, driver_name: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ"""
    try:
        from src.services.game_service import GameService
        
        game = GameService.get_game_by_id(game_id)
        if not game:
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—Ä–æ–º–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
        for participant in game.participants:
            user, _ = UserService.get_user_by_id(participant.user_id)
            if user and user.name != driver_name:
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=(
                            f"üéâ <b>–í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                            f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
                            f"üöó <b>–ù–∞–π–¥–µ–Ω:</b> {driver_name}\n\n"
                            f"–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è - –∏—â–∏—Ç–µ –¥—Ä—É–≥–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π!"
                        ),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {user.telegram_id}: {e}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")

async def check_game_completion_callback(context: ContextTypes.DEFAULT_TYPE, game_id: int) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º"""
    try:
        from src.services.game_service import GameService
        from src.models.game import GameStatus
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã {game_id}")
        
        game = GameService.get_game_by_id(game_id)
        if not game:
            logger.warning(f"–ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        logger.info(f"–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã {game_id}: {game.status}")
        
        if game.status not in [GameStatus.HIDING_PHASE, GameStatus.SEARCHING_PHASE]:
            logger.info(f"–ò–≥—Ä–∞ {game_id} –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
        drivers_found = 0
        total_drivers = 0
        
        for participant in game.participants:
            if participant.role.value == 'driver':
                total_drivers += 1
                logger.info(f"–í–æ–¥–∏—Ç–µ–ª—å {participant.user_id}: –Ω–∞–π–¥–µ–Ω={participant.is_found}")
                if participant.is_found:
                    drivers_found += 1
        
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã {game_id}: –Ω–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π {drivers_found}/{total_drivers}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        if drivers_found >= total_drivers and total_drivers > 0:
            logger.info(f"–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã! –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É {game_id}")
            GameService.end_game(game_id)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
            await notify_game_completion_callback(context, game_id)
        else:
            logger.info(f"–ò–≥—Ä–∞ {game_id} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è: {drivers_found}/{total_drivers} –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")

async def notify_game_completion_callback(context: ContextTypes.DEFAULT_TYPE, game_id: int) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã"""
    try:
        from src.services.game_service import GameService
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã {game_id}")
        
        game = GameService.get_game_by_id(game_id)
        if not game:
            logger.warning(f"–ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_participants = len(game.participants)
        found_drivers = sum(1 for p in game.participants if p.role.value == 'driver' and p.is_found)
        total_drivers = sum(1 for p in game.participants if p.role.value == 'driver')
        
        logger.info(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∏–≥—Ä–µ {game_id}: {total_participants}")
        
        duration = ""
        if game.started_at and game.ended_at:
            delta = game.ended_at - game.started_at
            hours = delta.seconds // 3600
            minutes = (delta.seconds % 3600) // 60
            if hours > 0:
                duration = f"{hours}—á {minutes}–º"
            else:
                duration = f"{minutes}–º"
        
        completion_text = (
            f"üèÅ <b>–ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>\n\n"
            f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
            f"‚è∞ <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration}\n"
            f"üöó <b>–ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π:</b> {found_drivers}/{total_drivers}\n"
            f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {total_participants}\n\n"
            f"üéâ –°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /games –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∏–≥—Ä."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        sent_count = 0
        for participant in game.participants:
            user, _ = UserService.get_user_by_id(participant.user_id)
            if user:
                try:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã —É—á–∞—Å—Ç–Ω–∏–∫—É {user.telegram_id} ({user.name})")
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=completion_text,
                        parse_mode="HTML"
                    )
                    sent_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {user.telegram_id}: {e}")
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã {game_id}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")

async def notify_drivers_about_found_inline(context: ContextTypes.DEFAULT_TYPE, game_id: int, seeker_name: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ —Ç–æ–º, —á—Ç–æ –∏—Ö –Ω–∞—à–ª–∏ (–¥–ª—è inline –∫–Ω–æ–ø–æ–∫)"""
    try:
        from src.services.game_service import GameService
        from src.services.user_service import UserService
        
        game = GameService.get_game_by_id(game_id)
        if not game:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –∏–≥—Ä–µ
        for participant in game.participants:
            if participant.role and participant.role.value == 'driver' and not participant.is_found:
                user, _ = UserService.get_user_by_id(participant.user_id)
                if user:
                    try:
                        await context.bot.send_message(
                            chat_id=user.telegram_id,
                            text=(
                                f"üîç <b>–í–∞—Å –Ω–∞—à–ª–∏!</b>\n\n"
                                f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
                                f"üë§ <b>–ù–∞—à–µ–ª:</b> {seeker_name}\n\n"
                                f"–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üöó –ú–µ–Ω—è –Ω–∞—à–ª–∏' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                            ),
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é {user.telegram_id}: {e}")
                        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π: {e}")

async def notify_participants_about_found_driver_inline(context: ContextTypes.DEFAULT_TYPE, game_id: int, driver_name: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ (–¥–ª—è inline –∫–Ω–æ–ø–æ–∫)"""
    try:
        from src.services.game_service import GameService
        from src.services.user_service import UserService
        
        game = GameService.get_game_by_id(game_id)
        if not game:
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—Ä–æ–º–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
        for participant in game.participants:
            user, _ = UserService.get_user_by_id(participant.user_id)
            if user and user.name != driver_name:
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=(
                            f"üéâ <b>–í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                            f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
                            f"üöó <b>–ù–∞–π–¥–µ–Ω:</b> {driver_name}\n\n"
                            f"–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è - –∏—â–∏—Ç–µ –¥—Ä—É–≥–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π!"
                        ),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {user.telegram_id}: {e}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")

async def check_game_completion_inline(context: ContextTypes.DEFAULT_TYPE, game_id: int) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã (–¥–ª—è inline –∫–Ω–æ–ø–æ–∫)"""
    try:
        from src.services.game_service import GameService
        from src.models.game import GameStatus
        
        game = GameService.get_game_by_id(game_id)
        if not game or game.status not in [GameStatus.HIDING_PHASE, GameStatus.SEARCHING_PHASE]:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
        drivers_found = 0
        total_drivers = 0
        
        for participant in game.participants:
            if participant.role and participant.role.value == 'driver':
                total_drivers += 1
                if participant.is_found:
                    drivers_found += 1
        
        # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        if drivers_found >= total_drivers and total_drivers > 0:
            GameService.end_game(game_id)
            await notify_game_completion_inline(context, game_id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")

async def notify_game_completion_inline(context: ContextTypes.DEFAULT_TYPE, game_id: int) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã (–¥–ª—è inline –∫–Ω–æ–ø–æ–∫)"""
    try:
        from src.services.game_service import GameService
        from src.services.user_service import UserService
        
        game = GameService.get_game_by_id(game_id)
        if not game:
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_participants = len(game.participants)
        found_drivers = sum(1 for p in game.participants if p.role and p.role.value == 'driver' and p.is_found)
        total_drivers = sum(1 for p in game.participants if p.role and p.role.value == 'driver')
        
        duration = ""
        if game.started_at and game.ended_at:
            delta = game.ended_at - game.started_at
            hours = delta.seconds // 3600
            minutes = (delta.seconds % 3600) // 60
            if hours > 0:
                duration = f"{hours}—á {minutes}–º"
            else:
                duration = f"{minutes}–º"
        
        completion_text = (
            f"üèÅ <b>–ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>\n\n"
            f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
            f"‚è∞ <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration}\n"
            f"üöó <b>–ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π:</b> {found_drivers}/{total_drivers}\n"
            f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {total_participants}\n\n"
            f"üéâ –°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        for participant in game.participants:
            user, _ = UserService.get_user_by_id(participant.user_id)
            if user:
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=completion_text,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {user.telegram_id}: {e}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")

async def handle_game_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from src.services.game_settings_service import GameSettingsService
    from src.keyboards.inline import get_game_settings_keyboard
    
    settings = GameSettingsService.get_settings()
    keyboard = get_game_settings_keyboard(settings)
    
    mode_text = "üî¥ –†—É—á–Ω–æ–π" if settings.manual_control_mode else "üü¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
    
    settings_text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã</b>\n\n"
        f"üéÆ <b>–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> {mode_text}\n\n"
        f"üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"‚Ä¢ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã: {'‚úÖ' if settings.auto_start_game else '‚ùå'}\n"
        f"‚Ä¢ –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π: {'‚úÖ' if settings.auto_assign_roles else '‚ùå'}\n"
        f"‚Ä¢ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç —Ñ–∞–∑—ã –ø—Ä—è—Ç–æ–∫: {'‚úÖ' if settings.auto_start_hiding else '‚ùå'}\n"
        f"‚Ä¢ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç —Ñ–∞–∑—ã –ø–æ–∏—Å–∫–∞: {'‚úÖ' if settings.auto_start_searching else '‚ùå'}\n"
        f"‚Ä¢ –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã: {'‚úÖ' if settings.auto_end_game else '‚ùå'}\n\n"
        f"‚è± <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"‚Ä¢ –§–∞–∑–∞ –ø—Ä—è—Ç–æ–∫: {settings.hiding_phase_duration} –º–∏–Ω\n"
        f"‚Ä¢ –§–∞–∑–∞ –ø–æ–∏—Å–∫–∞: {settings.searching_phase_duration} –º–∏–Ω\n"
        f"‚Ä¢ –ú–∏–Ω. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {settings.min_participants_to_start}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    )
    
    await query.edit_message_text(
        settings_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def handle_time_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from src.services.game_settings_service import GameSettingsService
    from src.keyboards.inline import get_time_settings_keyboard
    
    settings = GameSettingsService.get_settings()
    keyboard = get_time_settings_keyboard(settings)
    
    time_text = (
        f"‚è∞ <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üôà <b>–§–∞–∑–∞ –ø—Ä—è—Ç–æ–∫:</b> {settings.hiding_phase_duration} –º–∏–Ω—É—Ç\n"
        f"üîç <b>–§–∞–∑–∞ –ø–æ–∏—Å–∫–∞:</b> {settings.searching_phase_duration} –º–∏–Ω—É—Ç\n"
        f"üë• <b>–ú–∏–Ω. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞:</b> {settings.min_participants_to_start}\n\n"
        f"üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è</i>"
    )
    
    await query.edit_message_text(
        time_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def handle_notification_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from src.services.game_settings_service import GameSettingsService
    from src.keyboards.inline import get_notification_settings_keyboard
    
    settings = GameSettingsService.get_settings()
    keyboard = get_notification_settings_keyboard(settings)
    
    notification_text = (
        f"üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        f"{'‚úÖ' if settings.notify_on_role_assignment else '‚ùå'} <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π</b>\n"
        f"–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É\n\n"
        f"{'‚úÖ' if settings.notify_on_phase_change else '‚ùå'} <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ñ–∞–∑</b>\n"
        f"–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏ –∏–≥—Ä—ã\n\n"
        f"{'‚úÖ' if settings.notify_on_participant_action else '‚ùå'} <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n"
        f"–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        f"üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è</i>"
    )
    
    await query.edit_message_text(
        notification_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def handle_toggle_setting_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from src.services.game_settings_service import GameSettingsService
    
    # –ú–∞–ø–ø–∏–Ω–≥ callback'–æ–≤ –Ω–∞ –ø–æ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    setting_map = {
        "toggle_auto_start_game": "auto_start_game",
        "toggle_auto_assign_roles": "auto_assign_roles",
        "toggle_auto_start_hiding": "auto_start_hiding", 
        "toggle_auto_start_searching": "auto_start_searching",
        "toggle_auto_end_game": "auto_end_game",
        "toggle_manual_control": "manual_control_mode",
        "toggle_notify_role": "notify_on_role_assignment",
        "toggle_notify_phase": "notify_on_phase_change",
        "toggle_notify_action": "notify_on_participant_action"
    }
    
    setting_name = setting_map.get(query.data)
    if not setting_name:
        await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", show_alert=True)
        return
    
    settings = GameSettingsService.get_settings()
    current_value = getattr(settings, setting_name)
    new_value = not current_value
    
    success = GameSettingsService.update_settings(**{setting_name: new_value})
    
    if success:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–µ–Ω—é
        if query.data.startswith("toggle_notify"):
            await handle_notification_settings_callback(update, context)
        elif query.data in ["toggle_manual_control"]:
            await handle_game_settings_callback(update, context)
        else:
            await handle_automation_settings_callback(update, context)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

async def handle_automation_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from src.services.game_settings_service import GameSettingsService
    from src.keyboards.inline import get_automation_settings_keyboard
    
    settings = GameSettingsService.get_settings()
    keyboard = get_automation_settings_keyboard(settings)
    
    automation_text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</b>\n\n"
        f"üéÆ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:</b>\n\n"
        f"{'‚úÖ' if settings.auto_start_game else '‚ùå'} <b>–ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã</b>\n"
        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n\n"
        f"{'‚úÖ' if settings.auto_assign_roles else '‚ùå'} <b>–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π</b>\n"
        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n\n"
        f"{'‚úÖ' if settings.auto_start_hiding else '‚ùå'} <b>–ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç —Ñ–∞–∑—ã –ø—Ä—è—Ç–æ–∫</b>\n"
        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–∑–µ –ø—Ä—è—Ç–æ–∫\n\n"
        f"{'‚úÖ' if settings.auto_start_searching else '‚ùå'} <b>–ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç —Ñ–∞–∑—ã –ø–æ–∏—Å–∫–∞</b>\n"
        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–∑–µ –ø–æ–∏—Å–∫–∞\n\n"
        f"{'‚úÖ' if settings.auto_end_game else '‚ùå'} <b>–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã</b>\n"
        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n\n"
        f"üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è</i>"
    )
    
    await query.edit_message_text(
        automation_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def handle_time_value_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from src.services.game_settings_service import GameSettingsService
    
    # –ü–∞—Ä—Å–∏–º callback data
    data = query.data
    
    if data.startswith("set_hiding_time_"):
        field = "hiding_phase_duration"
        value = int(data.replace("set_hiding_time_", ""))
    elif data.startswith("set_searching_time_"):
        field = "searching_phase_duration"
        value = int(data.replace("set_searching_time_", ""))
    elif data.startswith("set_notification_time_"):
        field = "game_start_notification_time"
        value = int(data.replace("set_notification_time_", ""))
    elif data.startswith("set_min_participants_"):
        field = "min_participants_to_start"
        value = int(data.replace("set_min_participants_", ""))
    else:
        await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", show_alert=True)
        return
    
    success = GameSettingsService.update_settings(**{field: value})
    
    if success:
        await handle_time_settings_callback(update, context)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

async def handle_time_setting_select_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from src.services.game_settings_service import GameSettingsService
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    
    settings = GameSettingsService.get_settings()
    data = query.data
    
    if data == "set_hiding_duration":
        setting_name = "hiding_phase_duration"
        title = "‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–∑—ã –ø—Ä—è—Ç–æ–∫"
        current_value = settings.hiding_phase_duration
        options = [5, 10, 15, 20, 30, 45, 60]
        callback_prefix = "set_hiding_time_"
    elif data == "set_searching_duration":
        setting_name = "searching_phase_duration"
        title = "‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–∑—ã –ø–æ–∏—Å–∫–∞"
        current_value = settings.searching_phase_duration
        options = [30, 45, 60, 90, 120, 180, 240]
        callback_prefix = "set_searching_time_"
    elif data == "set_notification_time":
        setting_name = "game_start_notification_time"
        title = "üîî –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ"
        current_value = settings.game_start_notification_time
        options = [5, 10, 15, 30, 60]
        callback_prefix = "set_notification_time_"
    elif data == "set_min_participants":
        setting_name = "min_participants_to_start"
        title = "üë• –ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞"
        current_value = settings.min_participants_to_start
        options = [2, 3, 4, 5, 6, 8, 10]
        callback_prefix = "set_min_participants_"
    else:
        await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    buttons = []
    for option in options:
        marker = "‚úÖ" if option == current_value else ""
        button_text = f"{marker} {option}" + (" –º–∏–Ω" if "time" in data or "duration" in data else "")
        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"{callback_prefix}{option}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="time_settings")])
    
    text = f"{title}\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="HTML"
    )

async def handle_reset_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —É–º–æ–ª—á–∞–Ω–∏—é"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from src.services.game_settings_service import GameSettingsService
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        f"‚ö†Ô∏è <b>–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —É–º–æ–ª—á–∞–Ω–∏—é</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?\n\n"
        f"<b>–ë—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã:</b>\n"
        f"‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n"
        f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        f"‚Ä¢ –†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
        f"<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>"
    )
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_reset_settings"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="game_settings")
        ]
    ])
    
    await query.edit_message_text(
        confirmation_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def handle_confirm_reset_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from src.services.game_settings_service import GameSettingsService
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success = GameSettingsService.reset_to_defaults()
    
    if success:
        await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —É–º–æ–ª—á–∞–Ω–∏—é!", show_alert=True)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
    
    await handle_game_settings_callback(update, context)

async def handle_back_to_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from src.keyboards.reply import get_admin_keyboard
    
    admin_text = (
        f"üîë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        f"üéÆ /admin_games - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏\n"
        f"‚öôÔ∏è /game_settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã\n"
        f"üó∫ /manage_districts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞–º–∏\n"
        f"üë• /manage_roles - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏\n"
        f"üìã /edit_rules - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª\n"
        f"üåç /zone_admin - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω–∞–º–∏\n"
        f"‚è∞ /scheduler_admin - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"
    )
    
    await query.edit_message_text(
        admin_text,
        parse_mode="HTML"
    )

def get_callback_handler_patterns():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
callback_handler = CallbackQueryHandler(handle_callback) 