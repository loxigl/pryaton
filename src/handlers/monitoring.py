from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters, CallbackQueryHandler, ConversationHandler
from loguru import logger
from datetime import datetime, timedelta
import psutil

from src.services.enhanced_scheduler_service import DEFAULT_TIMEZONE
from src.services.user_service import UserService
from src.services.monitoring_service import MonitoringService
from src.keyboards.reply import get_contextual_main_keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MONITORING_MENU, VIEW_GAME_DETAILS, VIEW_PLAYER_STATS = range(3)

def format_msk_time(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –ú–°–ö"""
    msk_time = dt.astimezone(DEFAULT_TIMEZONE)
    return msk_time.strftime('%H:%M')

def format_msk_datetime(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ú–°–ö"""
    msk_time = dt.astimezone(DEFAULT_TIMEZONE)
    return msk_time.strftime('%d.%m.%Y %H:%M')

async def monitoring_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    user_id = update.effective_user.id
    
    logger.info(f"–ó–∞–ø—Ä–æ—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if not UserService.is_admin(user_id):
        logger.warning(f"–û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
            reply_markup=get_contextual_main_keyboard(user_id)
        )
        return ConversationHandler.END
    
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return await show_monitoring_menu(update, context)

async def show_monitoring_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = MonitoringService.get_active_games_stats()
    
    stats_text = (
        f"üìä <b>–ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´</b>\n\n"
        f"üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã:</b> {stats.get('active_games_count', 0)}\n"
        f"üìÖ <b>–ò–≥—Ä—ã —Å–µ–≥–æ–¥–Ω—è:</b> {stats.get('today_games_count', 0)}\n"
        f"üë• <b>–í—Å–µ–≥–æ —É—á–∞—Å—Ç–∏–π:</b> {stats.get('total_participants', 0)}\n"
        f"üë§ <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:</b> {stats.get('unique_players', 0)}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∏–≥—Ä
    games_by_status = stats.get('games_by_status', {})
    if games_by_status:
        stats_text += f"üìà <b>–ò–≥—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        status_names = {
            'recruiting': 'üìù –ù–∞–±–æ—Ä',
            'upcoming': '‚è∞ –°–∫–æ—Ä–æ',
            'hiding_phase': 'üèÉ –§–∞–∑–∞ –ø—Ä—è—Ç–æ–∫',
            'searching_phase': 'üîç –§–∞–∑–∞ –ø–æ–∏—Å–∫–∞',
            'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã',
            'canceled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω—ã'
        }
        
        for status, count in games_by_status.items():
            status_name = status_names.get(status, status)
            stats_text += f"‚Ä¢ {status_name}: {count}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("üéÆ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã", callback_data="mon_active_games")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤", callback_data="mon_player_stats")],
        [InlineKeyboardButton("üó∫ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–π–æ–Ω–æ–≤", callback_data="mon_district_stats")],
        [InlineKeyboardButton("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="mon_recent_activities")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="mon_refresh")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mon_exit")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            stats_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            stats_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    
    return MONITORING_MENU

async def show_active_games(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    stats = MonitoringService.get_active_games_stats()
    active_games = stats.get('active_games', [])
    
    if not active_games:
        text = "üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä."
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="mon_back")]]
    else:
        text = f"üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã ({len(active_games)})</b>\n\n"
        
        keyboard = []
        for game in active_games:
            game_info = f"#{game['id']} {game['district']} ({game['participants']}/{game['max_participants']})"
            text += f"‚Ä¢ <b>–ò–≥—Ä–∞ #{game['id']}</b>\n"
            text += f"  üìç {game['district']}\n"
            text += f"  ‚è∞ {format_msk_datetime(game['scheduled_at'])}\n"
            text += f"  üö¶ {game['status']}\n"
            text += f"  üë• {game['participants']}/{game['max_participants']}\n\n"
            
            keyboard.append([InlineKeyboardButton(
                f"üìã –î–µ—Ç–∞–ª–∏ #{game['id']}", 
                callback_data=f"mon_game_details_{game['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="mon_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    
    return MONITORING_MENU

async def show_game_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ callback_data
    game_id = int(query.data.split('_')[-1])
    
    game_info = MonitoringService.get_game_detailed_info(game_id)
    if not game_info:
        text = "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="mon_active_games")]]
    else:
        game = game_info['game']
        participants = game_info['participants']
        summary = game_info['summary']
        
        text = f"üìã <b>–î–ï–¢–ê–õ–ò –ò–ì–†–´ #{game['id']}</b>\n\n"
        text += f"üìç <b>–†–∞–π–æ–Ω:</b> {game['district']}\n"
        text += f"üö¶ <b>–°—Ç–∞—Ç—É—Å:</b> {game['status']}\n"
        text += f"‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:</b> {format_msk_datetime(game['scheduled_at'])}\n"
        
        if game['started_at']:
            text += f"üöÄ <b>–ù–∞—á–∞—Ç–æ:</b> {format_msk_datetime(game['started_at'])}\n"
        
        if game['ended_at']:
            text += f"üèÅ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {format_msk_datetime(game['ended_at'])}\n"
        
        text += f"\nüë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {summary['total_participants']}/{game['max_participants']}\n"
        text += f"üöó <b>–í–æ–¥–∏—Ç–µ–ª–∏:</b> {summary['drivers_count']} (–Ω–∞–π–¥–µ–Ω–æ: {summary['found_drivers']})\n"
        text += f"üîç <b>–ò—Å–∫–∞—Ç–µ–ª–∏:</b> {summary['seekers_count']}\n"
        text += f"üìç <b>–° –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:</b> {summary['participants_with_location']}\n"
        text += f"üì∏ <b>–í—Å–µ–≥–æ —Ñ–æ—Ç–æ:</b> {summary['total_photos']}\n\n"
        
        text += f"üìã <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n"
        for participant in participants:
            status_emoji = "‚úÖ" if participant['is_found'] else "‚ùå"
            location_emoji = "üìç" if participant['has_location'] else "üìç‚ùå"
            
            text += f"‚Ä¢ {participant['name']} ({participant['role']}) {status_emoji}{location_emoji}\n"
        
        keyboard = [
            [InlineKeyboardButton("üìä –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"mon_generate_report_{game_id}")],
            [InlineKeyboardButton("üó∫ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"mon_show_map_{game_id}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ö –∞–∫—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–∞–º", callback_data="mon_active_games")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mon_back")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    
    return MONITORING_MENU

async def generate_game_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∏–≥—Ä–µ"""
    query = update.callback_query
    await query.answer()
    
    game_id = int(query.data.split('_')[-1])
    
    report = MonitoringService.generate_game_report(game_id)
    if not report:
        text = "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞."
    else:
        text = report
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ö –¥–µ—Ç–∞–ª—è–º –∏–≥—Ä—ã", callback_data=f"mon_game_details_{game_id}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mon_back")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    
    return MONITORING_MENU

async def show_player_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    stats = MonitoringService.get_player_statistics()
    top_players = stats.get('top_players', [])
    
    text = f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†–û–ö–û–í</b>\n\n"
    
    if not top_players:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∏–≥—Ä–æ–∫–∞—Ö."
    else:
        text += f"üèÜ <b>–¢–æ–ø-{len(top_players)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n"
        
        for i, player in enumerate(top_players, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            text += f"{medal} {player['name']} - {player['games_count']} –∏–≥—Ä\n"
    
    keyboard = [
        [InlineKeyboardButton("üó∫ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–π–æ–Ω–æ–≤", callback_data="mon_district_stats")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="mon_back")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    
    return MONITORING_MENU

async def show_district_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–π–æ–Ω–∞–º"""
    query = update.callback_query
    await query.answer()
    
    stats = MonitoringService.get_district_statistics()
    
    text = f"üó∫ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ê–ô–û–ù–ê–ú</b>\n\n"
    
    games_by_district = stats.get('games_by_district', [])
    players_by_district = stats.get('players_by_district', [])
    
    if games_by_district:
        text += f"üéÆ <b>–ò–≥—Ä—ã –ø–æ —Ä–∞–π–æ–Ω–∞–º:</b>\n"
        for district in games_by_district[:10]:  # –¢–æ–ø-10
            text += f"‚Ä¢ {district['district']}: {district['games_count']} –∏–≥—Ä\n"
        text += "\n"
    
    if players_by_district:
        text += f"üë• <b>–ò–≥—Ä–æ–∫–∏ –ø–æ —Ä–∞–π–æ–Ω–∞–º:</b>\n"
        for district in players_by_district[:10]:  # –¢–æ–ø-10
            text += f"‚Ä¢ {district['district']}: {district['players_count']} –∏–≥—Ä–æ–∫–æ–≤\n"
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤", callback_data="mon_player_stats")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="mon_back")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    
    return MONITORING_MENU

async def show_recent_activities(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    activities = MonitoringService.get_recent_activities(15)
    
    text = f"üìù <b>–ü–û–°–õ–ï–î–ù–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò</b>\n\n"
    
    if not activities:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    else:
        for activity in activities:
            time_str = activity['timestamp'].strftime('%d.%m %H:%M')
            
            if activity['type'] == 'game_created':
                emoji = "üéÆ"
            elif activity['type'] == 'game_joined':
                emoji = "üë§"
            else:
                emoji = "üìù"
            
            text += f"{emoji} <code>{time_str}</code> {activity['description']}\n"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="mon_recent_activities")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="mon_back")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    
    return MONITORING_MENU

async def handle_monitoring_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    query = update.callback_query
    data = query.data
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
    
    if data == "mon_back" or data == "mon_refresh":
        logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        return await show_monitoring_menu(update, context)
    elif data == "mon_active_games":
        logger.info(f"–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä")
        return await show_active_games(update, context)
    elif data.startswith("mon_game_details_"):
        logger.info(f"–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã")
        return await show_game_details(update, context)
    elif data.startswith("mon_generate_report_"):
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
        return await generate_game_report(update, context)
    elif data.startswith("mon_show_map_"):
        logger.info(f"–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç—ã")
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∫–∞—Ä—Ç –∏–∑ location.py
        from src.handlers.location import show_game_map
        await show_game_map(update, context)
        return MONITORING_MENU
    elif data == "mon_player_stats":
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤")
        return await show_player_stats(update, context)
    elif data == "mon_district_stats":
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–π–æ–Ω–æ–≤")
        return await show_district_stats(update, context)
    elif data == "mon_recent_activities":
        logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        return await show_recent_activities(update, context)
    elif data == "mon_exit":
        logger.info(f"–í—ã—Ö–æ–¥ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        is_admin = UserService.is_admin(query.from_user.id)
        await query.edit_message_text(
            "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        await query.message.reply_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_contextual_main_keyboard(query.from_user.id)
        )
        return ConversationHandler.END
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {data}")
    
    return MONITORING_MENU

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
monitoring_handlers = [
    MessageHandler(filters.Regex("^üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥$"), monitoring_command),
]

async def handle_monitoring_callback_direct(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑ ConversationHandler"""
    query = update.callback_query
    data = query.data
    
    logger.info(f"–ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
    
    try:
        if data == "mon_back" or data == "mon_refresh":
            logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            await show_monitoring_menu_direct(update, context)
        elif data == "mon_active_games":
            logger.info(f"–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä")
            await show_active_games_direct(update, context)
        elif data.startswith("mon_game_details_"):
            logger.info(f"–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã")
            await show_game_details_direct(update, context)
        elif data.startswith("mon_generate_report_"):
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
            await generate_game_report_direct(update, context)
        elif data.startswith("mon_show_map_"):
            logger.info(f"–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç—ã")
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∫–∞—Ä—Ç –∏–∑ location.py
            from src.handlers.location import show_game_map
            await show_game_map(update, context)
        elif data == "mon_player_stats":
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤")
            await show_player_stats_direct(update, context)
        elif data == "mon_district_stats":
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–π–æ–Ω–æ–≤")
            await show_district_stats_direct(update, context)
        elif data == "mon_recent_activities":
            logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            await show_recent_activities_direct(update, context)
        elif data == "mon_exit":
            logger.info(f"–í—ã—Ö–æ–¥ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            is_admin = UserService.is_admin(query.from_user.id)
            await query.edit_message_text(
                "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            )
            await query.message.reply_text(
                "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=get_contextual_main_keyboard(query.from_user.id)
            )
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {data}")
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {data}: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

# –ü—Ä—è–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ ConversationHandler
async def show_monitoring_menu_direct(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤)"""
    query = update.callback_query
    if query:
        await query.answer()
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    try:
        await show_monitoring_menu(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

async def show_active_games_direct(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤)"""
    query = update.callback_query
    if query:
        await query.answer()
    
    try:
        await show_active_games(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {e}")

async def show_game_details_direct(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤)"""
    query = update.callback_query
    if query:
        await query.answer()
    
    try:
        await show_game_details(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã: {e}")

async def generate_game_report_direct(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∏–≥—Ä–µ (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤)"""
    query = update.callback_query
    if query:
        await query.answer()
    
    try:
        await generate_game_report(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

async def show_player_stats_direct(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤)"""
    query = update.callback_query
    if query:
        await query.answer()
    
    try:
        await show_player_stats(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤: {e}")

async def show_district_stats_direct(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–π–æ–Ω–∞–º (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤)"""
    query = update.callback_query
    if query:
        await query.answer()
    
    try:
        await show_district_stats(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–π–æ–Ω–æ–≤: {e}")

async def show_recent_activities_direct(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤)"""
    query = update.callback_query
    if query:
        await query.answer()
    
    try:
        await show_recent_activities(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {e}")

# Conversation handler –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
monitoring_conversation = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥$"), monitoring_command)],
    states={
        MONITORING_MENU: [CallbackQueryHandler(handle_monitoring_callback, pattern="^mon_")],
        VIEW_GAME_DETAILS: [CallbackQueryHandler(handle_monitoring_callback, pattern="^mon_")],
        VIEW_PLAYER_STATS: [CallbackQueryHandler(handle_monitoring_callback, pattern="^mon_")]
    },
    fallbacks=[]
) 