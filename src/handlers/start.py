from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Contact
from telegram.ext import ContextTypes, ConversationHandler
from loguru import logger
import os

from src.models.base import get_db
from src.models.user import User, UserRole
from src.services.user_service import UserService
from src.services.settings_service import SettingsService
from src.keyboards import (
    get_phone_keyboard, 
    get_district_keyboard, 
    get_role_keyboard, 
    get_confirmation_keyboard,
    get_main_keyboard,
    get_contextual_main_keyboard,
    remove_keyboard
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
ENTER_NAME, ENTER_PHONE, ENTER_DISTRICT, ENTER_ROLE, ENTER_CAR_BRAND, ENTER_CAR_COLOR, ENTER_CAR_NUMBER, CONFIRM_RULES = range(8)

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db_generator = get_db()
    db = next(db_generator)
    
    db_user = db.query(User).filter(User.telegram_id == user.id).first()
    
    if db_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        if not db_user.car_brand or not db_user.car_color or not db_user.car_number:
            context.user_data["name"] = db_user.name
            context.user_data["phone"] = db_user.phone
            context.user_data["district"] = db_user.district
            context.user_data["role"] = db_user.default_role
            if not db_user.car_brand:
                car_brand_text = (
                    f"üöó <b>–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Toyota, BMW –∏ —Ç.–¥.)."
                )
                keyboard = ReplyKeyboardMarkup([
                    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
                    ["‚ùå –û—Ç–º–µ–Ω–∞"]
                ], resize_keyboard=True)
                await update.message.reply_text(
                    car_brand_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                return ENTER_CAR_BRAND
            elif not db_user.car_color:
                car_color_text = (
                    f"üé® <b>–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–ª—ã–π, —á–µ—Ä–Ω—ã–π, –∫—Ä–∞—Å–Ω—ã–π –∏ —Ç.–¥.)."
                )
                keyboard = ReplyKeyboardMarkup([
                    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
                    ["‚ùå –û—Ç–º–µ–Ω–∞"]
                ], resize_keyboard=True)
                await update.message.reply_text(
                    car_color_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                return ENTER_CAR_COLOR
            elif not db_user.car_number:
                car_number_text = (
                    f"üî¢ <b>–£–∫–∞–∂–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê123–ë–í777)."
                )
                keyboard = ReplyKeyboardMarkup([
                    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
                    ["‚ùå –û—Ç–º–µ–Ω–∞"]
                ], resize_keyboard=True)
                await update.message.reply_text(
                    car_number_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                return ENTER_CAR_NUMBER
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–≥—Ä—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        welcome_text = (
            f"üéâ <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {db_user.name}!</b>\n\n"
            f"üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ PRYATON.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        await update.message.reply_text(
            welcome_text,
            reply_markup=get_contextual_main_keyboard(user.id),
            parse_mode="HTML"
        )
        return ConversationHandler.END
    
    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    welcome_text = (
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
        f"üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ <b>PRYATON</b>.\n\n"
        f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
        f"üìù <b>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>\n"
        f"(–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º)"
    )
    
    await update.message.reply_text(
        welcome_text,
        parse_mode="HTML"
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ConversationHandler
    return ENTER_NAME

async def process_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    name = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    if len(name.strip()) < 2:
        await update.message.reply_text(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ENTER_NAME
    
    if len(name) > 50:
        await update.message.reply_text(
            "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ENTER_NAME
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    context.user_data["name"] = name.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª –∏–º—è: {name}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_text = (
        f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ, {name}!</b>\n\n"
        f"üì± <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n"
        f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
    keyboard = get_phone_keyboard()
    
    await update.message.reply_text(
        phone_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    return ENTER_PHONE

async def process_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user = update.effective_user
    phone = None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
        welcome_text = (
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
            f"üìù <b>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>\n"
            f"(–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º)"
        )
        
        await update.message.reply_text(
            welcome_text,
            parse_mode="HTML"
        )
        return ENTER_NAME
    
    if update.message.text == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    elif update.message.contact:
        phone = update.message.contact.phone_number
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç: {phone}")
    elif update.message.text:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
        phone_text = update.message.text.strip()
        if not phone_text.startswith("+") and not phone_text.isdigit():
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
                reply_markup=get_phone_keyboard()
            )
            return ENTER_PHONE
        phone = phone_text
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω –≤—Ä—É—á–Ω—É—é: {phone}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    context.user_data["phone"] = phone
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–π–æ–Ω
    district_text = (
        f"‚úÖ <b>{f'–¢–µ–ª–µ—Ñ–æ–Ω: {phone}' if phone else '–¢–µ–ª–µ—Ñ–æ–Ω: –Ω–µ —É–∫–∞–∑–∞–Ω'}</b>\n\n"
        f"üèô <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω</b>\n"
        f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å –ø–æ–¥–±–æ—Ä–æ–º –±–ª–∏–∂–∞–π—à–∏—Ö –∏–≥—Ä."
    )
    
    await update.message.reply_text(
        district_text,
        reply_markup=get_district_keyboard(),
        parse_mode="HTML"
    )
    
    return ENTER_DISTRICT

async def process_district(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞"""
    user = update.effective_user
    district = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_text = (
            f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ, {context.user_data['name']}!</b>\n\n"
            f"üì± <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n"
            f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥."
        )
        
        await update.message.reply_text(
            phone_text,
            reply_markup=get_phone_keyboard(),
            parse_mode="HTML"
        )
        return ENTER_PHONE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ä–∞–π–æ–Ω
    available_districts = SettingsService.get_districts()
    if district not in available_districts and district != "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_district_keyboard()
        )
        return ENTER_DISTRICT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–π–æ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    context.user_data["district"] = district
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª —Ä–∞–π–æ–Ω: {district}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    role_text = (
        f"‚úÖ <b>–†–∞–π–æ–Ω: {district}</b>\n\n"
        f"üé≠ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>\n"
        f"–≠—Ç–æ –≤–∞—à–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è —Ä–æ–ª—å –≤ –∏–≥—Ä–∞—Ö"
    )
    
    await update.message.reply_text(
        role_text,
        reply_markup=get_role_keyboard(),
        parse_mode="HTML"
    )
    
    return ENTER_ROLE

async def process_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    user = update.effective_user
    role_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–∞–π–æ–Ω–∞
        district_text = (
            f"‚úÖ <b>–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}</b>\n\n"
            f"üèô <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω</b>\n"
            f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å –ø–æ–¥–±–æ—Ä–æ–º –±–ª–∏–∂–∞–π—à–∏—Ö –∏–≥—Ä."
        )
        
        await update.message.reply_text(
            district_text,
            reply_markup=get_district_keyboard(),
            parse_mode="HTML"
        )
        return ENTER_DISTRICT
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏
    role = SettingsService.get_role_from_display_name(role_text)
    
    if role is None and role_text != "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_role_keyboard()
        )
        return ENTER_ROLE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    context.user_data["role"] = role
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å: {role}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    car_brand_text = (
        f"‚úÖ <b>–†–æ–ª—å: {role_text}</b>\n\n"
        f"üöó <b>–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Toyota, BMW –∏ —Ç.–¥.)."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
    keyboard = ReplyKeyboardMarkup([
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
        ["‚ùå –û—Ç–º–µ–Ω–∞"]
    ], resize_keyboard=True)
    
    await update.message.reply_text(
        car_brand_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    return ENTER_CAR_BRAND

async def process_car_brand(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    user = update.effective_user
    car_brand = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
        role_text = (
            f"‚úÖ <b>–†–∞–π–æ–Ω: {context.user_data['district']}</b>\n\n"
            f"üé≠ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>\n"
            f"–≠—Ç–æ –≤–∞—à–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è —Ä–æ–ª—å –≤ –∏–≥—Ä–∞—Ö"
        )
        
        await update.message.reply_text(
            role_text,
            reply_markup=get_role_keyboard(),
            parse_mode="HTML"
        )
        return ENTER_ROLE
    
    if car_brand == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start",
            reply_markup=remove_keyboard()
        )
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    if len(car_brand.strip()) < 2:
        await update.message.reply_text(
            "‚ùå –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ENTER_CAR_BRAND
    
    if len(car_brand) > 50:
        await update.message.reply_text(
            "‚ùå –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ENTER_CAR_BRAND
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    context.user_data["car_brand"] = car_brand.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {car_brand}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    car_color_text = (
        f"‚úÖ <b>–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {car_brand}</b>\n\n"
        f"üé® <b>–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–ª—ã–π, —á–µ—Ä–Ω—ã–π, –∫—Ä–∞—Å–Ω—ã–π –∏ —Ç.–¥.)."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
    keyboard = ReplyKeyboardMarkup([
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
        ["‚ùå –û—Ç–º–µ–Ω–∞"]
    ], resize_keyboard=True)
    
    await update.message.reply_text(
        car_color_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    return ENTER_CAR_COLOR

async def process_car_color(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    user = update.effective_user
    car_color = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        car_brand_text = (
            f"‚úÖ <b>–†–æ–ª—å: {context.user_data['role']}</b>\n\n"
            f"üöó <b>–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Toyota, BMW –∏ —Ç.–¥.)."
        )
        
        keyboard = ReplyKeyboardMarkup([
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ], resize_keyboard=True)
        
        await update.message.reply_text(
            car_brand_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return ENTER_CAR_BRAND
    
    if car_color == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start",
            reply_markup=remove_keyboard()
        )
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    if len(car_color.strip()) < 2:
        await update.message.reply_text(
            "‚ùå –¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ENTER_CAR_COLOR
    
    if len(car_color) > 30:
        await update.message.reply_text(
            "‚ùå –¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ENTER_CAR_COLOR
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    context.user_data["car_color"] = car_color.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {car_color}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    car_number_text = (
        f"‚úÖ <b>–¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {car_color}</b>\n\n"
        f"üî¢ <b>–£–∫–∞–∂–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê123–ë–í777)."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
    keyboard = ReplyKeyboardMarkup([
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
        ["‚ùå –û—Ç–º–µ–Ω–∞"]
    ], resize_keyboard=True)
    
    await update.message.reply_text(
        car_number_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    return ENTER_CAR_NUMBER

async def process_car_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Å. –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    user = update.effective_user
    car_number = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Ü–≤–µ—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        car_color_text = (
            f"‚úÖ <b>–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {context.user_data['car_brand']}</b>\n\n"
            f"üé® <b>–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–ª—ã–π, —á–µ—Ä–Ω—ã–π, –∫—Ä–∞—Å–Ω—ã–π –∏ —Ç.–¥.)."
        )
        
        keyboard = ReplyKeyboardMarkup([
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ], resize_keyboard=True)
        
        await update.message.reply_text(
            car_color_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return ENTER_CAR_COLOR
    
    if car_number == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start",
            reply_markup=remove_keyboard()
        )
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≥–æ—Å. –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    if len(car_number.strip()) < 5:
        await update.message.reply_text(
            "‚ùå –ì–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ENTER_CAR_NUMBER
    
    if len(car_number) > 20:
        await update.message.reply_text(
            "‚ùå –ì–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ENTER_CAR_NUMBER
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    context.user_data["car_number"] = car_number.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {car_number}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ SettingsService –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    rules = SettingsService.get_game_rules()
    rules_text = (
        f"‚úÖ <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {context.user_data['car_brand']} {context.user_data['car_color']}, –Ω–æ–º–µ—Ä {context.user_data['car_number']}\n\n"
        f"üìã <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã PRYATON</b>\n\n"
        f"{rules}\n\n"
        f"‚ö†Ô∏è <b>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞:</b>"
    )
    
    await update.message.reply_text(
        rules_text,
        reply_markup=get_confirmation_keyboard(),
        parse_mode="HTML"
    )
    
    return CONFIRM_RULES

async def process_rules_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª"""
    user = update.effective_user
    confirmation = update.message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –≥–æ—Å. –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        car_number_text = (
            f"‚úÖ <b>–¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {context.user_data['car_color']}</b>\n\n"
            f"üî¢ <b>–£–∫–∞–∂–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê123–ë–í777)."
        )
        keyboard = ReplyKeyboardMarkup([
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ], resize_keyboard=True)
        await update.message.reply_text(
            car_number_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return ENTER_CAR_NUMBER
    if confirmation != "‚úÖ –î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏")
        reject_text = (
            "‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.\n\n"
            "–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        await update.message.reply_text(
            reject_text,
            reply_markup=remove_keyboard(),
            parse_mode="HTML"
        )
        context.user_data.clear()
        return ConversationHandler.END
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    name = context.user_data.get("name")
    phone = context.user_data.get("phone") 
    district = context.user_data.get("district")
    role = context.user_data.get("role")
    car_brand = context.user_data.get("car_brand")
    car_color = context.user_data.get("car_color")
    car_number = context.user_data.get("car_number")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    db_generator = get_db()
    db = next(db_generator)
    db_user = db.query(User).filter(User.telegram_id == user.id).first()
    if db_user:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
        update_fields = {}
        if not db_user.car_brand:
            update_fields["car_brand"] = car_brand
        if not db_user.car_color:
            update_fields["car_color"] = car_color
        if not db_user.car_number:
            update_fields["car_number"] = car_number
        # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        UserService.update_user(db_user.id, **update_fields)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ–±–Ω–æ–≤–∏–ª –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è")
    else:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = UserService.create_user(
            telegram_id=user.id,
            name=name,
            username=user.username,
            phone=phone,
            district=district,
            default_role=role,
            car_brand=car_brand,
            car_color=car_color,
            car_number=car_number
        )
        if not success:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
                reply_markup=remove_keyboard()
            )
            return ConversationHandler.END
    context.user_data.clear()
    success_text = (
        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!</b>\n\n"
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ PRYATON.\n\n"
        f"üéÆ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—ã\n"
        f"‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–∞—Ö –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n"
        f"‚Ä¢ –û–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n\n"
        f"üè† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )
    await update.message.reply_text(
        success_text,
        reply_markup=get_contextual_main_keyboard(user.id),
        parse_mode="HTML"
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    
    await update.message.reply_text(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start",
        reply_markup=remove_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    context.user_data.clear()
    
    return ConversationHandler.END 