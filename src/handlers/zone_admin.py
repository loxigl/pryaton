from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from loguru import logger
from typing import List

from src.services.user_service import UserService
from src.services.settings_service import SettingsService
from src.services.zone_management_service import ZoneManagementService
from src.keyboards.reply import get_contextual_main_keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–æ–Ω
ZONE_SELECT_DISTRICT, ZONE_SELECT_ACTION, ZONE_CREATE_NAME, ZONE_CREATE_LAT, ZONE_CREATE_LON, ZONE_CREATE_RADIUS, ZONE_CREATE_DESCRIPTION, ZONE_CONFIRM = range(8)

async def zone_management_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–æ–Ω–∞–º–∏ —Ä–∞–π–æ–Ω–æ–≤"""
    user_id = update.effective_user.id
    
    if not UserService.is_admin(user_id):
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
            reply_markup=get_contextual_main_keyboard(user_id)
        )
        return ConversationHandler.END
    
    return await show_district_selection(update, context)

async def show_district_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–æ–Ω–∞–º–∏"""
    districts = SettingsService.get_districts()
    
    if not districts:
        text = "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Ä–∞–π–æ–Ω–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ä–∞–π–æ–Ω—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."
        if update.callback_query:
            await update.callback_query.edit_message_text(text)
        else:
            await update.message.reply_text(text)
        return ConversationHandler.END
    
    text = "üó∫ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω–∞–º–∏ —Ä–∞–π–æ–Ω–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–æ–Ω–∞–º–∏:"
    
    keyboard = []
    for district in districts:
        keyboard.append([InlineKeyboardButton(
            f"üìç {district}", 
            callback_data=f"zone_district_{district}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="zone_cancel")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text, parse_mode="HTML", reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text, parse_mode="HTML", reply_markup=reply_markup
        )
    
    return ZONE_SELECT_DISTRICT

async def handle_district_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "zone_cancel":
        await query.edit_message_text("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω–∞–º–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    if not query.data.startswith("zone_district_"):
        return ZONE_SELECT_DISTRICT
    
    district_name = query.data.replace("zone_district_", "")
    context.user_data["selected_district"] = district_name
    
    return await show_zone_actions(update, context, district_name)

async def show_zone_actions(update: Update, context: ContextTypes.DEFAULT_TYPE, district_name: str) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–æ–Ω–∞–º–∏ —Ä–∞–π–æ–Ω–∞"""
    zones_info = ZoneManagementService.get_district_zones_info(district_name)
    
    text = f"üó∫ <b>–ó–æ–Ω—ã —Ä–∞–π–æ–Ω–∞: {district_name}</b>\n\n"
    
    if zones_info:
        text += f"üìã <b>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–æ–Ω—ã ({len(zones_info)}):</b>\n\n"
        for zone in zones_info:
            default_mark = " üåü" if zone["is_default"] else ""
            active_mark = "üü¢" if zone["is_active"] else "üî¥"
            text += (
                f"{active_mark} <b>{zone['zone_name']}</b>{default_mark}\n"
                f"   üìç {zone['center_lat']:.4f}, {zone['center_lon']:.4f}\n"
                f"   üìè –†–∞–¥–∏—É—Å: {zone['radius']}–º ({zone['area_km2']} –∫–º¬≤)\n\n"
            )
    else:
        text += "üì≠ –í —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–æ–Ω.\n\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–æ–Ω—É", callback_data="zone_create")],
    ]
    
    if zones_info:
        keyboard.extend([
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–æ–Ω—É", callback_data="zone_edit")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–æ–Ω—É", callback_data="zone_delete")],
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–∫—É", callback_data="zone_test")],
        ])
    else:
        keyboard.append([InlineKeyboardButton("üèó –°–æ–∑–¥–∞—Ç—å –∑–æ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="zone_create_default")])
    
    keyboard.extend([
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ä–∞–π–æ–Ω–∞–º", callback_data="zone_back_districts")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="zone_cancel")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query = update.callback_query
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
    
    return ZONE_SELECT_ACTION

async def handle_zone_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–æ–Ω–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    district_name = context.user_data.get("selected_district")
    
    if query.data == "zone_cancel":
        await query.edit_message_text("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω–∞–º–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    elif query.data == "zone_back_districts":
        return await show_district_selection(update, context)
    elif query.data == "zone_create":
        return await start_zone_creation(update, context)
    elif query.data == "zone_create_default":
        return await create_default_zones(update, context, district_name)
    elif query.data == "zone_edit":
        return await show_zones_for_edit(update, context, district_name)
    elif query.data == "zone_delete":
        return await show_zones_for_delete(update, context, district_name)
    elif query.data == "zone_test":
        return await start_zone_testing(update, context, district_name)
    
    return ZONE_SELECT_ACTION

async def start_zone_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–æ–Ω—ã"""
    query = update.callback_query
    district_name = context.user_data.get("selected_district")
    
    text = (
        f"‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω—ã –¥–ª—è —Ä–∞–π–æ–Ω–∞: {district_name}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã:\n"
        f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞', '–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ', '–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä')"
    )
    
    await query.edit_message_text(text, parse_mode="HTML")
    return ZONE_CREATE_NAME

async def process_zone_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–æ–Ω—ã"""
    zone_name = update.message.text.strip()
    
    if len(zone_name) < 2:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return ZONE_CREATE_NAME
    
    context.user_data["zone_name"] = zone_name
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{zone_name}</b>\n\n"
        f"üìç –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞ –∑–æ–Ω—ã:\n"
        f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: 55.7558)",
        parse_mode="HTML"
    )
    
    return ZONE_CREATE_LAT

async def process_zone_lat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∏—Ä–æ—Ç—ã –∑–æ–Ω—ã"""
    try:
        lat = float(update.message.text.strip())
        if not (-90 <= lat <= 90):
            raise ValueError("–®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90")
        
        context.user_data["zone_lat"] = lat
        
        await update.message.reply_text(
            f"‚úÖ –®–∏—Ä–æ—Ç–∞: <b>{lat}</b>\n\n"
            f"üìç –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞ –∑–æ–Ω—ã:\n"
            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: 37.6176)",
            parse_mode="HTML"
        )
        
        return ZONE_CREATE_LON
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à–∏—Ä–æ—Ç—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç -90 –¥–æ 90\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 55.7558)"
        )
        return ZONE_CREATE_LAT

async def process_zone_lon(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–≥–æ—Ç—ã –∑–æ–Ω—ã"""
    try:
        lon = float(update.message.text.strip())
        if not (-180 <= lon <= 180):
            raise ValueError("–î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -180 –¥–æ 180")
        
        context.user_data["zone_lon"] = lon
        
        await update.message.reply_text(
            f"‚úÖ –î–æ–ª–≥–æ—Ç–∞: <b>{lon}</b>\n\n"
            f"üìè –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å –∑–æ–Ω—ã –≤ –º–µ—Ç—Ä–∞—Ö:\n"
            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –¥–ª—è 1 –∫–º)",
            parse_mode="HTML"
        )
        
        return ZONE_CREATE_RADIUS
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–≥–æ—Ç—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç -180 –¥–æ 180\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 37.6176)"
        )
        return ZONE_CREATE_LON

async def process_zone_radius(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –∑–æ–Ω—ã"""
    try:
        radius = int(update.message.text.strip())
        if radius <= 0:
            raise ValueError("–†–∞–¥–∏—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if radius > 50000:  # 50 –∫–º –º–∞–∫—Å–∏–º—É–º
            raise ValueError("–†–∞–¥–∏—É—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 50000 –º–µ—Ç—Ä–æ–≤")
        
        context.user_data["zone_radius"] = radius
        
        area_km2 = round((3.14159 * (radius / 1000) ** 2), 2)
        
        await update.message.reply_text(
            f"‚úÖ –†–∞–¥–∏—É—Å: <b>{radius} –º–µ—Ç—Ä–æ–≤</b> (–ø–ª–æ—â–∞–¥—å: {area_km2} –∫–º¬≤)\n\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–æ–Ω—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
            f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
            parse_mode="HTML"
        )
        
        return ZONE_CREATE_DESCRIPTION
        
    except ValueError as e:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–¥–∏—É—Å–∞. {str(e)}\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50000"
        )
        return ZONE_CREATE_RADIUS

async def process_zone_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–æ–Ω—ã"""
    description = update.message.text.strip()
    if description == "-":
        description = None
    
    context.user_data["zone_description"] = description
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    zone_name = context.user_data["zone_name"]
    zone_lat = context.user_data["zone_lat"]
    zone_lon = context.user_data["zone_lon"]
    zone_radius = context.user_data["zone_radius"]
    district_name = context.user_data["selected_district"]
    
    area_km2 = round((3.14159 * (zone_radius / 1000) ** 2), 2)
    
    text = (
        f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω—ã</b>\n\n"
        f"üèô <b>–†–∞–π–æ–Ω:</b> {district_name}\n"
        f"üìç <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {zone_name}\n"
        f"üåç <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {zone_lat}, {zone_lon}\n"
        f"üìè <b>–†–∞–¥–∏—É—Å:</b> {zone_radius}–º ({area_km2} –∫–º¬≤)\n"
    )
    
    if description:
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
    
    text += "\n–°–æ–∑–¥–∞—Ç—å —ç—Ç—É –∑–æ–Ω—É?"
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="zone_confirm_create"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="zone_cancel_create")
        ]
    ]
    
    await update.message.reply_text(
        text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return ZONE_CONFIRM

async def handle_zone_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "zone_cancel_create":
        district_name = context.user_data["selected_district"]
        await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∑–æ–Ω–∞–º–∏
        return await show_zone_actions(update, context, district_name)
    
    if query.data == "zone_confirm_create":
        # –°–æ–∑–¥–∞—ë–º –∑–æ–Ω—É
        district_name = context.user_data["selected_district"]
        zone_name = context.user_data["zone_name"]
        zone_lat = context.user_data["zone_lat"]
        zone_lon = context.user_data["zone_lon"]
        zone_radius = context.user_data["zone_radius"]
        zone_description = context.user_data.get("zone_description")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–æ–Ω—ã –≤ —Ä–∞–π–æ–Ω–µ (–µ—Å–ª–∏ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º —ç—Ç—É –∑–æ–Ω–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        existing_zones = ZoneManagementService.get_district_zones_info(district_name)
        is_default = len(existing_zones) == 0
        
        zone = ZoneManagementService.create_district_zone(
            district_name=district_name,
            zone_name=zone_name,
            center_lat=zone_lat,
            center_lon=zone_lon,
            radius=zone_radius,
            description=zone_description,
            is_default=is_default
        )
        
        if zone:
            default_text = " (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –∑–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)" if is_default else ""
            await query.edit_message_text(
                f"‚úÖ <b>–ó–æ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"üìç –ó–æ–Ω–∞ '{zone_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ä–∞–π–æ–Ω–∞ {district_name}{default_text}",
                parse_mode="HTML"
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–æ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        return ConversationHandler.END
    
    return ZONE_CONFIRM

async def create_default_zones(update: Update, context: ContextTypes.DEFAULT_TYPE, district_name: str) -> int:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    query = update.callback_query
    
    success = ZoneManagementService.create_default_zones_for_district(district_name)
    
    if success:
        text = (
            f"‚úÖ <b>–ó–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"–î–ª—è —Ä–∞–π–æ–Ω–∞ '{district_name}' —Å–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –∑–æ–Ω–∞.\n"
            f"‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!"
        )
    else:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–æ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    
    await query.edit_message_text(text, parse_mode="HTML")
    return ConversationHandler.END

async def start_zone_testing(update: Update, context: ContextTypes.DEFAULT_TYPE, district_name: str) -> int:
    """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –≤ –∑–æ–Ω–∞—Ö"""
    query = update.callback_query
    
    text = (
        f"üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–Ω —Ä–∞–π–æ–Ω–∞: {district_name}</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"—à–∏—Ä–æ—Ç–∞,–¥–æ–ª–≥–æ—Ç–∞\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 55.7558,37.6176"
    )
    
    await query.edit_message_text(text, parse_mode="HTML")
    # –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∑–∂–µ
    return ConversationHandler.END

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)
async def show_zones_for_edit(update: Update, context: ContextTypes.DEFAULT_TYPE, district_name: str) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–æ–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.edit_message_text(
        "‚úèÔ∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö."
    )
    return ConversationHandler.END

async def show_zones_for_delete(update: Update, context: ContextTypes.DEFAULT_TYPE, district_name: str) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–æ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.edit_message_text(
        "üóë –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö."
    )
    return ConversationHandler.END

async def cancel_zone_management(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–æ–Ω–∞–º–∏"""
    await update.message.reply_text("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω–∞–º–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# Conversation handler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–æ–Ω–∞–º–∏
zone_management_conversation = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("^üó∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω–∞–º–∏$"), zone_management_command)
    ],
    states={
        ZONE_SELECT_DISTRICT: [
            CallbackQueryHandler(handle_district_selection, pattern="^zone_")
        ],
        ZONE_SELECT_ACTION: [
            CallbackQueryHandler(handle_zone_action, pattern="^zone_")
        ],
        ZONE_CREATE_NAME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, process_zone_name)
        ],
        ZONE_CREATE_LAT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, process_zone_lat)
        ],
        ZONE_CREATE_LON: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, process_zone_lon)
        ],
        ZONE_CREATE_RADIUS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, process_zone_radius)
        ],
        ZONE_CREATE_DESCRIPTION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, process_zone_description)
        ],
        ZONE_CONFIRM: [
            CallbackQueryHandler(handle_zone_confirmation, pattern="^zone_")
        ]
    },
    fallbacks=[
        MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel_zone_management)
    ]
) 