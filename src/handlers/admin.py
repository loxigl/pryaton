from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    CommandHandler, 
    CallbackContext, 
    ConversationHandler, 
    CallbackQueryHandler, 
    MessageHandler, 
    filters
)
from datetime import datetime
import re
from loguru import logger

from src.services.user_service import UserService
from src.services.game_service import GameService
from src.services.settings_service import SettingsService
from src.models.game import GameStatus, GameRole
from src.keyboards.inline import get_admin_game_keyboard
from src.keyboards.reply import get_district_keyboard, get_contextual_main_keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
CREATE_DISTRICT, CREATE_DATE, CREATE_TIME, CREATE_MAX_PARTICIPANTS, CREATE_MAX_DRIVERS, CREATE_DESCRIPTION, CREATE_CONFIRM = range(7)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª
EDIT_RULES = 10

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–π–æ–Ω–æ–≤
DISTRICT_ACTION, ADD_DISTRICT_NAME, REMOVE_DISTRICT_NAME = range(11, 14)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π
ROLE_ACTION, ADD_ROLE_NAME, REMOVE_ROLE_NAME = range(14, 17)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä
EDIT_GAME_FIELD, EDIT_GAME_VALUE, EDIT_GAME_SAVE = range(17, 20)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
EDIT_GAME_DISTRICT_VALUE, EDIT_GAME_DATETIME_VALUE, EDIT_GAME_PARTICIPANTS_VALUE, EDIT_GAME_DRIVERS_VALUE, EDIT_GAME_DESCRIPTION_VALUE = range(20, 25)

# –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤
ADMIN_GAME_PATTERN = r"admin_game_(\d+)"
ADMIN_CANCEL_PATTERN = r"cancel_game_(\d+)"
ADMIN_START_PATTERN = r"start_game_(\d+)"
ADMIN_ASSIGN_ROLES_PATTERN = r"assign_roles_(\d+)"
ADMIN_EDIT_GAME_PATTERN = r"edit_game_(\d+)"
EDIT_DISTRICT_PATTERN = r"edit_district_(\d+)"
EDIT_DATETIME_PATTERN = r"edit_datetime_(\d+)"
EDIT_PARTICIPANTS_PATTERN = r"edit_participants_(\d+)"
EDIT_DRIVERS_PATTERN = r"edit_drivers_(\d+)"
EDIT_DESCRIPTION_PATTERN = r"edit_description_(\d+)"
SET_DISTRICT_PATTERN = r"set_district_(\d+)_(.+)"
SET_PARTICIPANTS_PATTERN = r"set_participants_(\d+)_(\d+)"
SET_DRIVERS_PATTERN = r"set_drivers_(\d+)_(\d+)"

def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    return ReplyKeyboardMarkup([
        ["üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", "üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä"],
        ["üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
        ["üìÖ –°–æ–±—ã—Ç–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞", "üèôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞–º–∏"],
        ["üó∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω–∞–º–∏", "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏"],
        ["üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

def get_admin_or_main_keyboard(user_id: int, admin_context: bool = False) -> ReplyKeyboardMarkup:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        admin_context: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–¥–º–∏–Ω-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    """
    is_admin = UserService.is_admin(user_id)
    
    if is_admin and admin_context:
        return get_admin_keyboard()
    else:
        return get_contextual_main_keyboard(is_admin)

async def admin_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not UserService.is_admin(user_id):
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
            reply_markup=get_admin_or_main_keyboard(user_id, True)
        )
        return ConversationHandler.END
    
    admin_keyboard = get_admin_or_main_keyboard(user_id, True)
    
    await update.message.reply_text(
        "üîë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=admin_keyboard,
        parse_mode="HTML"
    )
    return ConversationHandler.END

async def admin_games_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admingames - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not UserService.is_admin(user_id):
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
            reply_markup=get_admin_or_main_keyboard(user_id, True)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é)
    all_games = GameService.get_upcoming_games(limit=10)
    
    if not all_games:
        await update.message.reply_text(
            "–°–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä.",
            reply_markup=get_admin_or_main_keyboard(user_id, True)
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(
            f"{game.district} - {game.scheduled_at.strftime('%d.%m %H:%M')} ({len(game.participants)}/{game.max_participants})",
            callback_data=f"admin_game_{game.id}"
        )] for game in all_games
    ] + [[InlineKeyboardButton("+ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", callback_data="create_game")]])
    
    await update.message.reply_text(
        "üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä (–∞–¥–º–∏–Ω)</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def admin_game_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–≥—Ä–æ–π –≤ –∞–¥–º–∏–Ω–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ –∫–æ–ª–±—ç–∫–∞
    match = re.match(ADMIN_GAME_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    game = GameService.get_game_by_id(game_id)
    
    if not game:
        await query.edit_message_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        return
    
    # –ì–æ—Ç–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    participants_info = "\n".join([
        f"- {p.user.name} ({p.role.value if p.role else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'})" 
        for p in game.participants
    ]) if game.participants else "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    
    game_info = (
        f"üéÆ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π #{game.id}</b>\n\n"
        f"üìç <b>–†–∞–π–æ–Ω:</b> {game.district}\n"
        f"‚è∞ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {game.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {len(game.participants)}/{game.max_participants}\n"
        f"üö¶ <b>–°—Ç–∞—Ç—É—Å:</b> {game.status.value}\n"
    )
    
    if game.description:
        game_info += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{game.description}\n"
    
    game_info += f"\n<b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n{participants_info}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = get_admin_game_keyboard(game)
    
    await query.edit_message_text(
        game_info,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def cancel_game_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∏–≥—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ –∫–æ–ª–±—ç–∫–∞
    match = re.match(ADMIN_CANCEL_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    
    # –û—Ç–º–µ–Ω—è–µ–º –∏–≥—Ä—É
    success = GameService.cancel_game(game_id, "–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    
    if not success:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="back_to_admin_games")
            ]])
        )
        return
    
    await query.edit_message_text(
        "‚úÖ <b>–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="back_to_admin_games")
        ]]),
        parse_mode="HTML"
    )

async def start_game_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ –∫–æ–ª–±—ç–∫–∞
    match = re.match(ADMIN_START_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    success = GameService.start_game(game_id, "manual")
    
    if not success:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –≤—Å–µ —Ä–æ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")
            ]])
        )
        return
    
    await query.edit_message_text(
        "‚úÖ <b>–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
        "–í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="back_to_admin_games")
        ]]),
        parse_mode="HTML"
    )

async def assign_roles_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ –∫–æ–ª–±—ç–∫–∞
    match = re.match(ADMIN_ASSIGN_ROLES_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏
    roles = GameService.assign_roles(game_id)
    
    if not roles:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤ –∏–≥—Ä–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")
            ]])
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–æ–ª–µ–π
    game = GameService.get_game_by_id(game_id)
    roles_info = "\n".join([
        f"- {p.user.name}: {'üöó –í–æ–¥–∏—Ç–µ–ª—å' if p.role == GameRole.DRIVER else 'üîç –ò—Å–∫–∞—Ç–µ–ª—å'}" 
        for p in game.participants if p.role
    ])
    
    await query.edit_message_text(
        f"‚úÖ <b>–†–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!</b>\n\n"
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</b>\n{roles_info}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")
        ]]),
        parse_mode="HTML"
    )

async def start_game_early_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ –∫–æ–ª–±—ç–∫–∞
    match = re.match(r"start_early_(\d+)", query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ
    success = GameService.start_game(game_id, "early")
    
    if not success:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –≤—Å–µ —Ä–æ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")
            ]])
        )
        return
    
    await query.edit_message_text(
        "‚ö° <b>–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ!</b>\n\n"
        "–í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ä–æ—á–Ω–æ–º –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="back_to_admin_games")
        ]]),
        parse_mode="HTML"
    )

async def edit_game_inline_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ –∫–æ–ª–±—ç–∫–∞
    match = re.match(ADMIN_EDIT_GAME_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    game = GameService.get_game_by_id(game_id)
    
    if not game or not GameService.can_edit_game(game_id):
        await query.edit_message_text(
            "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")
            ]])
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    max_seekers = game.max_participants - game.max_drivers
    game_info = (
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã #{game.id}</b>\n\n"
        f"üìç <b>–†–∞–π–æ–Ω:</b> {game.district}\n"
        f"‚è∞ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {game.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {game.max_participants}\n"
        f"üöó <b>–í–æ–¥–∏—Ç–µ–ª–µ–π:</b> {game.max_drivers}\n"
        f"üîç <b>–ò—Å–∫–∞—Ç–µ–ª–µ–π:</b> {max_seekers}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {game.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω", callback_data=f"edit_district_{game_id}")],
        [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è", callback_data=f"edit_datetime_{game_id}")],
        [InlineKeyboardButton("üë• –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"edit_participants_{game_id}")],
        [InlineKeyboardButton("üöó –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π", callback_data=f"edit_drivers_{game_id}")],
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{game_id}")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")]
    ])
    
    await query.edit_message_text(
        game_info,
        reply_markup=edit_keyboard,
        parse_mode="HTML"
    )

async def edit_district_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    match = re.match(EDIT_DISTRICT_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    game = GameService.get_game_by_id(game_id)
    
    if not game or not GameService.can_edit_game(game_id):
        await query.edit_message_text(
            "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")
            ]])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    districts = SettingsService.get_districts()
    if not districts:
        await query.edit_message_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_game_{game_id}")
            ]])
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–π–æ–Ω–∞–º–∏
    district_buttons = []
    for district in districts:
        district_buttons.append([InlineKeyboardButton(
            f"{'‚úÖ ' if district == game.district else ''}{district}", 
            callback_data=f"set_district_{game_id}_{district}"
        )])
    
    district_buttons.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_game_{game_id}")])
    
    await query.edit_message_text(
        f"üìç <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –¥–ª—è –∏–≥—Ä—ã #{game_id}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–∞–π–æ–Ω: <b>{game.district}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–π–æ–Ω:",
        reply_markup=InlineKeyboardMarkup(district_buttons),
        parse_mode="HTML"
    )

async def edit_datetime_button(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    match = re.match(EDIT_DATETIME_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    game = GameService.get_game_by_id(game_id)
    
    if not game or not GameService.can_edit_game(game_id):
        await query.edit_message_text(
            "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")
            ]])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–≥—Ä—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data["edit_game_id"] = game_id
    
    await query.edit_message_text(
        f"‚è∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–≥—Ä—ã #{game_id}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <b>{game.scheduled_at.strftime('%d.%m.%Y %H:%M')}</b>\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>25.12.2024 18:30</code>",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_game_{game_id}")
        ]]),
        parse_mode="HTML"
    )
    
    return EDIT_GAME_DATETIME_VALUE

async def edit_participants_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    match = re.match(EDIT_PARTICIPANTS_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    game = GameService.get_game_by_id(game_id)
    
    if not game or not GameService.can_edit_game(game_id):
        await query.edit_message_text(
            "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")
            ]])
        )
        return
    
    current_participants = len(game.participants)
    min_participants = max(current_participants, 3)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participant_buttons = []
    for i in range(min_participants, 21):  # –û—Ç –º–∏–Ω–∏–º—É–º–∞ –¥–æ 20
        participant_buttons.append([InlineKeyboardButton(
            f"{'‚úÖ ' if i == game.max_participants else ''}{i} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", 
            callback_data=f"set_participants_{game_id}_{i}"
        )])
    
    participant_buttons.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_game_{game_id}")])
    
    await query.edit_message_text(
        f"üë• <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã #{game_id}</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{game.max_participants}</b>\n"
        f"–£–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ: <b>{current_participants}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:",
        reply_markup=InlineKeyboardMarkup(participant_buttons),
        parse_mode="HTML"
    )

async def edit_drivers_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    match = re.match(EDIT_DRIVERS_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    game = GameService.get_game_by_id(game_id)
    
    if not game or not GameService.can_edit_game(game_id):
        await query.edit_message_text(
            "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")
            ]])
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    driver_buttons = []
    max_drivers = game.max_participants - 1
    for i in range(1, max_drivers + 1):
        seekers = game.max_participants - i
        driver_buttons.append([InlineKeyboardButton(
            f"{'‚úÖ ' if i == game.max_drivers else ''}{i} –≤–æ–¥–∏—Ç–µ–ª–µ–π, {seekers} –∏—Å–∫–∞—Ç–µ–ª–µ–π", 
            callback_data=f"set_drivers_{game_id}_{i}"
        )])
    
    driver_buttons.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_game_{game_id}")])
    
    await query.edit_message_text(
        f"üöó <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –∏–≥—Ä—ã #{game_id}</b>\n\n"
        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{game.max_participants}</b>\n"
        f"–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: <b>{game.max_drivers} –≤–æ–¥–∏—Ç–µ–ª–µ–π, {game.max_participants - game.max_drivers} –∏—Å–∫–∞—Ç–µ–ª–µ–π</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(driver_buttons),
        parse_mode="HTML"
    )

async def edit_description_button(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    match = re.match(EDIT_DESCRIPTION_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    game = GameService.get_game_by_id(game_id)
    
    if not game or not GameService.can_edit_game(game_id):
        await query.edit_message_text(
            "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")
            ]])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–≥—Ä—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data["edit_game_id"] = game_id
    
    current_description = game.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
    
    await query.edit_message_text(
        f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã #{game_id}</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n<i>{current_description}</i>\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_game_{game_id}")
        ]]),
        parse_mode="HTML"
    )
    
    return EDIT_GAME_DESCRIPTION_VALUE

async def back_to_admin_games_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä –≤ –∞–¥–º–∏–Ω–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä
    all_games = GameService.get_upcoming_games(limit=10)
    
    if not all_games:
        await query.edit_message_text(
            "–°–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("+ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", callback_data="create_game")
            ]])
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(
            f"{game.district} - {game.scheduled_at.strftime('%d.%m %H:%M')} ({len(game.participants)}/{game.max_participants})",
            callback_data=f"admin_game_{game.id}"
        )] for game in all_games
    ] + [[InlineKeyboardButton("+ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", callback_data="create_game")]])
    
    await query.edit_message_text(
        "üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä (–∞–¥–º–∏–Ω)</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def create_game_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    await query.edit_message_text(
        "üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É' "
        "–¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.",
        parse_mode="HTML"
    )

async def create_game_command(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not UserService.is_admin(user_id):
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
            reply_markup=get_admin_or_main_keyboard(user_id, True)
        )
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–π–æ–Ω–∞–º–∏
    district_keyboard = get_district_keyboard()
    
    await update.message.reply_text(
        "üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã</b>\n\n"
        "–®–∞–≥ 1/7: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã:",
        reply_markup=district_keyboard,
        parse_mode="HTML"
    )
    
    return CREATE_DISTRICT

async def process_district(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞"""
    district = update.message.text
    context.user_data["game_district"] = district
    
    await update.message.reply_text(
        f"–í—ã–±—Ä–∞–Ω —Ä–∞–π–æ–Ω: {district}\n\n"
        "–®–∞–≥ 2/7: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.06.2025):",
        
        reply_markup=ReplyKeyboardRemove()
    )
    
    return CREATE_DATE

async def process_date(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    date_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    try:
        game_date = datetime.strptime(date_text, "%d.%m.%Y")
        context.user_data["game_date"] = game_date
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.06.2025):"
        )
        return CREATE_DATE
    
    await update.message.reply_text(
        f"–î–∞—Ç–∞: {date_text}\n\n"
        "–®–∞–≥ 3/7: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30):"
    )
    
    return CREATE_TIME

async def process_time(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    time_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    try:
        hour, minute = map(int, time_text.split(":"))
        if hour < 0 or hour > 23 or minute < 0 or minute > 59:
            raise ValueError("Invalid time")
        
        game_date = context.user_data["game_date"]
        game_datetime = game_date.replace(hour=hour, minute=minute)
        context.user_data["game_datetime"] = game_datetime
    except (ValueError, IndexError):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30):"
        )
        return CREATE_TIME
    
    await update.message.reply_text(
        f"–í—Ä–µ–º—è: {time_text}\n\n"
        "–®–∞–≥ 4/7: –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–æ—Ç 3 –¥–æ 20):"
    )
    
    return CREATE_MAX_PARTICIPANTS

async def process_max_participants(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        max_participants = int(update.message.text)
        if max_participants < 3 or max_participants > 20:
            raise ValueError("Invalid number")
        
        context.user_data["max_participants"] = max_participants
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 20:"
        )
        return CREATE_MAX_PARTICIPANTS
    
    await update.message.reply_text(
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {max_participants}\n\n"
        f"–®–∞–≥ 5/7: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–ø—Ä—è—á—É—â–∏—Ö—Å—è) –æ—Ç 1 –¥–æ {max_participants - 1}:"
    )
    
    return CREATE_MAX_DRIVERS

async def process_max_drivers(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    max_participants = context.user_data["max_participants"]
    
    try:
        max_drivers = int(update.message.text)
        if max_drivers < 1 or max_drivers >= max_participants:
            raise ValueError("Invalid number")
        
        context.user_data["max_drivers"] = max_drivers
    except ValueError:
        await update.message.reply_text(
            f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {max_participants - 1}:"
        )
        return CREATE_MAX_DRIVERS
    
    max_seekers = max_participants - max_drivers
    await update.message.reply_text(
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {max_drivers}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫–∞—Ç–µ–ª–µ–π: {max_seekers}\n\n"
        f"–®–∞–≥ 6/7: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    )
    
    return CREATE_DESCRIPTION

async def process_description(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    description = update.message.text
    
    if description == "-":
        description = None
    
    context.user_data["description"] = description
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    district = context.user_data["game_district"]
    game_datetime = context.user_data["game_datetime"]
    max_participants = context.user_data["max_participants"]
    max_drivers = context.user_data["max_drivers"]
    max_seekers = max_participants - max_drivers
    
    confirmation_text = (
        "üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã</b>\n\n"
        f"üìç <b>–†–∞–π–æ–Ω:</b> {district}\n"
        f"‚è∞ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {game_datetime.strftime('%d.%m.%Y %H:%M')}\n"
        f"üë• <b>–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {max_participants}\n"
        f"üöó <b>–í–æ–¥–∏—Ç–µ–ª–∏:</b> {max_drivers}\n"
        f"üîç <b>–ò—Å–∫–∞—Ç–µ–ª–∏:</b> {max_seekers}\n"
    )
    
    if description:
        confirmation_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
    
    confirmation_text += "–í—Å–µ –≤–µ—Ä–Ω–æ? –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É?"
    
    keyboard = ReplyKeyboardMarkup([
        ["‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"]
    ], resize_keyboard=True)
    
    await update.message.reply_text(
        confirmation_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    return CREATE_CONFIRM

async def process_confirmation(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã"""
    confirmation = update.message.text
    
    if confirmation != "‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É":
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_admin_or_main_keyboard(update.effective_user.id, True)
        )
        return ConversationHandler.END
    
    telegram_id = update.effective_user.id
    district = context.user_data["game_district"]
    game_datetime = context.user_data["game_datetime"]
    max_participants = context.user_data["max_participants"]
    max_drivers = context.user_data["max_drivers"]
    description = context.user_data.get("description")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
    user, _ = UserService.get_user_by_telegram_id(telegram_id)
    if not user:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_admin_or_main_keyboard(telegram_id, True)
        )
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user.id
    try:
        game = GameService.create_game(
            district=district,
            max_participants=max_participants,
            max_drivers=max_drivers,
            scheduled_at=game_datetime,
            creator_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user.id –≤–º–µ—Å—Ç–æ telegram_id
            description=description
        )
        
        max_seekers = max_participants - max_drivers
        await update.message.reply_text(
            f"‚úÖ <b>–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"ID –∏–≥—Ä—ã: {game.id}\n"
            f"–†–∞–π–æ–Ω: {game.district}\n"
            f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {game.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {game.max_participants} (üöó {game.max_drivers} –≤–æ–¥–∏—Ç–µ–ª–µ–π, üîç {max_seekers} –∏—Å–∫–∞—Ç–µ–ª–µ–π)\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admingames –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏.",
            reply_markup=get_admin_or_main_keyboard(telegram_id, True),
            parse_mode="HTML"
        )
    except ValueError as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã: {str(e)}",
            reply_markup=get_admin_or_main_keyboard(telegram_id, True)
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã"""
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_admin_or_main_keyboard(update.effective_user.id, True)
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é
async def handle_admin_text(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    text = update.message.text
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not UserService.is_admin(user_id):
        return
    
    if text == "üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä":
        return await admin_games_command(update, context)
    elif text == "üèôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞–º–∏":
        return await manage_districts_command(update, context)
    elif text == "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏":
        return await manage_roles_command(update, context)
    elif text == "üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞":
        return await edit_rules_command(update, context)
    elif text == "¬´ –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        is_admin = UserService.is_admin(user_id)
        await update.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_or_main_keyboard(user_id, False)
        )
        return
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è ConversationHandler'–∞–º–∏
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    return None



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
create_game_conversation = ConversationHandler(
    entry_points=[
        CommandHandler("creategame", create_game_command),
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É"
        MessageHandler(
            filters.TEXT & filters.Regex(r"^üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É$") & ~filters.COMMAND,
            create_game_command
        )
    ],
    states={
        CREATE_DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_district)],
        CREATE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_date)],
        CREATE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_time)],
        CREATE_MAX_PARTICIPANTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_max_participants)],
        CREATE_MAX_DRIVERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_max_drivers)],
        CREATE_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_description)],
        CREATE_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_confirmation)]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)


async def manage_districts_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞–º–∏"""
    user_id = update.effective_user.id
    
    if not UserService.is_admin(user_id):
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
            reply_markup=get_admin_or_main_keyboard(user_id, True)
        )
        return ConversationHandler.END
    
    districts = SettingsService.get_all_districts()
    active_districts = [d for d in districts if d.is_active]
    inactive_districts = [d for d in districts if not d.is_active]
    
    active_text = "\n".join([f"‚Ä¢ {district.name}" for district in active_districts])
    inactive_text = "\n".join([f"‚Ä¢ {district.name}" for district in inactive_districts]) if inactive_districts else "–ù–µ—Ç"
    
    keyboard = ReplyKeyboardMarkup([
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–π–æ–Ω", "‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞–π–æ–Ω"],
        ["üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–π–æ–Ω", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"],
        ["¬´ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É"]
    ], resize_keyboard=True)
    
    await update.message.reply_text(
        f"üèôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞–º–∏</b>\n\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–π–æ–Ω—ã:</b>\n{active_text}\n\n"
        f"<b>–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:</b>\n{inactive_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    return DISTRICT_ACTION

async def manage_roles_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    user_id = update.effective_user.id
    
    if not UserService.is_admin(user_id):
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
            reply_markup=get_admin_or_main_keyboard(user_id, True)
        )
        return ConversationHandler.END
    
    roles = SettingsService.get_all_roles()
    active_roles = [r for r in roles if r.is_active]
    inactive_roles = [r for r in roles if not r.is_active]
    
    active_text = "\n".join([f"‚Ä¢ {role.name}" for role in active_roles])
    inactive_text = "\n".join([f"‚Ä¢ {role.name}" for role in inactive_roles]) if inactive_roles else "–ù–µ—Ç"
    
    keyboard = ReplyKeyboardMarkup([
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å", "‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å"],
        ["üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"],
        ["¬´ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É"]
    ], resize_keyboard=True)
    
    await update.message.reply_text(
        f"üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏</b>\n\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏:</b>\n{active_text}\n\n"
        f"<b>–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:</b>\n{inactive_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    return ROLE_ACTION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–π–æ–Ω–æ–≤
async def district_action_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞–π–æ–Ω–∞–º–∏"""
    text = update.message.text
    
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–π–æ–Ω":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–π–æ–Ω–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return ADD_DISTRICT_NAME
    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞–π–æ–Ω":
        districts = SettingsService.get_districts()
        if not districts:
            await update.message.reply_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=get_admin_or_main_keyboard(update.effective_user.id, True)
            )
            return ConversationHandler.END
        
        keyboard = ReplyKeyboardMarkup(
            [[district] for district in districts] + [["¬´ –û—Ç–º–µ–Ω–∞"]],
            resize_keyboard=True
        )
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:",
            reply_markup=keyboard
        )
        return REMOVE_DISTRICT_NAME
    elif text == "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–π–æ–Ω":
        all_districts = SettingsService.get_all_districts()
        inactive_districts = [d.name for d in all_districts if not d.is_active]
        
        if not inactive_districts:
            await update.message.reply_text(
                "–ù–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.",
                reply_markup=get_admin_or_main_keyboard(update.effective_user.id, True)
            )
            return ConversationHandler.END
        
        keyboard = ReplyKeyboardMarkup(
            [[district] for district in inactive_districts] + [["¬´ –û—Ç–º–µ–Ω–∞"]],
            resize_keyboard=True
        )
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
        context.user_data["restore_district"] = True
        return REMOVE_DISTRICT_NAME
    elif text == "¬´ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É":
        return await admin_command(update, context)
    
    return DISTRICT_ACTION

async def add_district_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞–π–æ–Ω–∞"""
    district_name = update.message.text.strip()
    
    if len(district_name) < 2:
        await update.message.reply_text(
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ADD_DISTRICT_NAME
    
    success = SettingsService.add_district(district_name)
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –†–∞–π–æ–Ω '{district_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
        )
    else:
        await update.message.reply_text(
            f"‚ùå –†–∞–π–æ–Ω '{district_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞–º–∏
    return await manage_districts_command(update, context)

async def remove_district_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞"""
    district_name = update.message.text.strip()
    
    if district_name == "¬´ –û—Ç–º–µ–Ω–∞":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∞–π–æ–Ω–∞–º–∏
        return await manage_districts_command(update, context)
    
    restore_mode = context.user_data.get("restore_district", False)
    
    if restore_mode:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–π–æ–Ω
        success = SettingsService.add_district(district_name)  # –§—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç
        action = "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else:
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–∞–π–æ–Ω
        success = SettingsService.remove_district(district_name)
        action = "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –†–∞–π–æ–Ω '{district_name}' —É—Å–ø–µ—à–Ω–æ {action}!"
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–π–æ–Ω '{district_name}'."
        )
    
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if "restore_district" in context.user_data:
        del context.user_data["restore_district"]
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞–º–∏
    return await manage_districts_command(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–æ–ª–µ–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–∞–π–æ–Ω–∞–º)
async def role_action_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–æ–ª—è–º–∏"""
    text = update.message.text
    
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return ADD_ROLE_NAME
    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å":
        roles = SettingsService.get_available_roles()
        if not roles:
            await update.message.reply_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=get_admin_or_main_keyboard(update.effective_user.id, True)
            )
            return ConversationHandler.END
        
        keyboard = ReplyKeyboardMarkup(
            [[role] for role in roles] + [["¬´ –û—Ç–º–µ–Ω–∞"]],
            resize_keyboard=True
        )
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:",
            reply_markup=keyboard
        )
        return REMOVE_ROLE_NAME
    elif text == "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å":
        all_roles = SettingsService.get_all_roles()
        inactive_roles = [r.name for r in all_roles if not r.is_active]
        
        if not inactive_roles:
            await update.message.reply_text(
                "–ù–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.",
                reply_markup=get_admin_or_main_keyboard(update.effective_user.id, True)
            )
            return ConversationHandler.END
        
        keyboard = ReplyKeyboardMarkup(
            [[role] for role in inactive_roles] + [["¬´ –û—Ç–º–µ–Ω–∞"]],
            resize_keyboard=True
        )
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
        context.user_data["restore_role"] = True
        return REMOVE_ROLE_NAME
    elif text == "¬´ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É":
        return await admin_command(update, context)
    
    return ROLE_ACTION

async def add_role_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏"""
    role_name = update.message.text.strip()
    
    if len(role_name) < 2:
        await update.message.reply_text(
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ADD_ROLE_NAME
    
    success = SettingsService.add_role(role_name)
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –†–æ–ª—å '{role_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
        )
    else:
        await update.message.reply_text(
            f"‚ùå –†–æ–ª—å '{role_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
    return await manage_roles_command(update, context)

async def remove_role_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏"""
    role_name = update.message.text.strip()
    
    if role_name == "¬´ –û—Ç–º–µ–Ω–∞":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–æ–ª—è–º–∏
        return await manage_roles_command(update, context)
    
    restore_mode = context.user_data.get("restore_role", False)
    
    if restore_mode:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å
        success = SettingsService.add_role(role_name)  # –§—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç
        action = "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    else:
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–æ–ª—å
        success = SettingsService.remove_role(role_name)
        action = "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –†–æ–ª—å '{role_name}' —É—Å–ø–µ—à–Ω–æ {action}!"
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–æ–ª—å '{role_name}'."
        )
    
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if "restore_role" in context.user_data:
        del context.user_data["restore_role"]
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
    return await manage_roles_command(update, context)

async def edit_rules_command(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª"""
    user_id = update.effective_user.id
    
    if not UserService.is_admin(user_id):
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
            reply_markup=get_admin_or_main_keyboard(user_id, True)
        )
        return ConversationHandler.END
    
    current_rules = SettingsService.get_game_rules()
    
    await update.message.reply_text(
        f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:</b>\n\n{current_rules}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return EDIT_RULES

async def process_new_rules(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª"""
    new_rules = update.message.text
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    success = SettingsService.update_game_rules(new_rules)
    
    if success:
        await update.message.reply_text(
            "‚úÖ <b>–ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            "–ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=get_admin_or_main_keyboard(user_id, True),
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª.</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            reply_markup=get_admin_or_main_keyboard(user_id, True),
            parse_mode="HTML"
        )
    
    return ConversationHandler.END

async def cancel_admin_operation(update: Update, context: CallbackContext) -> int:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    admin_keyboard = get_admin_or_main_keyboard(user_id, True)
    
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\nüîë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard,
        parse_mode="HTML"
    )
    
    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª
edit_rules_conversation = ConversationHandler(
    entry_points=[
        MessageHandler(
            filters.TEXT & filters.Regex(r"^üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞$") & ~filters.COMMAND,
            edit_rules_command
        )
    ],
    states={
        EDIT_RULES: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_new_rules)]
    },
    fallbacks=[CommandHandler("cancel", cancel_admin_operation)]
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞–º–∏
districts_conversation = ConversationHandler(
    entry_points=[
        MessageHandler(
            filters.TEXT & filters.Regex(r"^üèôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞–º–∏$") & ~filters.COMMAND,
            manage_districts_command
        )
    ],
    states={
        DISTRICT_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, district_action_handler)],
        ADD_DISTRICT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_district_handler)],
        REMOVE_DISTRICT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_district_handler)]
    },
    fallbacks=[CommandHandler("cancel", cancel_admin_operation)]
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
roles_conversation = ConversationHandler(
    entry_points=[
        MessageHandler(
            filters.TEXT & filters.Regex(r"^üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏$") & ~filters.COMMAND,
            manage_roles_command
        )
    ],
    states={
        ROLE_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, role_action_handler)],
        ADD_ROLE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_role_handler)],
        REMOVE_ROLE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_role_handler)]
    },
    fallbacks=[CommandHandler("cancel", cancel_admin_operation)]
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä—ã

async def process_datetime_edit(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    game_id = context.user_data.get("edit_game_id")
    if not game_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
    datetime_text = update.message.text.strip()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        new_datetime = datetime.strptime(datetime_text, "%d.%m.%Y %H:%M")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        success = GameService.update_game(game_id, scheduled_at=new_datetime)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!</b>\n\n"
                f"–ù–æ–≤—ã–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <b>{new_datetime.strftime('%d.%m.%Y %H:%M')}</b>",
                parse_mode="HTML"
            )
        else:
            await update.message.reply_text(
                f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.</b>",
                parse_mode="HTML"
            )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 18:30"
        )
        return EDIT_GAME_DATETIME_VALUE
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return ConversationHandler.END

async def process_description_edit(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    game_id = context.user_data.get("edit_game_id")
    if not game_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
    description_text = update.message.text.strip()
    
    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω -, —É–¥–∞–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if description_text == "-":
        description_text = None
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    success = GameService.update_game(game_id, description=description_text)
    
    if success:
        if description_text:
            await update.message.reply_text(
                f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
                f"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <i>{description_text}</i>",
                parse_mode="HTML"
            )
        else:
            await update.message.reply_text(
                f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!</b>",
                parse_mode="HTML"
            )
    else:
        await update.message.reply_text(
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.</b>",
            parse_mode="HTML"
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return ConversationHandler.END

async def set_district_value(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞–π–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    match = re.match(SET_DISTRICT_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    new_district = match.group(2)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    success = GameService.update_game(game_id, district=new_district)
    
    if success:
        await query.edit_message_text(
            f"‚úÖ <b>–†–∞–π–æ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"–ù–æ–≤—ã–π —Ä–∞–π–æ–Ω: <b>{new_district}</b>",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_game_{game_id}")],
                [InlineKeyboardButton("¬´ –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")]
            ]),
            parse_mode="HTML"
        )
    else:
        await query.edit_message_text(
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω.</b>",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_game_{game_id}")
            ]]),
            parse_mode="HTML"
        )

async def set_participants_value(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    match = re.match(SET_PARTICIPANTS_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    new_count = int(match.group(2))
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    success = GameService.update_game(game_id, max_participants=new_count)
    
    if success:
        await query.edit_message_text(
            f"‚úÖ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
            f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{new_count}</b>",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_game_{game_id}")],
                [InlineKeyboardButton("¬´ –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")]
            ]),
            parse_mode="HTML"
        )
    else:
        await query.edit_message_text(
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.</b>",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_game_{game_id}")
            ]]),
            parse_mode="HTML"
        )

async def set_drivers_value(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    match = re.match(SET_DRIVERS_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    new_drivers = int(match.group(2))
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    success = GameService.update_game(game_id, max_drivers=new_drivers)
    
    if success:
        game = GameService.get_game_by_id(game_id)
        seekers = game.max_participants - new_drivers
        await query.edit_message_text(
            f"‚úÖ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
            f"–ù–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: <b>{new_drivers} –≤–æ–¥–∏—Ç–µ–ª–µ–π, {seekers} –∏—Å–∫–∞—Ç–µ–ª–µ–π</b>",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_game_{game_id}")],
                [InlineKeyboardButton("¬´ –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π", callback_data=f"admin_game_{game_id}")]
            ]),
            parse_mode="HTML"
        )
    else:
        await query.edit_message_text(
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π.</b>",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_game_{game_id}")
            ]]),
            parse_mode="HTML"
        )

edit_game_fields_conversation = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(edit_datetime_button, pattern=EDIT_DATETIME_PATTERN),
        CallbackQueryHandler(edit_description_button, pattern=EDIT_DESCRIPTION_PATTERN)
    ],
    states={
        EDIT_GAME_DATETIME_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_datetime_edit)],
        EDIT_GAME_DESCRIPTION_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_description_edit)]
    },
    fallbacks=[CommandHandler("cancel", cancel_admin_operation)]
)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π
admin_handlers = [
    CommandHandler("admin", admin_command),
    CommandHandler("admingames", admin_games_command),
    CallbackQueryHandler(admin_game_button, pattern=ADMIN_GAME_PATTERN),
    CallbackQueryHandler(cancel_game_button, pattern=ADMIN_CANCEL_PATTERN),
    CallbackQueryHandler(start_game_button, pattern=ADMIN_START_PATTERN),
    CallbackQueryHandler(start_game_early_button, pattern=r"start_early_\d+"),
    CallbackQueryHandler(assign_roles_button, pattern=ADMIN_ASSIGN_ROLES_PATTERN),
    CallbackQueryHandler(back_to_admin_games_button, pattern="back_to_admin_games"),
    CallbackQueryHandler(create_game_button, pattern="create_game"),
    CallbackQueryHandler(edit_game_inline_button, pattern=ADMIN_EDIT_GAME_PATTERN),
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∏–≥—Ä—ã
    CallbackQueryHandler(edit_district_button, pattern=EDIT_DISTRICT_PATTERN),

    CallbackQueryHandler(edit_participants_button, pattern=EDIT_PARTICIPANTS_PATTERN),
    CallbackQueryHandler(edit_drivers_button, pattern=EDIT_DRIVERS_PATTERN),

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    CallbackQueryHandler(set_district_value, pattern=SET_DISTRICT_PATTERN),
    CallbackQueryHandler(set_participants_value, pattern=SET_PARTICIPANTS_PATTERN),
    CallbackQueryHandler(set_drivers_value, pattern=SET_DRIVERS_PATTERN),
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è ConversationHandler)
    MessageHandler(
        filters.TEXT & 
        filters.Regex(r"^(üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä|¬´ –ù–∞–∑–∞–¥)$") & 
        ~filters.COMMAND, 
        handle_admin_text
    )
]