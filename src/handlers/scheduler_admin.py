import os
import pytz
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, CallbackContext, CallbackQueryHandler
from datetime import datetime, timezone, timedelta
import re
from loguru import logger

from src.models.game import GameRole, GameStatus
from src.services.user_service import UserService
from src.services.game_service import GameService
from src.services.enhanced_scheduler_service import get_enhanced_scheduler
from src.services.event_persistence_service import EventPersistenceService
from src.keyboards.reply import get_contextual_main_keyboard, get_district_keyboard
from src.handlers.admin import get_admin_keyboard, get_admin_or_main_keyboard,ConversationHandler
from src.models.base import get_db

DEFAULT_TIMEZONE = pytz.timezone(os.getenv("TIMEZONE", "Europe/Moscow"))

def format_msk_time(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –ú–°–ö"""
    msk_time = dt.astimezone(DEFAULT_TIMEZONE)
    return msk_time.strftime('%H:%M')

def format_msk_datetime(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ú–°–ö"""
    msk_time = dt.astimezone(DEFAULT_TIMEZONE)
    return msk_time.strftime('%d.%m.%Y %H:%M')

async def scheduler_monitor_command(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /scheduler_monitor - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not UserService.is_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    scheduler = get_enhanced_scheduler()
    if not scheduler:
        await update.message.reply_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏—è—Ö
    events_info = scheduler.get_scheduled_events_info()
    events_by_game = events_info["events_by_game"]
    stats = events_info["statistics"]
    scheduler_jobs = events_info["scheduler_jobs"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    report_text = (
        f"‚è∞ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats.get('total', 0)}\n"
        f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('executed', 0)}\n"
        f"‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('pending', 0)}\n"
        f"‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats.get('overdue', 0)}\n"
        f"‚Ä¢ –ó–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {scheduler_jobs}\n\n"
    )
    
    if events_by_game:
        report_text += "üéÆ <b>–°–æ–±—ã—Ç–∏—è –ø–æ –∏–≥—Ä–∞–º:</b>\n\n"
        
        for game_id, events in list(events_by_game.items())[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–≥—Ä
            game = GameService.get_game_by_id(game_id)
            game_name = f"–ò–≥—Ä–∞ #{game_id}"
            if game:
                game_name = f"{game.district} ({format_msk_datetime(game.scheduled_at)})"
            
            report_text += f"üéØ <b>{game_name}</b>\n"
            
            for event in events[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–æ–±—ã—Ç–∏—è
                emoji = "‚úÖ" if event.is_executed else "‚è≥"
                if event.is_overdue:
                    emoji = "‚ö†Ô∏è"
                
                event_name = event.event_type.replace("_", " ").title()
                time_str = format_msk_datetime(event.scheduled_at)
                
                report_text += f"  {emoji} {event_name} ‚Üí {time_str}\n"
            
            if len(events) > 3:
                report_text += f"  ... –∏ –µ—â–µ {len(events) - 3} —Å–æ–±—ã—Ç–∏–π\n"
            
            report_text += "\n"
    else:
        report_text += "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="scheduler_refresh"),
            InlineKeyboardButton("üìã –í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data="scheduler_all_events")
        ],
        [
            InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ", callback_data="scheduler_cleanup"),
            InlineKeyboardButton("üß™ –¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è", callback_data="scheduler_test")
        ]
    ])
    
    await update.message.reply_text(
        report_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


async def scheduler_refresh_button(update: Update, context: CallbackContext) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
    query = update.callback_query
    await query.answer("–û–±–Ω–æ–≤–ª—è–µ–º...")
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    scheduler = get_enhanced_scheduler()
    if not scheduler:
        await query.edit_message_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    events_info = scheduler.get_scheduled_events_info()
    events_by_game = events_info["events_by_game"]
    stats = events_info["statistics"]
    scheduler_jobs = events_info["scheduler_jobs"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    report_text = (
        f"‚è∞ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {datetime.now().strftime('%H:%M:%S')})\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats.get('total', 0)}\n"
        f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('executed', 0)}\n"
        f"‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('pending', 0)}\n"
        f"‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats.get('overdue', 0)}\n"
        f"‚Ä¢ –ó–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {scheduler_jobs}\n\n"
    )
    
    if events_by_game:
        report_text += "üéÆ <b>–°–æ–±—ã—Ç–∏—è –ø–æ –∏–≥—Ä–∞–º:</b>\n\n"
        
        for game_id, events in list(events_by_game.items())[:5]:
            game = GameService.get_game_by_id(game_id)
            game_name = f"–ò–≥—Ä–∞ #{game_id}"
            if game:
                game_name = f"{game.district} ({game.scheduled_at.strftime('%d.%m %H:%M')})"
            
            report_text += f"üéØ <b>{game_name}</b>\n"
            
            for event in events[:3]:
                emoji = "‚úÖ" if event.is_executed else "‚è≥"
                if event.is_overdue:
                    emoji = "‚ö†Ô∏è"
                
                event_name = event.event_type.replace("_", " ").title()
                time_str = event.scheduled_at.strftime('%d.%m %H:%M')
                
                report_text += f"  {emoji} {event_name} ‚Üí {time_str}\n"
            
            if len(events) > 3:
                report_text += f"  ... –∏ –µ—â–µ {len(events) - 3} —Å–æ–±—ã—Ç–∏–π\n"
            
            report_text += "\n"
    else:
        report_text += "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n"
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="scheduler_refresh"),
            InlineKeyboardButton("üìã –í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data="scheduler_all_events")
        ],
        [
            InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ", callback_data="scheduler_cleanup"),
            InlineKeyboardButton("üß™ –¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è", callback_data="scheduler_test")
        ]
    ])
    
    await query.edit_message_text(
        report_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


async def scheduler_all_events_button(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    pending_events = EventPersistenceService.get_pending_events()
    
    if not pending_events:
        await query.edit_message_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –∏–≥—Ä–∞–º
    events_by_game = {}
    for event in pending_events:
        if event.game_id not in events_by_game:
            events_by_game[event.game_id] = []
        events_by_game[event.game_id].append(event)
    
    report_text = f"üìã <b>–í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</b> ({len(pending_events)})\n\n"
    
    for game_id, events in events_by_game.items():
        game = GameService.get_game_by_id(game_id)
        game_name = f"–ò–≥—Ä–∞ #{game_id}"
        if game:
            game_name = f"{game.district} ({game.scheduled_at.strftime('%d.%m %H:%M')})"
        
        report_text += f"üéÆ <b>{game_name}</b>\n"
        
        for event in sorted(events, key=lambda x: x.scheduled_at):
            emoji = "‚è≥"
            if event.is_overdue:
                emoji = "‚ö†Ô∏è"
            
            event_name = event.event_type.replace("_", " ").title()
            time_str = event.scheduled_at.strftime('%d.%m %H:%M')
            
            report_text += f"  {emoji} {event_name} ‚Üí {time_str}\n"
        
        report_text += "\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(report_text) > 3500:
            report_text += "... (–ø–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è)\n"
            break
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="scheduler_refresh")]
    ])
    
    await query.edit_message_text(
        report_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


async def scheduler_cleanup_button(update: Update, context: CallbackContext) -> None:
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    query = update.callback_query
    await query.answer("–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è...")
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
    deleted_count = EventPersistenceService.cleanup_old_events(days_old=7)
    
    await query.edit_message_text(
        f"üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
        f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π: {deleted_count}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="scheduler_refresh")]
        ]),
        parse_mode="HTML"
    )


async def scheduler_test_button(update: Update, context: CallbackContext) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏—è", callback_data="scheduler_test_restore"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="scheduler_test_stats")
        ],
        [
            InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ", callback_data="scheduler_test_overdue"),
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="scheduler_refresh")
        ]
    ])
    
    current_time = datetime.now().strftime('%H:%M:%S')
    await query.edit_message_text(
        f"üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞</b> ({current_time})\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


async def scheduler_test_restore_button(update: Update, context: CallbackContext) -> None:
    """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
    query = update.callback_query
    await query.answer("–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è...")
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    scheduler = get_enhanced_scheduler()
    if not scheduler:
        await query.edit_message_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        scheduler._restore_events_from_db()
        
        events_info = scheduler.get_scheduled_events_info()
        scheduler_jobs = events_info["scheduler_jobs"]
        
        await query.edit_message_text(
            f"‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n"
            f"–ó–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {scheduler_jobs}\n\n"
            f"–°–æ–±—ã—Ç–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –ë–î.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="scheduler_test")]
            ]),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="scheduler_test")]
            ]),
            parse_mode="HTML"
        )


async def scheduler_test_stats_button(update: Update, context: CallbackContext) -> None:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    stats = EventPersistenceService.get_events_statistics()
    
    report_text = (
        f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π</b>\n\n"
        f"üìà <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ –ë–î: {stats.get('total', 0)}\n"
        f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {stats.get('executed', 0)}\n"
        f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('pending', 0)}\n"
        f"‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {stats.get('overdue', 0)}\n\n"
    )
    
    if stats.get('total', 0) > 0:
        executed_percent = round((stats.get('executed', 0) / stats.get('total', 1)) * 100, 1)
        overdue_percent = round((stats.get('overdue', 0) / stats.get('total', 1)) * 100, 1)
        
        report_text += (
            f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {executed_percent}%\n"
            f"‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {overdue_percent}%\n"
        )
    
    await query.edit_message_text(
        report_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="scheduler_test")]
        ]),
        parse_mode="HTML"
    )


async def scheduler_test_overdue_button(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    query = update.callback_query
    await query.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è...")
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    pending_events = EventPersistenceService.get_pending_events()
    overdue_events = [e for e in pending_events if e.is_overdue]
    
    if not overdue_events:
        await query.edit_message_text(
            "‚úÖ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç</b>\n\n"
            "–í—Å–µ —Å–æ–±—ã—Ç–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="scheduler_test")]
            ]),
            parse_mode="HTML"
        )
        return
    
    report_text = f"‚ö†Ô∏è <b>–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {len(overdue_events)}</b>\n\n"
    
    for event in overdue_events[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        game = GameService.get_game_by_id(event.game_id)
        game_name = f"–ò–≥—Ä–∞ #{event.game_id}"
        if game:
            game_name = f"{game.district}"
        
        event_name = event.event_type.replace("_", " ").title()
        time_str = event.scheduled_at.strftime('%d.%m %H:%M')
        overdue_hours = int((datetime.now() - event.scheduled_at).total_seconds() / 3600)
        
        report_text += f"‚Ä¢ {game_name}: {event_name}\n"
        report_text += f"  –î–æ–ª–∂–Ω–æ –±—ã–ª–æ: {time_str} (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {overdue_hours}—á)\n\n"
    
    if len(overdue_events) > 10:
        report_text += f"... –∏ –µ—â–µ {len(overdue_events) - 10} —Å–æ–±—ã—Ç–∏–π\n\n"
    
    report_text += "üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏", callback_data="scheduler_mark_overdue")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="scheduler_test")]
    ])
    
    await query.edit_message_text(
        report_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


async def scheduler_mark_overdue_button(update: Update, context: CallbackContext) -> None:
    """–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"""
    query = update.callback_query
    await query.answer("–û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è...")
    
    user_id = query.from_user.id
    if not UserService.is_admin(user_id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    pending_events = EventPersistenceService.get_pending_events()
    overdue_events = [e for e in pending_events if e.is_overdue]
    
    if not overdue_events:
        await query.edit_message_text(
            "‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="scheduler_test")]
            ])
        )
        return
    
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    marked_count = 0
    for event in overdue_events:
        if EventPersistenceService.mark_event_executed(event.id):
            marked_count += 1
    
    await query.edit_message_text(
        f"‚úÖ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã</b>\n\n"
        f"–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {marked_count} –∏–∑ {len(overdue_events)}\n\n"
        f"–°–æ–±—ã—Ç–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="scheduler_test")]
        ]),
        parse_mode="HTML"
    )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_scheduler_admin_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∞–¥–º–∏–Ω–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    
    # –ö–æ–º–∞–Ω–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    application.add_handler(CommandHandler("scheduler_monitor", scheduler_monitor_command))
    
    # Callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CallbackQueryHandler(scheduler_refresh_button, pattern="scheduler_refresh"))
    application.add_handler(CallbackQueryHandler(scheduler_all_events_button, pattern="scheduler_all_events"))
    application.add_handler(CallbackQueryHandler(scheduler_cleanup_button, pattern="scheduler_cleanup"))
    application.add_handler(CallbackQueryHandler(scheduler_test_button, pattern="scheduler_test"))
    application.add_handler(CallbackQueryHandler(scheduler_test_restore_button, pattern="scheduler_test_restore"))
    application.add_handler(CallbackQueryHandler(scheduler_test_stats_button, pattern="scheduler_test_stats"))
    application.add_handler(CallbackQueryHandler(scheduler_test_overdue_button, pattern="scheduler_test_overdue"))
    application.add_handler(CallbackQueryHandler(scheduler_mark_overdue_button, pattern="scheduler_mark_overdue"))