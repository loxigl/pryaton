from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters, CallbackQueryHandler
from loguru import logger
from datetime import datetime
import os

from src.services.user_service import UserService
from src.services.game_service import GameService
from src.services.location_service import LocationService
from src.models.game import GameStatus
from src.keyboards.reply import get_contextual_main_keyboard

async def request_location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, _ = UserService.get_user_by_telegram_id(user_id)
    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
    active_games = GameService.get_user_active_games(user.id)
    
    if not active_games:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.",
            reply_markup=get_contextual_main_keyboard(user_id)
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    location_button = KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    back_button = KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    keyboard = ReplyKeyboardMarkup([[location_button], [back_button]], resize_keyboard=True)
    
    location_text = (
        f"üìç <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</b>\n\n"
        f"–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã:</b>\n"
    )
    
    for game in active_games:
        location_text += f"‚Ä¢ {game.district}, {game.scheduled_at.strftime('%d.%m %H:%M')}\n"
    
    location_text += f"\nüì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:"
    
    await update.message.reply_text(
        location_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    if not update.message.location:
        await update.message.reply_text("‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    location = update.message.location
    latitude = location.latitude
    longitude = location.longitude
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {latitude}, {longitude}")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, _ = UserService.get_user_by_telegram_id(user_id)
    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_games = GameService.get_user_active_games(user.id)
    
    if not active_games:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä.",
            reply_markup=get_contextual_main_keyboard(user_id)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
    saved_count = 0
    for game in active_games:
        if LocationService.save_user_location(user.id, game.id, latitude, longitude):
            saved_count += 1
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            await notify_admins_about_location(context, user, game, latitude, longitude)
    
    if saved_count > 0:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–æ–≤–æ–π –∑–æ–Ω–µ
        in_zone_games = []
        out_zone_games = []
        
        for game in active_games:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–æ–Ω—ã
            if LocationService.is_user_in_game_zone(user.id, game.id):
                in_zone_games.append(game)
            else:
                out_zone_games.append(game)
        
        success_text = f"‚úÖ <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
        success_text += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude:.6f}, {longitude:.6f}\n"
        success_text += f"üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–≥—Ä: {saved_count}\n\n"
        
        if in_zone_games:
            success_text += f"üü¢ <b>–í—ã –≤ –∏–≥—Ä–æ–≤–æ–π –∑–æ–Ω–µ:</b>\n"
            for game in in_zone_games:
                zone_info = ""
                if game.has_game_zone:
                    zone_info = f" (—Ä–∞–¥–∏—É—Å {game.zone_radius}–º)"
                success_text += f"‚Ä¢ {game.district}{zone_info}\n"
            
            if out_zone_games:
                success_text += f"\nüü° <b>–í–Ω–µ –∏–≥—Ä–æ–≤–æ–π –∑–æ–Ω—ã:</b>\n"
                for game in out_zone_games:
                    zone_info = ""
                    if game.has_game_zone:
                        zone_info = f" (—Ä–∞–¥–∏—É—Å {game.zone_radius}–º)"
                    success_text += f"‚Ä¢ {game.district}{zone_info}\n"
                success_text += f"–ü—Ä–∏–±–ª–∏–∂–∞–π—Ç–µ—Å—å –∫ –∑–æ–Ω–µ –∏–≥—Ä—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è."
        else:
            success_text += f"üü° <b>–í—ã –ø–æ–∫–∞ –Ω–µ –≤ –∏–≥—Ä–æ–≤—ã—Ö –∑–æ–Ω–∞—Ö</b>\n"
            success_text += f"–ü—Ä–∏–±–ª–∏–∂–∞–π—Ç–µ—Å—å –∫ –º–µ—Å—Ç–∞–º –∏–≥—Ä –¥–ª—è —É—á–∞—Å—Ç–∏—è."
        
        await update.message.reply_text(
            success_text,
            reply_markup=get_contextual_main_keyboard(user_id),
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_contextual_main_keyboard(user_id)
        )

async def show_game_map(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –∏–≥—Ä—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    query = update.callback_query
    if query:
        await query.answer()
        user_id = query.from_user.id
    else:
        user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not UserService.is_admin(user_id):
        text = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        if query:
            await query.edit_message_text(text)
        else:
            await update.message.reply_text(text)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä—ã
    game_id = None
    if context.args and len(context.args) > 0:
        try:
            game_id = int(context.args[0])
        except ValueError:
            pass
    
    if not game_id:
        text = "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –∏–≥—Ä—ã."
        if query:
            await query.edit_message_text(text)
        else:
            await update.message.reply_text(text)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É
    game = GameService.get_game_by_id(game_id)
    if not game:
        text = "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        if query:
            await query.edit_message_text(text)
        else:
            await update.message.reply_text(text)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants_locations = LocationService.get_game_participants_locations(game_id)
    
    map_text = (
        f"üó∫ <b>–ö–∞—Ä—Ç–∞ –∏–≥—Ä—ã #{game_id}</b>\n\n"
        f"üìç <b>–†–∞–π–æ–Ω:</b> {game.district}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {game.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üö¶ <b>–°—Ç–∞—Ç—É—Å:</b> {game.status.value}\n\n"
        f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:</b>\n"
    )
    
    if participants_locations:
        for i, (user_info, location) in enumerate(participants_locations, 1):
            map_text += (
                f"{i}. {user_info.name} ({user_info.default_role.value})\n"
                f"   üìç {location.latitude:.6f}, {location.longitude:.6f}\n"
                f"   üïê {location.created_at.strftime('%H:%M:%S')}\n\n"
            )
    else:
        map_text += "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π.\n"
    
    if query:
        await query.edit_message_text(map_text, parse_mode="HTML")
    else:
        await update.message.reply_text(map_text, parse_mode="HTML")

async def notify_admins_about_location(context: ContextTypes.DEFAULT_TYPE, user, game, latitude: float, longitude: float) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        admins = UserService.get_admin_users()
        
        if not admins:
            logger.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = next(
            (p for p in game.participants if p.user_id == user.id),
            None
        )
        
        role_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å"
        if participant and participant.role:
            role_text = "üöó –í–æ–¥–∏—Ç–µ–ª—å" if participant.role.value == 'driver' else "üîç –ò—Å–∫–∞—Ç–µ–ª—å"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        location_text = (
            f"üìç <b>–ù–æ–≤–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è!</b>\n\n"
            f"üë§ <b>–û—Ç:</b> {user.name}\n"
            f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
            f"üé≠ <b>–†–æ–ª—å:</b> {role_text}\n"
            f"üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}\n\n"
            f"üåê <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {latitude:.6f}, {longitude:.6f}\n"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–æ–≤–æ–π –∑–æ–Ω–µ
        in_zone = LocationService.is_user_in_game_zone(user.id, game.id)
        location_text += f"üéØ <b>–í –∏–≥—Ä–æ–≤–æ–π –∑–æ–Ω–µ:</b> {'‚úÖ' if in_zone else '‚ùå'}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin in admins:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
                await context.bot.send_location(
                    chat_id=admin.telegram_id,
                    latitude=latitude,
                    longitude=longitude
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                await context.bot.send_message(
                    chat_id=admin.telegram_id,
                    text=location_text,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin.telegram_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
location_handlers = [
    MessageHandler(filters.LOCATION, handle_location),
    MessageHandler(filters.Regex("^üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é$"), request_location_handler),
] 