from telegram import Update
from telegram.ext import ContextTypes
from loguru import logger

from src.services.user_context_service import UserContextService
from src.services.game_service import GameService
from src.keyboards.reply import get_contextual_main_keyboard, get_game_location_keyboard
from src.keyboards.inline import get_game_actions_keyboard

async def handle_my_game_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –∏–≥—Ä–∞' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    try:
        game_context = UserContextService.get_user_game_context(user_id)
        
        if not game_context.game:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä",
                reply_markup=get_contextual_main_keyboard(user_id)
            )
            return
        
        game = game_context.game
        participant = game_context.participant
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
        game_info = (
            f"üéÆ <b>–í–∞—à–∞ –∏–≥—Ä–∞</b>\n\n"
            f"üìç <b>–†–∞–π–æ–Ω:</b> {game.district}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {game.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {get_game_status_text(game.status)}\n"
            f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {len(game.participants)}/{game.max_participants}\n"
        )
        
        if participant and participant.role:
            game_info += f"üé≠ <b>–í–∞—à–∞ —Ä–æ–ª—å:</b> {get_role_text(participant.role)}\n"
        
        if game.description:
            game_info += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{game.description}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
        if game_context.status == UserContextService.STATUS_REGISTERED:
            game_info += f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã"
        elif game_context.status == UserContextService.STATUS_IN_GAME:
            game_info += f"\nüî• –ò–≥—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!"
            if game.started_at:
                game_info += f"\nüöÄ –ù–∞—á–∞—Ç–∞: {game.started_at.strftime('%H:%M')}"
        elif game_context.status == UserContextService.STATUS_GAME_FINISHED:
            game_info += f"\n‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            if game.ended_at:
                game_info += f"\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {game.ended_at.strftime('%H:%M')}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = get_game_actions_keyboard(game, is_participant=True)
        
        await update.message.reply_text(
            game_info,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –∏–≥—Ä–∞' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ",
            reply_markup=get_contextual_main_keyboard(user_id)
        )

async def handle_game_status_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã"""
    user_id = update.effective_user.id
    
    try:
        game_context = UserContextService.get_user_game_context(user_id)
        
        if not game_context.game:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä",
                reply_markup=get_contextual_main_keyboard(user_id)
            )
            return
        
        game = game_context.game
        participants = game.participants
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        status_info = (
            f"üìä <b>–°–¢–ê–¢–£–° –ò–ì–†–´</b>\n\n"
            f"üéÆ <b>–ò–≥—Ä–∞ #{game.id}</b>\n"
            f"üìç <b>–†–∞–π–æ–Ω:</b> {game.district}\n"
            f"üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {get_game_status_text(game.status)}\n"
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
        if game.scheduled_at:
            status_info += f"‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞:</b> {game.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
        if game.started_at:
            status_info += f"üöÄ <b>–ù–∞—á–∞—Ç–∞:</b> {game.started_at.strftime('%d.%m.%Y %H:%M')}\n"
        if game.ended_at:
            status_info += f"üèÅ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> {game.ended_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
        status_info += f"\nüë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(participants)}/{game.max_participants}):</b>\n"
        
        drivers = [p for p in participants if p.role and p.role.value == 'driver']
        seekers = [p for p in participants if p.role and p.role.value == 'seeker']
        no_role = [p for p in participants if not p.role]
        
        if drivers:
            status_info += f"üöó <b>–í–æ–¥–∏—Ç–µ–ª–∏ ({len(drivers)}):</b>\n"
            for driver in drivers:
                user_mark = "üë§ " if driver.user.telegram_id == user_id else ""
                status_info += f"‚Ä¢ {user_mark}{driver.user.name}\n"
        
        if seekers:
            status_info += f"üîç <b>–ò—Å–∫–∞—Ç–µ–ª–∏ ({len(seekers)}):</b>\n"
            for seeker in seekers:
                user_mark = "üë§ " if seeker.user.telegram_id == user_id else ""
                status_info += f"‚Ä¢ {user_mark}{seeker.user.name}\n"
        
        if no_role:
            status_info += f"‚è∞ <b>–û–∂–∏–¥–∞—é—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π ({len(no_role)}):</b>\n"
            for participant in no_role:
                user_mark = "üë§ " if participant.user.telegram_id == user_id else ""
                status_info += f"‚Ä¢ {user_mark}{participant.user.name}\n"
        
        await update.message.reply_text(
            status_info,
            parse_mode="HTML",
            reply_markup=get_contextual_main_keyboard(user_id)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã",
            reply_markup=get_contextual_main_keyboard(user_id)
        )

async def handle_send_location_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    try:
        game_context = UserContextService.get_user_game_context(user_id)
        
        if game_context.status != UserContextService.STATUS_IN_GAME:
            await update.message.reply_text(
                "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã",
                reply_markup=get_contextual_main_keyboard(user_id)
            )
            return
        
        role_text = ""
        if game_context.participant and game_context.participant.role:
            role = game_context.participant.role.value
            if role == 'driver':
                role_text = "üöó –ö–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –≤–∞—Å –Ω–∞–π—Ç–∏."
            elif role == 'seeker':
                role_text = "üîç –ö–∞–∫ –∏—Å–∫–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞."
        
        location_text = (
            f"üìç <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</b>\n\n"
            f"{role_text}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:"
        )
        
        await update.message.reply_text(
            location_text,
            parse_mode="HTML",
            reply_markup=get_game_location_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏",
            reply_markup=get_contextual_main_keyboard(user_id)
        )

async def handle_game_results_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã'"""
    user_id = update.effective_user.id
    
    try:
        game_context = UserContextService.get_user_game_context(user_id)
        
        if not game_context.game or game_context.status != UserContextService.STATUS_GAME_FINISHED:
            await update.message.reply_text(
                "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä",
                reply_markup=get_contextual_main_keyboard(user_id)
            )
            return
        
        game = game_context.game
        participant = game_context.participant
        
        results_text = (
            f"üìä <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ì–†–´</b>\n\n"
            f"üéÆ <b>–ò–≥—Ä–∞ #{game.id}</b> –≤ —Ä–∞–π–æ–Ω–µ {game.district}\n"
            f"‚è∞ <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> "
        )
        
        if game.started_at and game.ended_at:
            duration = game.ended_at - game.started_at
            hours = duration.seconds // 3600
            minutes = (duration.seconds % 3600) // 60
            results_text += f"{hours}—á {minutes}–º\n"
        else:
            results_text += "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n"
        
        if participant and participant.role:
            results_text += f"üé≠ <b>–í–∞—à–∞ —Ä–æ–ª—å:</b> {get_role_text(participant.role)}\n"
        
        results_text += f"\nüèÜ <b>–ò—Ç–æ–≥–∏ –∏–≥—Ä—ã:</b>\n"
        results_text += f"‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        results_text += f"üë• –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game.participants)}\n"
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∫–æ–≥–¥–∞ –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
        
        await update.message.reply_text(
            results_text,
            parse_mode="HTML",
            reply_markup=get_contextual_main_keyboard(user_id)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã",
            reply_markup=get_contextual_main_keyboard(user_id)
        )

def get_game_status_text(status) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã"""
    status_texts = {
        'recruiting': 'üìù –ù–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
        'upcoming': '‚è∞ –°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è',
        'in_progress': 'üî• –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
        'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'canceled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
    }
    return status_texts.get(status.value if hasattr(status, 'value') else str(status), str(status))

def get_role_text(role) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏"""
    role_texts = {
        'driver': 'üöó –í–æ–¥–∏—Ç–µ–ª—å',
        'seeker': 'üîç –ò—Å–∫–∞—Ç–µ–ª—å',
        'observer': 'üëÅ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å'
    }
    return role_texts.get(role.value if hasattr(role, 'value') else str(role), str(role)) 