from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    CommandHandler, 
    CallbackContext, 
    ConversationHandler, 
    CallbackQueryHandler, 
    MessageHandler, 
    filters
)
from datetime import datetime, timedelta
import re
from loguru import logger
from telegram.error import BadRequest

from src.services.user_service import UserService
from src.services.game_service import GameService
from src.models.game import GameStatus, GameRole
from src.keyboards.inline import (
    get_game_list_keyboard,
    get_game_actions_keyboard,
    get_admin_game_keyboard,
    get_admin_create_game_keyboard
)
from src.keyboards.reply import get_contextual_main_keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
CREATE_DISTRICT, CREATE_DATE, CREATE_TIME, CREATE_MAX_PARTICIPANTS, CREATE_DESCRIPTION, CREATE_CONFIRM = range(6)

# –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤
GAME_PATTERN = r"game_(\d+)"
GAME_JOIN_PATTERN = r"join_(\d+)"
GAME_LEAVE_PATTERN = r"leave_(\d+)"
GAME_INFO_PATTERN = r"info_(\d+)"
ADMIN_GAME_PATTERN = r"admin_game_(\d+)"
ADMIN_CANCEL_PATTERN = r"cancel_game_(\d+)"
ADMIN_START_PATTERN = r"start_game_(\d+)"
# –ù–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
SEND_LOCATION_PATTERN = r"send_location_(\d+)"
SEND_PHOTO_PATTERN = r"send_photo_(\d+)"
FOUND_ME_PATTERN = r"found_me_(\d+)"
FOUND_CAR_PATTERN = r"found_car_(\d+)"
GAME_STATUS_PATTERN = r"game_status_(\d+)"

async def games_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /games - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä
    upcoming_games = GameService.get_upcoming_games(limit=5)
    
    if not upcoming_games:
        await update.message.reply_text(
            "–°–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∏–≥—Ä—É!",
            reply_markup=get_contextual_main_keyboard(user_id)
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä
    keyboard = get_game_list_keyboard(upcoming_games)
    
    await update.message.reply_text(
        "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def my_games_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mygames - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
    user, _ = UserService.get_user_by_telegram_id(telegram_id)
    if not user:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
            reply_markup=get_contextual_main_keyboard(telegram_id)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user.id
    user_games = GameService.get_user_games(user.id)
    
    if not user_games:
        await update.message.reply_text(
            "–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∏–≥—Ä—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /games, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã.",
            reply_markup=get_contextual_main_keyboard(telegram_id)
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = get_game_list_keyboard(user_games)
    
    await update.message.reply_text(
        "üéÆ <b>–í–∞—à–∏ –∏–≥—Ä—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def game_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–≥—Ä–æ–π"""
    query = update.callback_query
    await query.answer()
    
    telegram_id = query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–≥—Ä—ã: {query.data}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ –∫–æ–ª–±—ç–∫–∞
    match = re.match(GAME_PATTERN, query.data)
    if not match:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–≥—Ä—ã –∏–∑ callback: {query.data}")
        return
    
    game_id = int(match.group(1))
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ {game_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    game = GameService.get_game_by_id(game_id)
    
    if not game:
        logger.warning(f"–ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await query.edit_message_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
    user, _ = UserService.get_user_by_telegram_id(telegram_id)
    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="back_to_games")
            ]])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user.id
    is_participant = any(p.user_id == user.id for p in game.participants)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} {'—É—á–∞—Å—Ç–≤—É–µ—Ç' if is_participant else '–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç'} –≤ –∏–≥—Ä–µ {game_id}")
    
    # –ì–æ—Ç–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
    game_info = (
        f"üéÆ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ #{game.id}</b>\n\n"
        f"üìç <b>–†–∞–π–æ–Ω:</b> {game.district}\n"
        f"‚è∞ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {game.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {len(game.participants)}/{game.max_participants}\n"
        f"üö¶ <b>–°—Ç–∞—Ç—É—Å:</b> {get_status_text(game.status)}\n"
    )
    
    if game.description:
        game_info += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{game.description}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = get_game_actions_keyboard(game, is_participant)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–≥—Ä—ã {game_id}: {keyboard.inline_keyboard}")
    
    try:
        await query.edit_message_text(
            game_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.reply_text(
                game_info,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")

async def join_game_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É"""
    query = update.callback_query
    await query.answer()
    
    telegram_id = query.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ –∫–æ–ª–±—ç–∫–∞
    match = re.match(GAME_JOIN_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
    user, _ = UserService.get_user_by_telegram_id(telegram_id)
    if not user:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="back_to_games")
            ]])
        )
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏–≥—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user.id
    participant = GameService.join_game(game_id, user.id)
    
    if not participant:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="back_to_games")
            ]])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
    game = GameService.get_game_by_id(game_id)
    
    # –ì–æ—Ç–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
    game_info = (
        f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É!</b>\n\n"
        f"üéÆ <b>–ò–≥—Ä–∞ #{game.id}</b>\n"
        f"üìç <b>–†–∞–π–æ–Ω:</b> {game.district}\n"
        f"‚è∞ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {game.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {len(game.participants)}/{game.max_participants}\n"
        f"üö¶ <b>–°—Ç–∞—Ç—É—Å:</b> {get_status_text(game.status)}\n\n"
        f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mygames –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∏–≥—Ä."
    )
    
    await query.edit_message_text(
        game_info,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="back_to_games")
        ]]),
        parse_mode="HTML"
    )

async def leave_game_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É"""
    query = update.callback_query
    await query.answer()
    
    telegram_id = query.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ –∫–æ–ª–±—ç–∫–∞
    match = re.match(GAME_LEAVE_PATTERN, query.data)
    if not match:
        return
    
    game_id = int(match.group(1))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
    user, _ = UserService.get_user_by_telegram_id(telegram_id)
    if not user:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="back_to_games")
            ]])
        )
        return
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏–≥—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user.id
    success = GameService.leave_game(game_id, user.id)
    
    if not success:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="back_to_games")
            ]])
        )
        return
    
    await query.edit_message_text(
        "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É.</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /games, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="back_to_games")
        ]]),
        parse_mode="HTML"
    )

async def back_to_games_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä"""
    query = update.callback_query
    await query.answer()
    
    telegram_id = query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä'")

    
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä
    upcoming_games = GameService.get_upcoming_games(limit=5)
    
    if not upcoming_games:
        logger.info(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        await query.edit_message_text(
            "–°–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∏–≥—Ä—É!"
        )
        return
    
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º {len(upcoming_games)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä
    keyboard = get_game_list_keyboard(upcoming_games)
    try:
        await query.edit_message_text(
            "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except BadRequest as err:
        # Telegram always raises this if nothing changed;
        # ignore it and move on
        if "Message is not modified" in err.message:
            return
        # any other BadRequest should bubble up
        raise

async def game_info_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ (info_{game_id})"""
    query = update.callback_query
    await query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ")
    
    telegram_id = query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ: {query.data}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ –∫–æ–ª–±—ç–∫–∞
    match = re.match(GAME_INFO_PATTERN, query.data)
    if not match:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–≥—Ä—ã –∏–∑ info callback: {query.data}")
        return
    
    game_id = int(match.group(1))
    game = GameService.get_game_by_id(game_id)
    
    if not game:
        logger.warning(f"–ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await query.edit_message_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
    user, _ = UserService.get_user_by_telegram_id(telegram_id)
    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="back_to_games")
            ]])
        )
        return
    
    is_participant = any(p.user_id == user.id for p in game.participants)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} {'—É—á–∞—Å—Ç–≤—É–µ—Ç' if is_participant else '–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç'} –≤ –∏–≥—Ä–µ {game_id}")
    
    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if game.status in [GameStatus.HIDING_PHASE, GameStatus.SEARCHING_PHASE] and is_participant:
        await show_game_interface(update, context, game, user)
    else:
        # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
        await show_game_info(update, context, game, is_participant)

async def show_game_interface(update: Update, context: CallbackContext, game, user) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã"""
    query = update.callback_query
    telegram_id = user.telegram_id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–µ
    participant = next((p for p in game.participants if p.user_id == user.id), None)
    if not participant:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
        return
    
    role = participant.role
    role_text = "üöó –í–æ–¥–∏—Ç–µ–ª—å (–ø—Ä—è—á–µ—Ç–µ—Å—å)" if role == GameRole.DRIVER else "üîç –ò—Å–∫–∞—Ç–µ–ª—å (–∏—â–µ—Ç–µ)"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    game_info = (
        f"üéÆ <b>–ò–ì–†–ê –í –ü–†–û–¶–ï–°–°–ï #{game.id}</b>\n\n"
        f"üìç <b>–†–∞–π–æ–Ω:</b> {game.district}\n"
        f"‚è∞ <b>–ù–∞—á–∞—Ç–∞:</b> {game.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üé≠ <b>–í–∞—à–∞ —Ä–æ–ª—å:</b> {role_text}\n"
        f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {len(game.participants)}\n\n"
    )
    
    if role == GameRole.DRIVER:
        game_info += (
            f"üöó <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è:</b>\n"
            f"‚Ä¢ –ù–∞–π–¥–∏—Ç–µ —É–∫—Ä–æ–º–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n"
            f"‚Ä¢ –ñ–¥–∏—Ç–µ, –ø–æ–∫–∞ –≤–∞—Å –Ω–∞–π–¥—É—Ç –∏—Å–∫–∞—Ç–µ–ª–∏\n"
            f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ú–µ–Ω—è –Ω–∞—à–ª–∏' –∫–æ–≥–¥–∞ –≤–∞—Å –æ–±–Ω–∞—Ä—É–∂–∞—Ç\n\n"
        )
    else:
        game_info += (
            f"üîç <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏—Å–∫–∞—Ç–µ–ª—è:</b>\n"
            f"‚Ä¢ –ò—â–∏—Ç–µ —Å–ø—Ä—è—Ç–∞–≤—à–µ–≥–æ—Å—è –≤–æ–¥–∏—Ç–µ–ª—è\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –ª–æ–≥–∏–∫—É\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç–µ\n"
            f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ù–∞—à–µ–ª –≤–æ–¥–∏—Ç–µ–ª—è' –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏\n\n"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if role == GameRole.DRIVER:
        buttons = [
            [InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data=f"send_location_{game.id}")],
            [InlineKeyboardButton("üì∏ –§–æ—Ç–æ –º–µ—Å—Ç–∞", callback_data=f"photo_place_{game.id}")],
            [InlineKeyboardButton("üöó –ú–µ–Ω—è –Ω–∞—à–ª–∏!", callback_data=f"found_seeker_{game.id}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã", callback_data=f"game_status_{game.id}"),
             InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data=f"game_help_{game.id}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_games")]
        ]
    else:
        buttons = [
            [InlineKeyboardButton("üìç –ú–æ—è –ø–æ–∑–∏—Ü–∏—è", callback_data=f"send_location_{game.id}")],
            [InlineKeyboardButton("üì∏ –§–æ—Ç–æ –Ω–∞—Ö–æ–¥–∫–∏", callback_data=f"photo_find_{game.id}")],
            [InlineKeyboardButton("üîç –ù–∞—à–µ–ª –≤–æ–¥–∏—Ç–µ–ª—è!", callback_data=f"found_driver_{game.id}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã", callback_data=f"game_status_{game.id}"),
             InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data=f"game_help_{game.id}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_games")]
        ]
    
    keyboard = InlineKeyboardMarkup(buttons)
    
    try:
        await query.edit_message_text(
            game_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –≤ –∏–≥—Ä–µ {game.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")

async def show_game_info(update: Update, context: CallbackContext, game, is_participant) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ"""
    query = update.callback_query
    
    # –ì–æ—Ç–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
    game_info = (
        f"üéÆ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ #{game.id}</b>\n\n"
        f"üìç <b>–†–∞–π–æ–Ω:</b> {game.district}\n"
        f"‚è∞ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {game.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {len(game.participants)}/{game.max_participants}\n"
        f"üö¶ <b>–°—Ç–∞—Ç—É—Å:</b> {get_status_text(game.status)}\n"
    )
    
    if game.description:
        game_info += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{game.description}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = get_game_actions_keyboard(game, is_participant)
    
    try:
        await query.edit_message_text(
            game_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ {game.id}")
    except BadRequest as err:
        # Telegram always raises this if nothing changed;
        # ignore it and move on
        if "Message is not modified" in err.message:
            return
        # any other BadRequest should bubble up
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
def get_status_text(status: GameStatus) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã"""
    status_texts = {
        GameStatus.RECRUITING: "üìù –ù–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        GameStatus.UPCOMING: "‚è∞ –°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è",
        GameStatus.HIDING_PHASE: "üèÉ –§–∞–∑–∞ –ø—Ä—è—Ç–æ–∫",
        GameStatus.SEARCHING_PHASE: "üîç –§–∞–∑–∞ –ø–æ–∏—Å–∫–∞",
        GameStatus.COMPLETED: "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
        GameStatus.CANCELED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
    }
    return status_texts.get(status, str(status))

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∏–≥—Ä
game_handlers = [
    CommandHandler("games", games_command),
    CommandHandler("mygames", my_games_command),
    CallbackQueryHandler(game_button, pattern=GAME_PATTERN),
    CallbackQueryHandler(game_info_button, pattern=GAME_INFO_PATTERN),
    CallbackQueryHandler(join_game_button, pattern=GAME_JOIN_PATTERN),
    CallbackQueryHandler(leave_game_button, pattern=GAME_LEAVE_PATTERN),
    CallbackQueryHandler(back_to_games_button, pattern="back_to_games")
] 