from telegram import Update, File, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters, CallbackQueryHandler
from loguru import logger
from datetime import datetime
import os
import uuid

from src.services.user_service import UserService
from src.services.game_service import GameService
from src.services.photo_service import PhotoService
from src.models.game import GameStatus, GameRole
from src.keyboards.reply import get_contextual_main_keyboard

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    if not update.message.photo:
        await update.message.reply_text("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, _ = UserService.get_user_by_telegram_id(user_id)
    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_games = GameService.get_user_active_games(user.id)
    
    if not active_games:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.",
            reply_markup=get_contextual_main_keyboard(UserService.is_admin(user_id))
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å–∫–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
    seeker_games = []
    for game in active_games:
        if game.status == GameStatus.IN_PROGRESS:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–µ
            participant = next(
                (p for p in game.participants if p.user_id == user.id),
                None
            )
            if participant and participant.role == GameRole.SEEKER:
                seeker_games.append(game)
    
    if not seeker_games:
        await update.message.reply_text(
            "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∏—Å–∫–∞—Ç–µ–ª–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–∞—Ö. –¢–æ–ª—å–∫–æ –∏—Å–∫–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.",
            reply_markup=get_contextual_main_keyboard(UserService.is_admin(user_id))
        )
        return
    
    # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ñ–æ—Ç–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo = update.message.photo[-1]
    photo_file_id = photo.file_id
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {photo_file_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å–∫–∞—Ç–µ–ª—å
    saved_count = 0
    for game in seeker_games:
        if PhotoService.save_user_photo(user.id, game.id, photo_file_id):
            saved_count += 1
    
    if saved_count > 0:
        success_text = (
            f"üì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞!</b>\n\n"
            f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –∏–≥—Ä: {saved_count}\n\n"
            f"–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ–¥–∏—Ç–µ–ª—è–º.\n"
            f"–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è."
        )
        
        await update.message.reply_text(
            success_text,
            reply_markup=get_contextual_main_keyboard(UserService.is_admin(user_id)),
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ
        for game in seeker_games:
            await notify_drivers_about_photo(context, game.id, user.name, photo_file_id)
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_contextual_main_keyboard(UserService.is_admin(user_id))
        )

async def notify_drivers_about_photo(context: ContextTypes.DEFAULT_TYPE, game_id: int, seeker_name: str, photo_file_id: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        game = GameService.get_game_by_id(game_id)
        if not game:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –∏–≥—Ä–µ
        drivers = []
        for participant in game.participants:
            if participant.role == GameRole.DRIVER:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è telegram_id
                user, _ = UserService.get_user_by_id(participant.user_id)
                if user:
                    drivers.append(user)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º
        for driver in drivers:
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"photo_approve_{game_id}_{photo_file_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"photo_reject_{game_id}_{photo_file_id}")
                    ]
                ])
                
                notification_text = (
                    f"üì∏ <b>–ù–æ–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!</b>\n\n"
                    f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
                    f"üë§ <b>–û—Ç –∏–≥—Ä–æ–∫–∞:</b> {seeker_name}\n\n"
                    f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:"
                )
                
                await context.bot.send_photo(
                    chat_id=driver.telegram_id,
                    photo=photo_file_id,
                    caption=notification_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é {driver.telegram_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π: {e}")

async def handle_photo_approval(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü–∞—Ä—Å–∏–º callback data
    data_parts = query.data.split('_')
    if len(data_parts) < 4:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    action = data_parts[1]  # approve –∏–ª–∏ reject
    game_id = int(data_parts[2])
    photo_file_id = '_'.join(data_parts[3:])  # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ file_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–≤–æ–¥–∏—Ç–µ–ª—è
    user, _ = UserService.get_user_by_telegram_id(user_id)
    if not user:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—å –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
    game = GameService.get_game_by_id(game_id)
    if not game:
        await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    participant = next(
        (p for p in game.participants if p.user_id == user.id),
        None
    )
    
    if not participant or participant.role != GameRole.DRIVER:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–æ–¥–∏—Ç–µ–ª–µ–º –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if action == "approve":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        success = PhotoService.approve_photo(photo_file_id, user.id)
        if success:
            await query.edit_message_text(
                f"‚úÖ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                f"–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –≤–∞—Å –Ω–∞—à–µ–ª.",
                parse_mode="HTML"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–∫–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—Ö–µ
            await notify_seeker_about_approval(context, game_id, photo_file_id, True)
            
            # –ü–æ–º–µ—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ ID –∏—Å–∫–∞—Ç–µ–ª—è –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            seeker_id = PhotoService.get_photo_seeker_id(photo_file_id)
            if seeker_id:
                GameService.mark_participant_found(game_id, seeker_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
                await check_game_completion(context, game_id)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
            
    elif action == "reject":
        # –û—Ç–∫–ª–æ–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        success = PhotoService.reject_photo(photo_file_id, user.id)
        if success:
            await query.edit_message_text(
                f"‚ùå <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                f"–ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫–∏.",
                parse_mode="HTML"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–∫–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            await notify_seeker_about_approval(context, game_id, photo_file_id, False)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")

async def notify_seeker_about_approval(context: ContextTypes.DEFAULT_TYPE, game_id: int, photo_file_id: str, approved: bool) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–∫–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –∏—Å–∫–∞—Ç–µ–ª–µ
        seeker_id = PhotoService.get_photo_seeker_id(photo_file_id)
        if not seeker_id:
            return
        
        user, _ = UserService.get_user_by_id(seeker_id)
        if not user:
            return
        
        game = GameService.get_game_by_id(game_id)
        if not game:
            return
        
        if approved:
            text = (
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                f"‚úÖ –í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º!\n"
                f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n\n"
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—à–ª–∏ –º–∞—à–∏–Ω—É!"
            )
        else:
            text = (
                f"‚ùå <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∏—Å–∫–∏! –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ —Ç–∞ –º–∞—à–∏–Ω–∞ –∏–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—á–µ—Ç–∫–æ–µ."
            )
        
        await context.bot.send_message(
            chat_id=user.telegram_id,
            text=text,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–∫–∞—Ç–µ–ª—è: {e}")

async def check_game_completion(context: ContextTypes.DEFAULT_TYPE, game_id: int) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
    try:
        game = GameService.get_game_by_id(game_id)
        if not game or game.status != GameStatus.IN_PROGRESS:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
        drivers_found = 0
        total_drivers = 0
        
        for participant in game.participants:
            if participant.role == GameRole.DRIVER:
                total_drivers += 1
                if participant.is_found:
                    drivers_found += 1
        
        # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        if drivers_found >= total_drivers and total_drivers > 0:
            GameService.end_game(game_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
            await notify_game_completion(context, game_id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")

async def notify_game_completion(context: ContextTypes.DEFAULT_TYPE, game_id: int) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã"""
    try:
        game = GameService.get_game_by_id(game_id)
        if not game:
            return
        
        completion_text = (
            f"üèÅ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –∏–≥—Ä—ã:</b> {game.started_at.strftime('%d.%m %H:%M')} - {datetime.now().strftime('%H:%M')}\n\n"
            f"üéâ –í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        for participant in game.participants:
            user, _ = UserService.get_user_by_id(participant.user_id)
            if user:
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=completion_text,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {user.telegram_id}: {e}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
photo_handlers = [
    MessageHandler(filters.PHOTO, handle_photo),
    CallbackQueryHandler(handle_photo_approval, pattern=r"photo_(approve|reject)_\d+_.*"),
] 