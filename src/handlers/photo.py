import pytz
from telegram import Update, File, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters, CallbackQueryHandler
from loguru import logger
from datetime import datetime, timezone
import os
import uuid

from src.services.user_service import UserService
from src.services.game_service import GameService
from src.services.photo_service import PhotoService
from src.models.game import GameStatus, GameRole, PhotoType
from src.keyboards.reply import get_contextual_main_keyboard

DEFAULT_TIMEZONE = pytz.timezone(os.getenv("TIMEZONE", "Europe/Moscow"))

def format_msk_time(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –ú–°–ö"""
    msk_time = dt.astimezone(DEFAULT_TIMEZONE)
    return msk_time.strftime('%H:%M')

def format_msk_datetime(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ú–°–ö"""
    msk_time = dt.astimezone(DEFAULT_TIMEZONE)
    return msk_time.strftime('%d.%m.%Y %H:%M')

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    if not update.message.photo:
        await update.message.reply_text("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, _ = UserService.get_user_by_telegram_id(user_id)
    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_games = GameService.get_user_active_games(user.id)
    
    if not active_games:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.",
            reply_markup=get_contextual_main_keyboard(user_id)
        )
        return
    
    # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ñ–æ—Ç–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo = update.message.photo[-1]
    photo_file_id = photo.file_id
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {photo_file_id}")
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–≥—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
    suitable_games = []
    for game in active_games:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–µ
        participant = next(
            (p for p in game.participants if p.user_id == user.id),
            None
        )
        
        if not participant or not participant.role:
            continue
            
        # –í–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –≤ —Ñ–∞–∑–µ –ø—Ä—è—Ç–æ–∫
        if (participant.role == GameRole.DRIVER and 
            game.status == GameStatus.HIDING_PHASE):
            suitable_games.append((game, PhotoType.HIDING_SPOT))
            
        # –ò—Å–∫–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –≤ —Ñ–∞–∑–µ –ø–æ–∏—Å–∫–∞
        elif (participant.role == GameRole.SEEKER and 
              game.status == GameStatus.SEARCHING_PHASE):
            suitable_games.append((game, PhotoType.FOUND_CAR))
    
    if not suitable_games:
        status_text = {
            GameStatus.UPCOMING: "–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å",
            GameStatus.HIDING_PHASE: "–°–µ–π—á–∞—Å –∏–¥–µ—Ç —Ñ–∞–∑–∞ –ø—Ä—è—Ç–æ–∫. –ò—Å–∫–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.",
            GameStatus.SEARCHING_PHASE: "–°–µ–π—á–∞—Å –∏–¥–µ—Ç —Ñ–∞–∑–∞ –ø–æ–∏—Å–∫–∞. –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.",
            GameStatus.COMPLETED: "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            GameStatus.CANCELED: "–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        }
        
        current_status = active_games[0].status if active_games else None
        message = status_text.get(current_status, "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–≥—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ.")
        
        await update.message.reply_text(
            f"‚ùå {message}",
            reply_markup=get_contextual_main_keyboard(user_id)
        )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∏–≥—Ä—ã
    saved_count = 0
    for game, photo_type in suitable_games:
        if photo_type == PhotoType.HIDING_SPOT:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ —Ñ–æ—Ç–æ
            participant = next(p for p in game.participants if p.user_id == user.id)
            if participant.has_hidden:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä—è—Ç–æ–∫ –¥–ª—è –∏–≥—Ä—ã –≤ —Ä–∞–π–æ–Ω–µ {game.district}.",
                    reply_markup=get_contextual_main_keyboard(user_id)
                )
                continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä—è—Ç–æ–∫
            saved_photo = PhotoService.save_user_photo(
                user.id, game.id, photo_file_id, PhotoType.HIDING_SPOT,
                description="–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä—è—Ç–æ–∫"
            )
            
        elif photo_type == PhotoType.FOUND_CAR:
            # –î–ª—è —Ñ–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è
            await show_driver_selection(update, context, game, photo_file_id, user.id)
            return  # –í—ã—Ö–æ–¥–∏–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è
        
        if saved_photo:
            saved_count += 1
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —Ñ–æ—Ç–æ
            await notify_admins_about_photo(context, saved_photo)
    
    if saved_count > 0:
        if photo_type == PhotoType.HIDING_SPOT:
            success_text = (
                f"üì∏ <b>–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä—è—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
                f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –∏–≥—Ä: {saved_count}\n\n"
                f"–í–∞—à–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
                f"–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            )
        else:
            success_text = (
                f"üì∏ <b>–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
                f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –∏–≥—Ä: {saved_count}\n\n"
                f"–í–∞—à–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É."
            )
        
        await update.message.reply_text(
            success_text,
            reply_markup=get_contextual_main_keyboard(user_id),
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_contextual_main_keyboard(user_id)
        )

async def show_driver_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               game, photo_file_id: str, seeker_id: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –∏–≥—Ä–µ
    drivers = [p for p in game.participants if p.role == GameRole.DRIVER]
    
    if not drivers:
        await update.message.reply_text("‚ùå –í –∏–≥—Ä–µ –Ω–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
    buttons = []
    for driver in drivers:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è
        user, _ = UserService.get_user_by_id(driver.user_id)
        driver_name = user.name if user else f"–í–æ–¥–∏—Ç–µ–ª—å {driver.user_id}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–Ω–∞–π–¥–µ–Ω/–Ω–µ –Ω–∞–π–¥–µ–Ω)
        status = "‚úÖ" if driver.is_found else "üîç"
        
        buttons.append([InlineKeyboardButton(
            f"{status} {driver_name}",
            callback_data=f"select_driver_{game.id}_{driver.user_id}_{seeker_id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_driver_selection")])
    
    keyboard = InlineKeyboardMarkup(buttons)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if 'photo_temp' not in context.user_data:
        context.user_data['photo_temp'] = {}
    context.user_data['photo_temp'][f"{game.id}_{seeker_id}"] = photo_file_id
    
    await update.message.reply_text(
        f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –Ω–∞—à–ª–∏:</b>\n\n"
        f"üéÆ –ò–≥—Ä–∞: {game.district}\n"
        f"‚úÖ - —É–∂–µ –Ω–∞–π–¥–µ–Ω, üîç - –µ—â–µ –∏—â–µ—Ç—Å—è",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def handle_driver_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel_driver_selection":
        await query.edit_message_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    try:
        _, _, game_id, driver_id, seeker_id = query.data.split('_')
        game_id = int(game_id)
        driver_id = int(driver_id)
        seeker_id = int(seeker_id)
    except ValueError:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    photo_file_id = context.user_data.get('photo_temp', {}).get(f"{game_id}_{seeker_id}")
    if not photo_file_id:
        await query.edit_message_text("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ
    driver_user, _ = UserService.get_user_by_id(driver_id)
    driver_name = driver_user.name if driver_user else f"–í–æ–¥–∏—Ç–µ–ª—å {driver_id}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
    saved_photo = PhotoService.save_user_photo(
        seeker_id, game_id, photo_file_id, PhotoType.FOUND_CAR,
        description=f"–§–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è {driver_name}",
        found_driver_id=driver_id
    )
    
    if saved_photo:
        await query.edit_message_text(
            f"‚úÖ <b>–§–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å: {driver_name}\n"
            f"üì∏ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await notify_admins_about_photo(context, saved_photo)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'photo_temp' in context.user_data:
            context.user_data['photo_temp'].pop(f"{game_id}_{seeker_id}", None)
    else:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def notify_admins_about_photo(context: ContextTypes.DEFAULT_TYPE, photo) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        admins = UserService.get_admin_users()
        
        if not admins:
            logger.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–æ—Ç–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        game = GameService.get_game_by_id(photo.game_id)
        user, _ = UserService.get_user_by_id(photo.user_id)
        
        if not game or not user:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ç–æ {photo.id}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        photo_type_text = {
            PhotoType.HIDING_SPOT: "üìç –§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä—è—Ç–æ–∫",
            PhotoType.FOUND_CAR: "üéØ –§–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã"
        }
        
        caption_text = (
            f"üì∏ <b>–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!</b>\n\n"
            f"{photo_type_text.get(photo.photo_type, '–§–æ—Ç–æ')}\n"
            f"üéÆ <b>–ò–≥—Ä–∞:</b> {game.district}\n"
            f"üë§ <b>–û—Ç:</b> {user.name}\n"
            f"üìÖ <b>–í—Ä–µ–º—è:</b> {format_msk_datetime(photo.uploaded_at)}\n"
        )
        
        if photo.photo_type == PhotoType.FOUND_CAR and photo.found_driver_id:
            found_driver, _ = UserService.get_user_by_id(photo.found_driver_id)
            driver_name = found_driver.name if found_driver else f"ID {photo.found_driver_id}"
            caption_text += f"üéØ <b>–ù–∞–π–¥–µ–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å:</b> {driver_name}\n"
        
        caption_text += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {photo.description or '–ù–µ—Ç'}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_approve_photo_{photo.id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_photo_{photo.id}")
            ],
            [InlineKeyboardButton("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã", callback_data=f"admin_game_stats_{game.id}")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin in admins:
            try:
                await context.bot.send_photo(
                    chat_id=admin.telegram_id,
                    photo=photo.file_id,
                    caption=caption_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin.telegram_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ —Ñ–æ—Ç–æ: {e}")

async def handle_admin_photo_approval(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not UserService.is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    try:
        if query.data.startswith("admin_approve_photo_"):
            action = "approve"
            photo_id = int(query.data.replace("admin_approve_photo_", ""))
        elif query.data.startswith("admin_reject_photo_"):
            action = "reject"
            photo_id = int(query.data.replace("admin_reject_photo_", ""))
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
            return
    except ValueError:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo = PhotoService.get_photo_by_id(photo_id)
    if not photo:
        await query.edit_message_text("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞
    admin, _ = UserService.get_user_by_telegram_id(user_id)
    if not admin:
        await query.edit_message_text("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if action == "approve":
        success = PhotoService.approve_photo(photo_id, admin.id)
        if success:
            await query.edit_message_caption(
                caption=(
                    f"‚úÖ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                    f"üì∏ ID: {photo_id}\n"
                    f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin.name}"
                ),
                parse_mode="HTML"
            )
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–æ—Ç–æ
                if photo.photo_type == PhotoType.HIDING_SPOT:
                    # –î–ª—è —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä—è—Ç–æ–∫ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ø—Ä—è—Ç–∞–Ω–Ω–æ—Å—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è
                    GameService.update_participant_hidden_status(photo.game_id, photo.user_id, True)
                elif photo.photo_type == PhotoType.FOUND_CAR and photo.found_driver_id:
                    # –î–ª—è —Ñ–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã - –æ—Ç–º–µ—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –∫–∞–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
                    GameService.mark_participant_found(photo.game_id, photo.found_driver_id)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å–∫–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    seeker, _ = UserService.get_user_by_id(photo.user_id)
                    seeker_name = seeker.name if seeker else f"ID {photo.user_id}"
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è —á—Ç–æ –µ–≥–æ –Ω–∞—à–ª–∏
                    from src.handlers.callback_handler import notify_drivers_about_found
                    await notify_drivers_about_found(context, photo.game_id, seeker_name)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
                    from src.handlers.callback_handler import check_game_completion_callback
                    await check_game_completion_callback(context, photo.game_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
                
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
            await notify_user_about_photo_result(context, photo, True, admin.name)
            
        else:
            await query.edit_message_caption(
                caption="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.",
                parse_mode="HTML"
            )
    
    elif action == "reject":
        success = PhotoService.reject_photo(photo_id, admin.id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        if success:
            await query.edit_message_caption(
                caption=(
                    f"‚ùå <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>\n\n"
                    f"üì∏ ID: {photo_id}\n"
                    f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin.name}"
                ),
                parse_mode="HTML"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            await notify_user_about_photo_result(context, photo, False, admin.name)
            
        else:
            await query.edit_message_caption(
                caption="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.",
                parse_mode="HTML"
            )

async def notify_user_about_photo_result(context: ContextTypes.DEFAULT_TYPE, 
                                       photo, approved: bool, admin_name: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ç–æ"""
    try:
        user, _ = UserService.get_user_by_id(photo.user_id)
        if not user:
            return
        
        game = GameService.get_game_by_id(photo.game_id)
        if not game:
            return
        
        if approved:
            if photo.photo_type == PhotoType.HIDING_SPOT:
                text = (
                    f"‚úÖ <b>–í–∞—à–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä—è—Ç–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>\n\n"
                    f"üéÆ –ò–≥—Ä–∞: {game.district}\n"
                    f"üë§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: {admin_name}\n\n"
                    f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∂–¥–∏—Ç–µ –Ω–∞—á–∞–ª–∞ —Ñ–∞–∑—ã –ø–æ–∏—Å–∫–∞."
                )
            else:
                found_driver_text = ""
                if photo.found_driver_id:
                    found_driver, _ = UserService.get_user_by_id(photo.found_driver_id)
                    if found_driver:
                        found_driver_text = f"\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å: {found_driver.name}"
                
                text = (
                    f"‚úÖ <b>–í–∞—à–µ —Ñ–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>\n\n"
                    f"üéÆ –ò–≥—Ä–∞: {game.district}{found_driver_text}\n"
                    f"üë§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: {admin_name}\n\n"
                    f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∏—Å–∫."
                )
        else:
            text = (
                f"‚ùå <b>–í–∞—à–µ —Ñ–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n"
                f"üéÆ –ò–≥—Ä–∞: {game.district}\n"
                f"üë§ –û—Ç–∫–ª–æ–Ω–∏–ª: {admin_name}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ."
            )
        
        await context.bot.send_message(
            chat_id=user.telegram_id,
            text=text,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {e}")

async def handle_admin_game_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not UserService.is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    # –ü–∞—Ä—Å–∏–º game_id
    try:
        game_id = int(query.data.replace("admin_game_stats_", ""))
    except ValueError:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    game = GameService.get_game_by_id(game_id)
    if not game:
        await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    hiding_stats = GameService.get_hiding_stats(game_id)
    photo_stats = PhotoService.get_hiding_photos_stats(game_id)
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã #{game_id}</b>\n\n"
        f"üéÆ <b>–†–∞–π–æ–Ω:</b> {game.district}\n"
        f"üìÖ <b>–°—Ç–∞—Ç—É—Å:</b> {game.status.value}\n\n"
        f"üöó <b>–í–æ–¥–∏—Ç–µ–ª–∏:</b> {hiding_stats['total_drivers']}\n"
        f"‚úÖ –°–ø—Ä—è—Ç–∞–ª–∏—Å—å: {hiding_stats['hidden_count']}\n"
        f"‚è≥ –ù–µ —Å–ø—Ä—è—Ç–∞–ª–∏—Å—å: {hiding_stats['not_hidden_count']}\n\n"
        f"üì∏ <b>–§–æ—Ç–æ –º–µ—Å—Ç –ø—Ä—è—Ç–æ–∫:</b>\n"
        f"üì§ –í—Å–µ–≥–æ: {photo_stats.get('photos_count', 0)}\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {photo_stats.get('approved_photos', 0)}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {photo_stats.get('pending_photos', 0)}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {photo_stats.get('rejected_photos', 0)}\n"
    )
    
    if hiding_stats['not_hidden_count'] > 0:
        not_hidden_names = []
        for driver in hiding_stats['not_hidden_drivers']:
            user, _ = UserService.get_user_by_id(driver.user_id)
            name = user.name if user else f"ID {driver.user_id}"
            not_hidden_names.append(name)
        
        stats_text += f"\n‚ö†Ô∏è <b>–ù–µ —Å–ø—Ä—è—Ç–∞–ª–∏—Å—å:</b>\n" + "\n".join(f"‚Ä¢ {name}" for name in not_hidden_names)
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"admin_game_stats_{game_id}")]
    ])
    
    await query.edit_message_text(
        stats_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )



# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
photo_handlers = [
    MessageHandler(filters.PHOTO, handle_photo),
    CallbackQueryHandler(handle_driver_selection, pattern=r"^select_driver_\d+_\d+_\d+$"),
    CallbackQueryHandler(handle_driver_selection, pattern="^cancel_driver_selection$"),
    CallbackQueryHandler(handle_admin_photo_approval, pattern=r"^admin_approve_photo_\d+$"),
    CallbackQueryHandler(handle_admin_photo_approval, pattern=r"^admin_reject_photo_\d+$"),
    CallbackQueryHandler(handle_admin_game_stats, pattern=r"^admin_game_stats_\d+$"),
] 