from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from src.models.game import GameStatus

def get_game_list_keyboard(games):
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä"""
    buttons = []
    for game in games:
        # –§–æ—Ä–º–∞—Ç: "–†–∞–π–æ–Ω, –¥–∞—Ç–∞ (—É—á–∞—Å—Ç–Ω–∏–∫–∏/–º–∞–∫—Å–∏–º—É–º)"
        game_info = f"{game.district}, {game.scheduled_at.strftime('%d.%m %H:%M')} ({len(game.participants)}/{game.max_participants})"
        buttons.append([InlineKeyboardButton(text=game_info, callback_data=f"game_{game.id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å"
    buttons.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_games")])
    
    return InlineKeyboardMarkup(buttons)

def get_game_actions_keyboard(game, is_participant=False):
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∏–≥—Ä–æ–π"""
    buttons = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –∏ —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if game.status == GameStatus.RECRUITING:
        if is_participant:
            buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"leave_{game.id}")])
        else:
            buttons.append([InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"join_{game.id}")])
    elif game.status == GameStatus.UPCOMING:
        if is_participant:
            buttons.append([InlineKeyboardButton(text="‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã", callback_data=f"info_{game.id}")])
            buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"leave_{game.id}")])
        else:
            # –ò–≥—Ä–∞ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è, –∑–∞–ø–∏—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç–∞
            buttons.append([InlineKeyboardButton(text="‚è∞ –°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è", callback_data=f"info_{game.id}")])
    elif game.status in [GameStatus.HIDING_PHASE, GameStatus.SEARCHING_PHASE]:
        if is_participant:
            buttons.append([InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"info_{game.id}")])
            buttons.append([InlineKeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data=f"send_location_{game.id}")])
        else:
            buttons.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –ò–¥–µ—Ç –∏–≥—Ä–∞", callback_data=f"info_{game.id}")])
    elif game.status == GameStatus.COMPLETED:
        buttons.append([InlineKeyboardButton(text="‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", callback_data=f"info_{game.id}")])
    elif game.status == GameStatus.CANCELED:
        buttons.append([InlineKeyboardButton(text="‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", callback_data=f"info_{game.id}")])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_games")])
    
    return InlineKeyboardMarkup(buttons)

def get_admin_game_keyboard(game):
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π (–∞–¥–º–∏–Ω)"""
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
    if game.status == GameStatus.RECRUITING or game.status == GameStatus.UPCOMING:
        buttons.append([InlineKeyboardButton(text="üé≤ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª–∏", callback_data=f"choose_role_assignment_type_{game.id}")])
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É", callback_data=f"edit_game_{game.id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
    if game.status not in [GameStatus.COMPLETED, GameStatus.CANCELED]:
        buttons.append([InlineKeyboardButton(text="üéÆ –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"manual_control_{game.id}")])
    
    if game.status == GameStatus.RECRUITING:
        # –î–ª—è –∏–≥—Ä –≤ —Å—Ç–∞—Ç—É—Å–µ –Ω–∞–±–æ—Ä–∞ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–ø—É—Å–∫
        buttons.append([InlineKeyboardButton(text="‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data=f"start_early_{game.id}")])
    
    if game.status == GameStatus.UPCOMING:
        buttons.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f"start_game_{game.id}")])
    
    if game.status in [GameStatus.HIDING_PHASE, GameStatus.SEARCHING_PHASE]:
        buttons.append([InlineKeyboardButton(text="‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data=f"end_game_{game.id}")])
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ª—é–±–æ–π –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞
    if game.status != GameStatus.COMPLETED and game.status != GameStatus.CANCELED:
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=f"cancel_game_{game.id}")])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_admin_games")])
    
    return InlineKeyboardMarkup(buttons)

def get_admin_create_game_keyboard():
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã (–∞–¥–º–∏–Ω)"""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", callback_data="create_game")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_games")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_location_keyboard(game_id):
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    buttons = [
        [InlineKeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é", callback_data=f"send_location_{game_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_location")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_game_finish_keyboard(game_id, is_driver=False):
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
    if is_driver:
        text = "üöó –ú–µ–Ω—è –Ω–∞—à–ª–∏"
    else:
        text = "üîç –Ø –Ω–∞—à–µ–ª –º–∞—à–∏–Ω—É"
    
    buttons = [
        [InlineKeyboardButton(text=text, callback_data=f"finish_game_{game_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_finish")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_game_settings_keyboard(settings):
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã"""
    buttons = []
    
    # –†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    mode_icon = "üî¥" if settings.manual_control_mode else "üü¢"
    mode_text = "–†—É—á–Ω–æ–π" if settings.manual_control_mode else "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
    buttons.append([InlineKeyboardButton(
        text=f"{mode_icon} –†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {mode_text}",
        callback_data="toggle_manual_control"
    )])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º)
    if not settings.manual_control_mode:
        buttons.append([InlineKeyboardButton(
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
            callback_data="automation_settings"
        )])
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    buttons.append([InlineKeyboardButton(
        text="‚è± –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        callback_data="time_settings"
    )])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    buttons.append([InlineKeyboardButton(
        text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        callback_data="notification_settings"
    )])
    
    # –°–±—Ä–æ—Å –∫ —É–º–æ–ª—á–∞–Ω–∏—é
    buttons.append([InlineKeyboardButton(
        text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é",
        callback_data="reset_settings"
    )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    
    return InlineKeyboardMarkup(buttons)

def get_automation_settings_keyboard(settings):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    buttons = []
    
    # –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
    auto_start_icon = "‚úÖ" if settings.auto_start_game else "‚ùå"
    buttons.append([InlineKeyboardButton(
        text=f"{auto_start_icon} –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã",
        callback_data="toggle_auto_start_game"
    )])
    
    # –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    auto_roles_icon = "‚úÖ" if settings.auto_assign_roles else "‚ùå"
    buttons.append([InlineKeyboardButton(
        text=f"{auto_roles_icon} –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π",
        callback_data="toggle_auto_assign_roles"
    )])
    
    # –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç —Ñ–∞–∑—ã –ø—Ä—è—Ç–æ–∫
    auto_hiding_icon = "‚úÖ" if settings.auto_start_hiding else "‚ùå"
    buttons.append([InlineKeyboardButton(
        text=f"{auto_hiding_icon} –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç —Ñ–∞–∑—ã –ø—Ä—è—Ç–æ–∫",
        callback_data="toggle_auto_start_hiding"
    )])
    
    # –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç —Ñ–∞–∑—ã –ø–æ–∏—Å–∫–∞
    auto_searching_icon = "‚úÖ" if settings.auto_start_searching else "‚ùå"
    buttons.append([InlineKeyboardButton(
        text=f"{auto_searching_icon} –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç —Ñ–∞–∑—ã –ø–æ–∏—Å–∫–∞",
        callback_data="toggle_auto_start_searching"
    )])
    
    # –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    auto_end_icon = "‚úÖ" if settings.auto_end_game else "‚ùå"
    buttons.append([InlineKeyboardButton(
        text=f"{auto_end_icon} –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã",
        callback_data="toggle_auto_end_game"
    )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="game_settings")])
    
    return InlineKeyboardMarkup(buttons)

def get_time_settings_keyboard(settings):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    buttons = []
    
    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–∑—ã –ø—Ä—è—Ç–æ–∫
    buttons.append([InlineKeyboardButton(
        text=f"üïê –§–∞–∑–∞ –ø—Ä—è—Ç–æ–∫: {settings.hiding_phase_duration} –º–∏–Ω",
        callback_data="set_hiding_duration"
    )])
    
    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–∑—ã –ø–æ–∏—Å–∫–∞
    buttons.append([InlineKeyboardButton(
        text=f"üïë –§–∞–∑–∞ –ø–æ–∏—Å–∫–∞: {settings.searching_phase_duration} –º–∏–Ω",
        callback_data="set_searching_duration"
    )])
    
    # –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ
    buttons.append([InlineKeyboardButton(
        text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ: {settings.game_start_notification_time} –º–∏–Ω",
        callback_data="set_notification_time"
    )])
    
    # –ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
    buttons.append([InlineKeyboardButton(
        text=f"üë• –ú–∏–Ω. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {settings.min_participants_to_start}",
        callback_data="set_min_participants"
    )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="game_settings")])
    
    return InlineKeyboardMarkup(buttons)

def get_notification_settings_keyboard(settings):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    buttons = []
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π
    notify_role_icon = "‚úÖ" if settings.notify_on_role_assignment else "‚ùå"
    buttons.append([InlineKeyboardButton(
        text=f"{notify_role_icon} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–æ–ª—è—Ö",
        callback_data="toggle_notify_role"
    )])
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ñ–∞–∑
    notify_phase_icon = "‚úÖ" if settings.notify_on_phase_change else "‚ùå"
    buttons.append([InlineKeyboardButton(
        text=f"{notify_phase_icon} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–∞–∑–∞—Ö",
        callback_data="toggle_notify_phase"
    )])
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    notify_action_icon = "‚úÖ" if settings.notify_on_participant_action else "‚ùå"
    buttons.append([InlineKeyboardButton(
        text=f"{notify_action_icon} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö",
        callback_data="toggle_notify_action"
    )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="game_settings")])
    
    return InlineKeyboardMarkup(buttons)

def get_manual_control_keyboard(game_id, game_status, participants_info):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
    if game_status == GameStatus.UPCOMING.value:
        buttons.append([InlineKeyboardButton(
            text="üé≤ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª–∏",
            callback_data=f"choose_role_assignment_type_{game_id}"
        )])
        buttons.append([InlineKeyboardButton(
            text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ñ–∞–∑—É –ø—Ä—è—Ç–æ–∫",
            callback_data=f"manual_start_hiding_{game_id}"
        )])
    
    elif game_status == GameStatus.HIDING_PHASE.value:
        buttons.append([InlineKeyboardButton(
            text="üîç –ù–∞—á–∞—Ç—å —Ñ–∞–∑—É –ø–æ–∏—Å–∫–∞",
            callback_data=f"manual_start_searching_{game_id}"
        )])
        buttons.append([InlineKeyboardButton(
            text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
            callback_data=f"manage_participants_{game_id}"
        )])
    
    elif game_status == GameStatus.SEARCHING_PHASE.value:
        buttons.append([InlineKeyboardButton(
            text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
            callback_data=f"manage_participants_{game_id}"
        )])
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
    if game_status not in [GameStatus.COMPLETED.value, GameStatus.CANCELED.value]:
        buttons.append([InlineKeyboardButton(
            text="‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É",
            callback_data=f"manual_end_game_{game_id}"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
        callback_data=f"manual_control_{game_id}"
    )])
    
    buttons.append([InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–µ",
        callback_data=f"admin_game_{game_id}"
    )])
    
    return InlineKeyboardMarkup(buttons)

def get_participants_management_keyboard(game_id, participants):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    for participant in participants:
        role_emoji = "üöó" if participant.get("role") == "driver" else "üîç"
        status_emoji = "‚úÖ" if participant.get("is_found") else "‚è≥"
        
        button_text = f"{role_emoji}{status_emoji} {participant['user_name']}"
        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"manage_participant_{game_id}_{participant['id']}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    buttons.append([InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞",
        callback_data=f"add_participant_{game_id}"
    )])
    
    buttons.append([InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
        callback_data=f"manual_control_{game_id}"
    )])
    
    return InlineKeyboardMarkup(buttons)

def get_participant_actions_keyboard(game_id, participant_id, participant_info):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º"""
    buttons = []
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å)
    if participant_info.get("role"):
        current_role = participant_info["role"]
        new_role = "seeker" if current_role == "driver" else "driver"
        new_role_emoji = "üîç" if new_role == "seeker" else "üöó"
        
        buttons.append([InlineKeyboardButton(
            text=f"üîÑ –°–¥–µ–ª–∞—Ç—å {new_role_emoji}",
            callback_data=f"change_role_{game_id}_{participant_id}_{new_role}"
        )])
    
    # –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ/–≤—ã–±—ã–≤—à–µ–≥–æ
    if not participant_info.get("is_found"):
        buttons.append([InlineKeyboardButton(
            text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–º",
            callback_data=f"mark_found_{game_id}_{participant_id}"
        )])
        buttons.append([InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–±—ã–≤—à–∏–º",
            callback_data=f"mark_eliminated_{game_id}_{participant_id}"
        )])
    else:
        buttons.append([InlineKeyboardButton(
            text="üîÑ –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ",
            callback_data=f"unmark_found_{game_id}_{participant_id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    buttons.append([InlineKeyboardButton(
        text="üóë –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞",
        callback_data=f"remove_participant_{game_id}_{participant_id}"
    )])
    
    buttons.append([InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º",
        callback_data=f"manage_participants_{game_id}"
    )])
    
    return InlineKeyboardMarkup(buttons)

def get_profile_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_profile_edit_keyboard():
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    buttons = [
        [InlineKeyboardButton(text="üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è", callback_data="edit_profile_name")],
        [InlineKeyboardButton(text="üì± –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_profile_phone")],
        [InlineKeyboardButton(text="üèò –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–π–æ–Ω", callback_data="edit_profile_district")],
        [InlineKeyboardButton(text="üé≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª—å", callback_data="edit_profile_role")],
        [InlineKeyboardButton(text="üöó –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", callback_data="edit_profile_car_brand")],
        [InlineKeyboardButton(text="üé® –¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è", callback_data="edit_profile_car_color")],
        [InlineKeyboardButton(text="üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä", callback_data="edit_profile_car_number")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_profile_field_confirm_keyboard(field):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_profile_{field}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_profile_edit")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="edit_profile")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_profile_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    buttons = [
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_role_selection_keyboard():
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    from src.services.settings_service import SettingsService
    available_roles = SettingsService.get_available_roles()
    
    buttons = []
    for role in available_roles:
        buttons.append([InlineKeyboardButton(text=role, callback_data=f"select_role_{role}")])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="edit_profile")])
    return InlineKeyboardMarkup(buttons)

def get_district_selection_keyboard():
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞"""
    from src.services.settings_service import SettingsService
    available_districts = SettingsService.get_districts()
    
    buttons = []
    for district in available_districts:
        buttons.append([InlineKeyboardButton(text=district, callback_data=f"select_district_{district}")])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="edit_profile")])
    return InlineKeyboardMarkup(buttons)

def get_role_assignment_type_keyboard(game_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
    buttons = [
        [InlineKeyboardButton(
            text="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            callback_data=f"assign_roles_random_{game_id}"
        )],
        [InlineKeyboardButton(
            text="‚úã –†—É—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            callback_data=f"assign_roles_manual_{game_id}"
        )],
        [InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
            callback_data=f"manual_control_{game_id}"
        )]
    ]
    return InlineKeyboardMarkup(buttons)

def get_manual_role_assignment_keyboard(game_id, participants, max_drivers):
    """–ù–æ–≤–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
    buttons = []
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–æ–ª–∏
    drivers = [p for p in participants if p.get("current_role") == "driver"]
    seekers = [p for p in participants if p.get("current_role") == "seeker"]
    unassigned = [p for p in participants if not p.get("current_role")]
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    status_text = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)} | üöó –í–æ–¥–∏—Ç–µ–ª–∏: {len(drivers)}/{max_drivers} | üîç –ò—Å–∫–∞—Ç–µ–ª–∏: {len(seekers)}"
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏—Ö —Ç–µ–∫—É—â–∏–º–∏ —Ä–æ–ª—è–º–∏
    for participant in participants:
        user_name = participant['user_name']
        current_role = participant.get('current_role')
        
        if current_role == "driver":
            role_emoji = "üöó"
            role_text = "–í–æ–¥–∏—Ç–µ–ª—å"
        elif current_role == "seeker":
            role_emoji = "üîç"
            role_text = "–ò—Å–∫–∞—Ç–µ–ª—å"
        else:
            role_emoji = "‚ùì"
            role_text = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
        
        button_text = f"{role_emoji} {user_name} - {role_text}"
        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"edit_participant_role_{game_id}_{participant['id']}"
        )])
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    buttons.append([InlineKeyboardButton(text="‚îÄ" * 30, callback_data="separator")])
    
    # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    quick_actions = []
    
    # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ - –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–≤—à–∏–º—Å—è
    if unassigned:
        quick_actions.append(InlineKeyboardButton(
            text="‚ö° –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",
            callback_data=f"auto_fill_roles_{game_id}"
        ))
    
    # –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ä–æ–ª–µ–π
    if drivers or seekers:
        quick_actions.append(InlineKeyboardButton(
            text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ",
            callback_data=f"reset_all_roles_{game_id}"
        ))
    
    if quick_actions:
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(quick_actions), 2):
            buttons.append(quick_actions[i:i+2])
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —Ä–æ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
    can_confirm = (
        len(unassigned) == 0 and 
        len(drivers) > 0 and len(drivers) <= max_drivers and 
        len(seekers) > 0
    )
    
    if can_confirm:
        buttons.append([InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            callback_data=f"confirm_manual_roles_{game_id}"
        )])
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
        error_text = "‚ùå "
        if len(unassigned) > 0:
            error_text += f"–ù–∞–∑–Ω–∞—á—å—Ç–µ —Ä–æ–ª–∏ –≤—Å–µ–º ({len(unassigned)} –æ—Å—Ç–∞–ª–æ—Å—å)"
        elif len(drivers) == 0:
            error_text += "–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã 1 –≤–æ–¥–∏—Ç–µ–ª—å"
        elif len(drivers) > max_drivers:
            error_text += f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π ({len(drivers)}/{max_drivers})"
        elif len(seekers) == 0:
            error_text += "–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã 1 –∏—Å–∫–∞—Ç–µ–ª—å"
        
        buttons.append([InlineKeyboardButton(
            text=error_text,
            callback_data="validation_error"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞",
        callback_data=f"choose_role_assignment_type_{game_id}"
    )])
    
    return InlineKeyboardMarkup(buttons)

def get_participant_role_edit_keyboard(game_id, participant_id, participant_name, current_role, max_drivers, current_driver_count):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    buttons = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    current_role_text = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
    if current_role == "driver":
        current_role_text = "üöó –í–æ–¥–∏—Ç–µ–ª—å"
    elif current_role == "seeker":
        current_role_text = "üîç –ò—Å–∫–∞—Ç–µ–ª—å"
    
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    role_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–í–æ–¥–∏—Ç–µ–ª—å"
    can_be_driver = (current_role == "driver") or (current_driver_count < max_drivers)
    if can_be_driver:
        driver_text = "üöó –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º"
        if current_role == "driver":
            driver_text = "üöó –í–æ–¥–∏—Ç–µ–ª—å (—Ç–µ–∫—É—â–∞—è)"
        
        role_buttons.append(InlineKeyboardButton(
            text=driver_text,
            callback_data=f"set_participant_role_{game_id}_{participant_id}_driver"
        ))
    else:
        role_buttons.append(InlineKeyboardButton(
            text=f"üöó –í–æ–¥–∏—Ç–µ–ª—å ({current_driver_count}/{max_drivers})",
            callback_data="role_limit_reached"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ "–ò—Å–∫–∞—Ç–µ–ª—å"
    seeker_text = "üîç –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–∫–∞—Ç–µ–ª–µ–º"
    if current_role == "seeker":
        seeker_text = "üîç –ò—Å–∫–∞—Ç–µ–ª—å (—Ç–µ–∫—É—â–∞—è)"
    
    role_buttons.append(InlineKeyboardButton(
        text=seeker_text,
        callback_data=f"set_participant_role_{game_id}_{participant_id}_seeker"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–æ–ª–µ–π
    buttons.append(role_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–æ–ª–∏ (–µ—Å–ª–∏ —Ä–æ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞)
    if current_role:
        buttons.append([InlineKeyboardButton(
            text="‚ùå –£–±—Ä–∞—Ç—å —Ä–æ–ª—å",
            callback_data=f"set_participant_role_{game_id}_{participant_id}_none"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        callback_data=f"assign_roles_manual_{game_id}"
    )])
    
    return InlineKeyboardMarkup(buttons)

def get_available_users_keyboard(game_id, users):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–≥—Ä—É"""
    buttons = []
    
    for user in users:
        button_text = f"{user['name']}"
        if user.get('district'):
            button_text += f" ({user['district']})"
        
        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"confirm_add_participant_{game_id}_{user['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º",
        callback_data=f"manage_participants_{game_id}"
    )])
    
    return InlineKeyboardMarkup(buttons)
 