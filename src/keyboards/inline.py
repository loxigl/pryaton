from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from src.models.game import GameStatus

def get_game_list_keyboard(games):
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä"""
    buttons = []
    for game in games:
        # –§–æ—Ä–º–∞—Ç: "–†–∞–π–æ–Ω, –¥–∞—Ç–∞ (—É—á–∞—Å—Ç–Ω–∏–∫–∏/–º–∞–∫—Å–∏–º—É–º)"
        game_info = f"{game.district}, {game.scheduled_at.strftime('%d.%m %H:%M')} ({len(game.participants)}/{game.max_participants})"
        buttons.append([InlineKeyboardButton(text=game_info, callback_data=f"game_{game.id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å"
    buttons.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_games")])
    
    return InlineKeyboardMarkup(buttons)

def get_game_actions_keyboard(game, is_participant=False):
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∏–≥—Ä–æ–π"""
    buttons = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –∏ —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if game.status == GameStatus.RECRUITING:
        if is_participant:
            buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"leave_{game.id}")])
        else:
            buttons.append([InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"join_{game.id}")])
    elif game.status == GameStatus.UPCOMING:
        if is_participant:
            buttons.append([InlineKeyboardButton(text="‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã", callback_data=f"info_{game.id}")])
            buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"leave_{game.id}")])
        else:
            # –ò–≥—Ä–∞ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è, –∑–∞–ø–∏—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç–∞
            buttons.append([InlineKeyboardButton(text="‚è∞ –°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è", callback_data=f"info_{game.id}")])
    elif game.status == GameStatus.IN_PROGRESS:
        if is_participant:
            buttons.append([InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"info_{game.id}")])
            buttons.append([InlineKeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data=f"send_location_{game.id}")])
        else:
            buttons.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –ò–¥–µ—Ç –∏–≥—Ä–∞", callback_data=f"info_{game.id}")])
    elif game.status == GameStatus.COMPLETED:
        buttons.append([InlineKeyboardButton(text="‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", callback_data=f"info_{game.id}")])
    elif game.status == GameStatus.CANCELED:
        buttons.append([InlineKeyboardButton(text="‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", callback_data=f"info_{game.id}")])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_games")])
    
    return InlineKeyboardMarkup(buttons)

def get_admin_game_keyboard(game):
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π (–∞–¥–º–∏–Ω)"""
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
    if game.status == GameStatus.RECRUITING or game.status == GameStatus.UPCOMING:
        buttons.append([InlineKeyboardButton(text="üé≤ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª–∏", callback_data=f"assign_roles_{game.id}")])
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É", callback_data=f"edit_game_{game.id}")])
    
    if game.status == GameStatus.RECRUITING:
        # –î–ª—è –∏–≥—Ä –≤ —Å—Ç–∞—Ç—É—Å–µ –Ω–∞–±–æ—Ä–∞ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–ø—É—Å–∫
        buttons.append([InlineKeyboardButton(text="‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data=f"start_early_{game.id}")])
    
    if game.status == GameStatus.UPCOMING:
        buttons.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f"start_game_{game.id}")])
    
    if game.status == GameStatus.IN_PROGRESS:
        buttons.append([InlineKeyboardButton(text="‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data=f"end_game_{game.id}")])
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ª—é–±–æ–π –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞
    if game.status != GameStatus.COMPLETED and game.status != GameStatus.CANCELED:
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=f"cancel_game_{game.id}")])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_admin_games")])
    
    return InlineKeyboardMarkup(buttons)

def get_admin_create_game_keyboard():
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã (–∞–¥–º–∏–Ω)"""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", callback_data="create_game")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_games")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_location_keyboard(game_id):
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    buttons = [
        [InlineKeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é", callback_data=f"send_location_{game_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_location")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_game_finish_keyboard(game_id, is_driver=False):
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
    if is_driver:
        text = "üöó –ú–µ–Ω—è –Ω–∞—à–ª–∏"
    else:
        text = "üîç –Ø –Ω–∞—à–µ–ª –º–∞—à–∏–Ω—É"
    
    buttons = [
        [InlineKeyboardButton(text=text, callback_data=f"finish_game_{game_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_finish")]
    ]
    return InlineKeyboardMarkup(buttons)
 